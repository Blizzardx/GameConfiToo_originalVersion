/**
 * Autogenerated by script gen tool
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using GameConfigTools.Constant;
using GameConfigTools.Util;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml.Linq;
using Config;
using Config.Table;
using Thrift.Protocol;

namespace GameConfigTools.Import
{
    public partial class AeroConfigImporter : AbstractExcelImporter
    {
		private int id;
		private string name;
		private int groupId;
		private int evolutionLevel;
		private int evolutionConsumeId;
		private int decomposeId;
		private int nameeMessageId;
		private int descMessageId;
		private string model;
		private string prefab;
		private string icon;
		private int quality;
		private int moveAdd;
		private int flyAdd;
		private int moveMax;
		private int flyMax;
		private int dropAdd;
		private int dropMax;
		private int friction;
		private int resistance;
		private int recoverId;
		private int recoverHp;
    
        protected override void AutoParasTable(List<string[][]> sheetValues, ref string errMsg)
        {
            OnAutoParasBegin();

            if (sheetValues == null || sheetValues.Count == 0)
            {
                return;
            }
            
            string[] sheetNames = this.GetSheetNames();
            for (int sheetIndex = 0; sheetIndex < sheetValues.Count; sheetIndex++)
            {
                string sheetName = sheetNames[sheetIndex];
                string[][] values = sheetValues[sheetIndex];
                for (int i = 0; i < values.Length; i++)
                {
                    if (!this.IsLineNotNull(values[i]))
                    {
                        continue;
                    }
                    int row = i + 1;
                    int index = 0;

if (!VaildUtil.TryConvert(values[i][0], out id,int.MinValue,int.MaxValue))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,0+1, id,int.MinValue,int.MaxValue,"int","id");
	return;
}
if (!VaildUtil.TryConvert(values[i][1], out name,string.Empty,string.Empty))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,1+1, name,string.Empty,string.Empty,"string","name");
	return;
}
if (!VaildUtil.TryConvert(values[i][2], out groupId,int.MinValue,int.MaxValue))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,2+1, groupId,int.MinValue,int.MaxValue,"int","groupId");
	return;
}
if (!VaildUtil.TryConvert(values[i][3], out evolutionLevel,int.MinValue,int.MaxValue))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,3+1, evolutionLevel,int.MinValue,int.MaxValue,"int","evolutionLevel");
	return;
}
if (!VaildUtil.TryConvert(values[i][4], out evolutionConsumeId,int.MinValue,int.MaxValue))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,4+1, evolutionConsumeId,int.MinValue,int.MaxValue,"int","evolutionConsumeId");
	return;
}
if (!VaildUtil.TryConvert(values[i][5], out decomposeId,int.MinValue,int.MaxValue))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,5+1, decomposeId,int.MinValue,int.MaxValue,"int","decomposeId");
	return;
}
if (!VaildUtil.TryConvert(values[i][6], out nameeMessageId,int.MinValue,int.MaxValue))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,6+1, nameeMessageId,int.MinValue,int.MaxValue,"int","nameeMessageId");
	return;
}
if (!VaildUtil.TryConvert(values[i][7], out descMessageId,int.MinValue,int.MaxValue))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,7+1, descMessageId,int.MinValue,int.MaxValue,"int","descMessageId");
	return;
}
if (!VaildUtil.TryConvert(values[i][8], out model,string.Empty,string.Empty))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,8+1, model,string.Empty,string.Empty,"string","model");
	return;
}
if (!VaildUtil.TryConvert(values[i][9], out prefab,string.Empty,string.Empty))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,9+1, prefab,string.Empty,string.Empty,"string","prefab");
	return;
}
if (!VaildUtil.TryConvert(values[i][10], out icon,string.Empty,string.Empty))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,10+1, icon,string.Empty,string.Empty,"string","icon");
	return;
}
if (!VaildUtil.TryConvert(values[i][11], out quality,int.MinValue,int.MaxValue))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,11+1, quality,int.MinValue,int.MaxValue,"int","quality");
	return;
}
if (!VaildUtil.TryConvert(values[i][12], out moveAdd,int.MinValue,int.MaxValue))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,12+1, moveAdd,int.MinValue,int.MaxValue,"int","moveAdd");
	return;
}
if (!VaildUtil.TryConvert(values[i][13], out flyAdd,int.MinValue,int.MaxValue))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,13+1, flyAdd,int.MinValue,int.MaxValue,"int","flyAdd");
	return;
}
if (!VaildUtil.TryConvert(values[i][14], out moveMax,int.MinValue,int.MaxValue))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,14+1, moveMax,int.MinValue,int.MaxValue,"int","moveMax");
	return;
}
if (!VaildUtil.TryConvert(values[i][15], out flyMax,int.MinValue,int.MaxValue))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,15+1, flyMax,int.MinValue,int.MaxValue,"int","flyMax");
	return;
}
if (!VaildUtil.TryConvert(values[i][16], out dropAdd,int.MinValue,int.MaxValue))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,16+1, dropAdd,int.MinValue,int.MaxValue,"int","dropAdd");
	return;
}
if (!VaildUtil.TryConvert(values[i][17], out dropMax,int.MinValue,int.MaxValue))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,17+1, dropMax,int.MinValue,int.MaxValue,"int","dropMax");
	return;
}
if (!VaildUtil.TryConvert(values[i][18], out friction,int.MinValue,int.MaxValue))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,18+1, friction,int.MinValue,int.MaxValue,"int","friction");
	return;
}
if (!VaildUtil.TryConvert(values[i][19], out resistance,int.MinValue,int.MaxValue))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,19+1, resistance,int.MinValue,int.MaxValue,"int","resistance");
	return;
}
if (!VaildUtil.TryConvert(values[i][20], out recoverId,int.MinValue,int.MaxValue))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,20+1, recoverId,int.MinValue,int.MaxValue,"int","recoverId");
	return;
}
if (!VaildUtil.TryConvert(values[i][21], out recoverHp,int.MinValue,int.MaxValue))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,21+1, recoverHp,int.MinValue,int.MaxValue,"int","recoverHp");
	return;
}
                    
                    
                    OnAutoParasLine(sheetName,row,values[i],ref errMsg);
                    if (!string.IsNullOrEmpty(errMsg))
                    {
                        return;
                    }
                }
            }
        }
    }
}