/**
 * Autogenerated by script gen tool
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using GameConfigTools.Constant;
using GameConfigTools.Util;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml.Linq;
using Config;
using Config.Table;
using Thrift.Protocol;

namespace GameConfigTools.Import
{
    public partial class CharacterActionConfigImporter : AbstractExcelImporter
    {
		private int id;
		private string born;
		private int bornTime;
		private string idle;
		private int idleTime;
		private string walk;
		private int walkTime;
		private string jump;
		private int jumpTime;
		private string drop;
		private int dropTime;
		private string landing;
		private int landingTime;
		private string death;
		private int deathTime;
		private string back;
		private int backTime;
		private string left;
		private int leftTime;
		private string right;
		private int rightTime;
		private string relaxIdle;
		private int relaxIdleTime;
		private string relaxWalk;
		private int relaxWalkTime;
		private string idleFire;
		private int idleFireTime;
    
        protected override void AutoParasTable(List<string[][]> sheetValues, ref string errMsg)
        {
            OnAutoParasBegin();

            if (sheetValues == null || sheetValues.Count == 0)
            {
                return;
            }
            
            string[] sheetNames = this.GetSheetNames();
            for (int sheetIndex = 0; sheetIndex < sheetValues.Count; sheetIndex++)
            {
                string sheetName = sheetNames[sheetIndex];
                string[][] values = sheetValues[sheetIndex];
                for (int i = 0; i < values.Length; i++)
                {
                    if (!this.IsLineNotNull(values[i]))
                    {
                        continue;
                    }
                    int row = i + 1;
                    int index = 0;

if (!VaildUtil.TryConvert(values[i][0], out id,int.MinValue,int.MaxValue))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,0+1, id,int.MinValue,int.MaxValue,"int","id");
	return;
}
if (!VaildUtil.TryConvert(values[i][1], out born,string.Empty,string.Empty))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,1+1, born,string.Empty,string.Empty,"string","born");
	return;
}
if (!VaildUtil.TryConvert(values[i][2], out bornTime,int.MinValue,int.MaxValue))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,2+1, bornTime,int.MinValue,int.MaxValue,"int","bornTime");
	return;
}
if (!VaildUtil.TryConvert(values[i][3], out idle,string.Empty,string.Empty))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,3+1, idle,string.Empty,string.Empty,"string","idle");
	return;
}
if (!VaildUtil.TryConvert(values[i][4], out idleTime,int.MinValue,int.MaxValue))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,4+1, idleTime,int.MinValue,int.MaxValue,"int","idleTime");
	return;
}
if (!VaildUtil.TryConvert(values[i][5], out walk,string.Empty,string.Empty))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,5+1, walk,string.Empty,string.Empty,"string","walk");
	return;
}
if (!VaildUtil.TryConvert(values[i][6], out walkTime,int.MinValue,int.MaxValue))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,6+1, walkTime,int.MinValue,int.MaxValue,"int","walkTime");
	return;
}
if (!VaildUtil.TryConvert(values[i][7], out jump,string.Empty,string.Empty))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,7+1, jump,string.Empty,string.Empty,"string","jump");
	return;
}
if (!VaildUtil.TryConvert(values[i][8], out jumpTime,int.MinValue,int.MaxValue))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,8+1, jumpTime,int.MinValue,int.MaxValue,"int","jumpTime");
	return;
}
if (!VaildUtil.TryConvert(values[i][9], out drop,string.Empty,string.Empty))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,9+1, drop,string.Empty,string.Empty,"string","drop");
	return;
}
if (!VaildUtil.TryConvert(values[i][10], out dropTime,int.MinValue,int.MaxValue))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,10+1, dropTime,int.MinValue,int.MaxValue,"int","dropTime");
	return;
}
if (!VaildUtil.TryConvert(values[i][11], out landing,string.Empty,string.Empty))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,11+1, landing,string.Empty,string.Empty,"string","landing");
	return;
}
if (!VaildUtil.TryConvert(values[i][12], out landingTime,int.MinValue,int.MaxValue))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,12+1, landingTime,int.MinValue,int.MaxValue,"int","landingTime");
	return;
}
if (!VaildUtil.TryConvert(values[i][13], out death,string.Empty,string.Empty))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,13+1, death,string.Empty,string.Empty,"string","death");
	return;
}
if (!VaildUtil.TryConvert(values[i][14], out deathTime,int.MinValue,int.MaxValue))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,14+1, deathTime,int.MinValue,int.MaxValue,"int","deathTime");
	return;
}
if (!VaildUtil.TryConvert(values[i][15], out back,string.Empty,string.Empty))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,15+1, back,string.Empty,string.Empty,"string","back");
	return;
}
if (!VaildUtil.TryConvert(values[i][16], out backTime,int.MinValue,int.MaxValue))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,16+1, backTime,int.MinValue,int.MaxValue,"int","backTime");
	return;
}
if (!VaildUtil.TryConvert(values[i][17], out left,string.Empty,string.Empty))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,17+1, left,string.Empty,string.Empty,"string","left");
	return;
}
if (!VaildUtil.TryConvert(values[i][18], out leftTime,int.MinValue,int.MaxValue))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,18+1, leftTime,int.MinValue,int.MaxValue,"int","leftTime");
	return;
}
if (!VaildUtil.TryConvert(values[i][19], out right,string.Empty,string.Empty))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,19+1, right,string.Empty,string.Empty,"string","right");
	return;
}
if (!VaildUtil.TryConvert(values[i][20], out rightTime,int.MinValue,int.MaxValue))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,20+1, rightTime,int.MinValue,int.MaxValue,"int","rightTime");
	return;
}
if (!VaildUtil.TryConvert(values[i][21], out relaxIdle,string.Empty,string.Empty))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,21+1, relaxIdle,string.Empty,string.Empty,"string","relaxIdle");
	return;
}
if (!VaildUtil.TryConvert(values[i][22], out relaxIdleTime,int.MinValue,int.MaxValue))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,22+1, relaxIdleTime,int.MinValue,int.MaxValue,"int","relaxIdleTime");
	return;
}
if (!VaildUtil.TryConvert(values[i][23], out relaxWalk,string.Empty,string.Empty))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,23+1, relaxWalk,string.Empty,string.Empty,"string","relaxWalk");
	return;
}
if (!VaildUtil.TryConvert(values[i][24], out relaxWalkTime,int.MinValue,int.MaxValue))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,24+1, relaxWalkTime,int.MinValue,int.MaxValue,"int","relaxWalkTime");
	return;
}
if (!VaildUtil.TryConvert(values[i][25], out idleFire,string.Empty,string.Empty))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,25+1, idleFire,string.Empty,string.Empty,"string","idleFire");
	return;
}
if (!VaildUtil.TryConvert(values[i][26], out idleFireTime,int.MinValue,int.MaxValue))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,26+1, idleFireTime,int.MinValue,int.MaxValue,"int","idleFireTime");
	return;
}
                    
                    
                    OnAutoParasLine(sheetName,row,values[i],ref errMsg);
                    if (!string.IsNullOrEmpty(errMsg))
                    {
                        return;
                    }
                }
            }
        }
    }
}