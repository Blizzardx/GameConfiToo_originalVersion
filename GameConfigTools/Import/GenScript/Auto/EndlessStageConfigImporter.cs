/**
 * Autogenerated by script gen tool
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using GameConfigTools.Constant;
using GameConfigTools.Util;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml.Linq;
using Config;
using Config.Table;
using Thrift.Protocol;

namespace GameConfigTools.Import
{
    public partial class EndlessStageConfigImporter : AbstractExcelImporter
    {
		private int id;
		private int nameMessageId;
		private int descMessageId;
		private int activeLimitId;
		private int limitMessageId;
		private int difficultyDegree;
		private int startCurveId;
		private int endCurveId;
		private int cycleStartCurveId;
		private int cycleEndCurveId;
		private List<int> rewardMessageId;
		private string thumbnail;
		private List<int> scenceIds;
		private int sequenceNum;
		private int maxScore;
		private List<int> rewardItemIds;
    
        protected override void AutoParasTable(List<string[][]> sheetValues, ref string errMsg)
        {
            OnAutoParasBegin();

            if (sheetValues == null || sheetValues.Count == 0)
            {
                return;
            }
            
            string[] sheetNames = this.GetSheetNames();
            for (int sheetIndex = 0; sheetIndex < sheetValues.Count; sheetIndex++)
            {
                string sheetName = sheetNames[sheetIndex];
                string[][] values = sheetValues[sheetIndex];
                for (int i = 0; i < values.Length; i++)
                {
                    if (!this.IsLineNotNull(values[i]))
                    {
                        continue;
                    }
                    int row = i + 1;
                    int index = 0;

if (!VaildUtil.TryConvert(values[i][0], out id,int.MinValue,int.MaxValue))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,0+1, id,int.MinValue,int.MaxValue,"int","id");
	return;
}
if (!VaildUtil.TryConvert(values[i][1], out nameMessageId,int.MinValue,int.MaxValue))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,1+1, nameMessageId,int.MinValue,int.MaxValue,"int","nameMessageId");
	return;
}
if (!VaildUtil.TryConvert(values[i][2], out descMessageId,int.MinValue,int.MaxValue))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,2+1, descMessageId,int.MinValue,int.MaxValue,"int","descMessageId");
	return;
}
if (!VaildUtil.TryConvert(values[i][3], out activeLimitId,int.MinValue,int.MaxValue))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,3+1, activeLimitId,int.MinValue,int.MaxValue,"int","activeLimitId");
	return;
}
if (!VaildUtil.TryConvert(values[i][4], out limitMessageId,int.MinValue,int.MaxValue))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,4+1, limitMessageId,int.MinValue,int.MaxValue,"int","limitMessageId");
	return;
}
if (!VaildUtil.TryConvert(values[i][5], out difficultyDegree,int.MinValue,int.MaxValue))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,5+1, difficultyDegree,int.MinValue,int.MaxValue,"int","difficultyDegree");
	return;
}
if (!VaildUtil.TryConvert(values[i][6], out startCurveId,int.MinValue,int.MaxValue))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,6+1, startCurveId,int.MinValue,int.MaxValue,"int","startCurveId");
	return;
}
if (!VaildUtil.TryConvert(values[i][7], out endCurveId,int.MinValue,int.MaxValue))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,7+1, endCurveId,int.MinValue,int.MaxValue,"int","endCurveId");
	return;
}
if (!VaildUtil.TryConvert(values[i][8], out cycleStartCurveId,int.MinValue,int.MaxValue))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,8+1, cycleStartCurveId,int.MinValue,int.MaxValue,"int","cycleStartCurveId");
	return;
}
if (!VaildUtil.TryConvert(values[i][9], out cycleEndCurveId,int.MinValue,int.MaxValue))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,9+1, cycleEndCurveId,int.MinValue,int.MaxValue,"int","cycleEndCurveId");
	return;
}
 try
{
    rewardMessageId = VaildUtil.SplitToList_int(values[i][10]);
}
catch (Exception e)
{
    errMsg = string.Format("{4} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误 ", this.GetConfigName(), sheetName, row,10+1, "rewardMessageId");
    errMsg += " " + e.Message;
    return;
} 
if (!VaildUtil.TryConvert(values[i][11], out thumbnail,string.Empty,string.Empty))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,11+1, thumbnail,string.Empty,string.Empty,"string","thumbnail");
	return;
}
 try
{
    scenceIds = VaildUtil.SplitToList_int(values[i][12]);
}
catch (Exception e)
{
    errMsg = string.Format("{4} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误 ", this.GetConfigName(), sheetName, row,12+1, "scenceIds");
    errMsg += " " + e.Message;
    return;
} 
if (!VaildUtil.TryConvert(values[i][13], out sequenceNum,int.MinValue,int.MaxValue))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,13+1, sequenceNum,int.MinValue,int.MaxValue,"int","sequenceNum");
	return;
}
if (!VaildUtil.TryConvert(values[i][14], out maxScore,int.MinValue,int.MaxValue))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,14+1, maxScore,int.MinValue,int.MaxValue,"int","maxScore");
	return;
}
 try
{
    rewardItemIds = VaildUtil.SplitToList_int(values[i][15]);
}
catch (Exception e)
{
    errMsg = string.Format("{4} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误 ", this.GetConfigName(), sheetName, row,15+1, "rewardItemIds");
    errMsg += " " + e.Message;
    return;
} 
                    
                    
                    OnAutoParasLine(sheetName,row,values[i],ref errMsg);
                    if (!string.IsNullOrEmpty(errMsg))
                    {
                        return;
                    }
                }
            }
        }
    }
}