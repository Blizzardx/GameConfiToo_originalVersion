/**
 * Autogenerated by script gen tool
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using GameConfigTools.Constant;
using GameConfigTools.Util;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml.Linq;
using Config;
using Config.Table;
using Thrift.Protocol;

namespace GameConfigTools.Import
{
    public partial class WeaponConfigImporter : AbstractExcelImporter
    {
		private int id;
		private string name;
		private int decomposeId;
		private int nameMessageId;
		private int descMessageId;
		private int firstType;
		private int secondType;
		private string model;
		private string prefab;
		private string icon;
		private int quality;
		private string attachPoint;
		private List<int> textureList;
		private int activeConsumeId;
		private int sortId;
		private int showLimitId;
		private int showTipType;
		private int showEventType;
		private int activeEnterType;
		private int activeIconTip;
		private int activeTipType;
		private List<string> motionList;
    
        protected override void AutoParasTable(List<string[][]> sheetValues, ref string errMsg)
        {
            OnAutoParasBegin();

            if (sheetValues == null || sheetValues.Count == 0)
            {
                return;
            }
            
            string[] sheetNames = this.GetSheetNames();
            for (int sheetIndex = 0; sheetIndex < sheetValues.Count; sheetIndex++)
            {
                string sheetName = sheetNames[sheetIndex];
                string[][] values = sheetValues[sheetIndex];
                for (int i = 0; i < values.Length; i++)
                {
                    if (!this.IsLineNotNull(values[i]))
                    {
                        continue;
                    }
                    int row = i + 1;
                    int index = 0;

if (!VaildUtil.TryConvert(values[i][0], out id,int.MinValue,int.MaxValue))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,0+1, id,int.MinValue,int.MaxValue,"int","id");
	return;
}
if (!VaildUtil.TryConvert(values[i][1], out name,string.Empty,string.Empty))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,1+1, name,string.Empty,string.Empty,"string","name");
	return;
}
if (!VaildUtil.TryConvert(values[i][2], out decomposeId,int.MinValue,int.MaxValue))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,2+1, decomposeId,int.MinValue,int.MaxValue,"int","decomposeId");
	return;
}
if (!VaildUtil.TryConvert(values[i][3], out nameMessageId,int.MinValue,int.MaxValue))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,3+1, nameMessageId,int.MinValue,int.MaxValue,"int","nameMessageId");
	return;
}
if (!VaildUtil.TryConvert(values[i][4], out descMessageId,int.MinValue,int.MaxValue))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,4+1, descMessageId,int.MinValue,int.MaxValue,"int","descMessageId");
	return;
}
if (!VaildUtil.TryConvert(values[i][5], out firstType,1,3))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,5+1, firstType,1,3,"int","firstType");
	return;
}
if (!VaildUtil.TryConvert(values[i][6], out secondType,1,int.MaxValue))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,6+1, secondType,1,int.MaxValue,"int","secondType");
	return;
}
if (!VaildUtil.TryConvert(values[i][7], out model,string.Empty,string.Empty))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,7+1, model,string.Empty,string.Empty,"string","model");
	return;
}
if (!VaildUtil.TryConvert(values[i][8], out prefab,string.Empty,string.Empty))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,8+1, prefab,string.Empty,string.Empty,"string","prefab");
	return;
}
if (!VaildUtil.TryConvert(values[i][9], out icon,string.Empty,string.Empty))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,9+1, icon,string.Empty,string.Empty,"string","icon");
	return;
}
if (!VaildUtil.TryConvert(values[i][10], out quality,int.MinValue,int.MaxValue))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,10+1, quality,int.MinValue,int.MaxValue,"int","quality");
	return;
}
if (!VaildUtil.TryConvert(values[i][11], out attachPoint,string.Empty,string.Empty))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,11+1, attachPoint,string.Empty,string.Empty,"string","attachPoint");
	return;
}
 try
{
    textureList = VaildUtil.SplitToList_int(values[i][12]);
}
catch (Exception e)
{
    errMsg = string.Format("{4} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误 ", this.GetConfigName(), sheetName, row,12+1, "textureList");
    errMsg += " " + e.Message;
    return;
}    if (!VaildUtil.TryConvert(values[i][13], out activeConsumeId,int.MinValue,int.MaxValue))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,13+1, activeConsumeId,int.MinValue,int.MaxValue,"int","activeConsumeId");
	return;
}
if (!VaildUtil.TryConvert(values[i][14], out sortId,int.MinValue,int.MaxValue))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,14+1, sortId,int.MinValue,int.MaxValue,"int","sortId");
	return;
}
if (!VaildUtil.TryConvert(values[i][15], out showLimitId,int.MinValue,int.MaxValue))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,15+1, showLimitId,int.MinValue,int.MaxValue,"int","showLimitId");
	return;
}
if (!VaildUtil.TryConvert(values[i][16], out showTipType,1,3))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,16+1, showTipType,1,3,"int","showTipType");
	return;
}
if (!VaildUtil.TryConvert(values[i][17], out showEventType,int.MinValue,int.MaxValue))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,17+1, showEventType,int.MinValue,int.MaxValue,"int","showEventType");
	return;
}
if (!VaildUtil.TryConvert(values[i][18], out activeEnterType,1,3))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,18+1, activeEnterType,1,3,"int","activeEnterType");
	return;
}
if (!VaildUtil.TryConvert(values[i][19], out activeIconTip,int.MinValue,int.MaxValue))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,19+1, activeIconTip,int.MinValue,int.MaxValue,"int","activeIconTip");
	return;
}
if (!VaildUtil.TryConvert(values[i][20], out activeTipType,1,3))
{
	errMsg = string.Format("{8} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误，{4}必须为{5} - {6} {7}型", this.GetConfigName(), sheetName, row,20+1, activeTipType,1,3,"int","activeTipType");
	return;
}
 try
{
    motionList = VaildUtil.SplitToList_string(values[i][21]);
}
catch (Exception e)
{
    errMsg = string.Format("{4} {0}.xlsx sheet:[{1}] [{2},{3}]读取出现错误 ", this.GetConfigName(), sheetName, row,21+1, "motionList");
    errMsg += " " + e.Message;
    return;
}                        
                    
                    OnAutoParasLine(sheetName,row,values[i],ref errMsg);
                    if (!string.IsNullOrEmpty(errMsg))
                    {
                        return;
                    }
                }
            }
        }
    }
}