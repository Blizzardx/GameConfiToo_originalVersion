/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.kaixin001.hero.client.upload.tools.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TesetCompose implements org.apache.thrift.TBase<TesetCompose, TesetCompose._Fields>, java.io.Serializable, Cloneable, Comparable<TesetCompose> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TesetCompose");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField DOUBLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("doubleId", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField STRING_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("stringId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField BOOL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("boolId", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField BYTE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("byteId", org.apache.thrift.protocol.TType.BYTE, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TesetComposeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TesetComposeTupleSchemeFactory());
  }

  public int id; // required
  public double doubleId; // required
  public String stringId; // required
  public boolean boolId; // required
  public byte byteId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    DOUBLE_ID((short)2, "doubleId"),
    STRING_ID((short)3, "stringId"),
    BOOL_ID((short)4, "boolId"),
    BYTE_ID((short)5, "byteId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // DOUBLE_ID
          return DOUBLE_ID;
        case 3: // STRING_ID
          return STRING_ID;
        case 4: // BOOL_ID
          return BOOL_ID;
        case 5: // BYTE_ID
          return BYTE_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __DOUBLEID_ISSET_ID = 1;
  private static final int __BOOLID_ISSET_ID = 2;
  private static final int __BYTEID_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DOUBLE_ID, new org.apache.thrift.meta_data.FieldMetaData("doubleId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STRING_ID, new org.apache.thrift.meta_data.FieldMetaData("stringId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BOOL_ID, new org.apache.thrift.meta_data.FieldMetaData("boolId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BYTE_ID, new org.apache.thrift.meta_data.FieldMetaData("byteId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TesetCompose.class, metaDataMap);
  }

  public TesetCompose() {
  }

  public TesetCompose(
    int id,
    double doubleId,
    String stringId,
    boolean boolId,
    byte byteId)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.doubleId = doubleId;
    setDoubleIdIsSet(true);
    this.stringId = stringId;
    this.boolId = boolId;
    setBoolIdIsSet(true);
    this.byteId = byteId;
    setByteIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TesetCompose(TesetCompose other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.doubleId = other.doubleId;
    if (other.isSetStringId()) {
      this.stringId = other.stringId;
    }
    this.boolId = other.boolId;
    this.byteId = other.byteId;
  }

  public TesetCompose deepCopy() {
    return new TesetCompose(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setDoubleIdIsSet(false);
    this.doubleId = 0.0;
    this.stringId = null;
    setBoolIdIsSet(false);
    this.boolId = false;
    setByteIdIsSet(false);
    this.byteId = 0;
  }

  public int getId() {
    return this.id;
  }

  public TesetCompose setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public double getDoubleId() {
    return this.doubleId;
  }

  public TesetCompose setDoubleId(double doubleId) {
    this.doubleId = doubleId;
    setDoubleIdIsSet(true);
    return this;
  }

  public void unsetDoubleId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DOUBLEID_ISSET_ID);
  }

  /** Returns true if field doubleId is set (has been assigned a value) and false otherwise */
  public boolean isSetDoubleId() {
    return EncodingUtils.testBit(__isset_bitfield, __DOUBLEID_ISSET_ID);
  }

  public void setDoubleIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DOUBLEID_ISSET_ID, value);
  }

  public String getStringId() {
    return this.stringId;
  }

  public TesetCompose setStringId(String stringId) {
    this.stringId = stringId;
    return this;
  }

  public void unsetStringId() {
    this.stringId = null;
  }

  /** Returns true if field stringId is set (has been assigned a value) and false otherwise */
  public boolean isSetStringId() {
    return this.stringId != null;
  }

  public void setStringIdIsSet(boolean value) {
    if (!value) {
      this.stringId = null;
    }
  }

  public boolean isBoolId() {
    return this.boolId;
  }

  public TesetCompose setBoolId(boolean boolId) {
    this.boolId = boolId;
    setBoolIdIsSet(true);
    return this;
  }

  public void unsetBoolId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BOOLID_ISSET_ID);
  }

  /** Returns true if field boolId is set (has been assigned a value) and false otherwise */
  public boolean isSetBoolId() {
    return EncodingUtils.testBit(__isset_bitfield, __BOOLID_ISSET_ID);
  }

  public void setBoolIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BOOLID_ISSET_ID, value);
  }

  public byte getByteId() {
    return this.byteId;
  }

  public TesetCompose setByteId(byte byteId) {
    this.byteId = byteId;
    setByteIdIsSet(true);
    return this;
  }

  public void unsetByteId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BYTEID_ISSET_ID);
  }

  /** Returns true if field byteId is set (has been assigned a value) and false otherwise */
  public boolean isSetByteId() {
    return EncodingUtils.testBit(__isset_bitfield, __BYTEID_ISSET_ID);
  }

  public void setByteIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BYTEID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case DOUBLE_ID:
      if (value == null) {
        unsetDoubleId();
      } else {
        setDoubleId((Double)value);
      }
      break;

    case STRING_ID:
      if (value == null) {
        unsetStringId();
      } else {
        setStringId((String)value);
      }
      break;

    case BOOL_ID:
      if (value == null) {
        unsetBoolId();
      } else {
        setBoolId((Boolean)value);
      }
      break;

    case BYTE_ID:
      if (value == null) {
        unsetByteId();
      } else {
        setByteId((Byte)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case DOUBLE_ID:
      return Double.valueOf(getDoubleId());

    case STRING_ID:
      return getStringId();

    case BOOL_ID:
      return Boolean.valueOf(isBoolId());

    case BYTE_ID:
      return Byte.valueOf(getByteId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case DOUBLE_ID:
      return isSetDoubleId();
    case STRING_ID:
      return isSetStringId();
    case BOOL_ID:
      return isSetBoolId();
    case BYTE_ID:
      return isSetByteId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TesetCompose)
      return this.equals((TesetCompose)that);
    return false;
  }

  public boolean equals(TesetCompose that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_doubleId = true;
    boolean that_present_doubleId = true;
    if (this_present_doubleId || that_present_doubleId) {
      if (!(this_present_doubleId && that_present_doubleId))
        return false;
      if (this.doubleId != that.doubleId)
        return false;
    }

    boolean this_present_stringId = true && this.isSetStringId();
    boolean that_present_stringId = true && that.isSetStringId();
    if (this_present_stringId || that_present_stringId) {
      if (!(this_present_stringId && that_present_stringId))
        return false;
      if (!this.stringId.equals(that.stringId))
        return false;
    }

    boolean this_present_boolId = true;
    boolean that_present_boolId = true;
    if (this_present_boolId || that_present_boolId) {
      if (!(this_present_boolId && that_present_boolId))
        return false;
      if (this.boolId != that.boolId)
        return false;
    }

    boolean this_present_byteId = true;
    boolean that_present_byteId = true;
    if (this_present_byteId || that_present_byteId) {
      if (!(this_present_byteId && that_present_byteId))
        return false;
      if (this.byteId != that.byteId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TesetCompose other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDoubleId()).compareTo(other.isSetDoubleId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoubleId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doubleId, other.doubleId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStringId()).compareTo(other.isSetStringId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStringId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringId, other.stringId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBoolId()).compareTo(other.isSetBoolId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoolId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.boolId, other.boolId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetByteId()).compareTo(other.isSetByteId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetByteId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.byteId, other.byteId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TesetCompose(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("doubleId:");
    sb.append(this.doubleId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("stringId:");
    if (this.stringId == null) {
      sb.append("null");
    } else {
      sb.append(this.stringId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("boolId:");
    sb.append(this.boolId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("byteId:");
    sb.append(this.byteId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TesetComposeStandardSchemeFactory implements SchemeFactory {
    public TesetComposeStandardScheme getScheme() {
      return new TesetComposeStandardScheme();
    }
  }

  private static class TesetComposeStandardScheme extends StandardScheme<TesetCompose> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TesetCompose struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DOUBLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.doubleId = iprot.readDouble();
              struct.setDoubleIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STRING_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stringId = iprot.readString();
              struct.setStringIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BOOL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.boolId = iprot.readBool();
              struct.setBoolIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BYTE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.byteId = iprot.readByte();
              struct.setByteIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TesetCompose struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DOUBLE_ID_FIELD_DESC);
      oprot.writeDouble(struct.doubleId);
      oprot.writeFieldEnd();
      if (struct.stringId != null) {
        oprot.writeFieldBegin(STRING_ID_FIELD_DESC);
        oprot.writeString(struct.stringId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BOOL_ID_FIELD_DESC);
      oprot.writeBool(struct.boolId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BYTE_ID_FIELD_DESC);
      oprot.writeByte(struct.byteId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TesetComposeTupleSchemeFactory implements SchemeFactory {
    public TesetComposeTupleScheme getScheme() {
      return new TesetComposeTupleScheme();
    }
  }

  private static class TesetComposeTupleScheme extends TupleScheme<TesetCompose> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TesetCompose struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetDoubleId()) {
        optionals.set(1);
      }
      if (struct.isSetStringId()) {
        optionals.set(2);
      }
      if (struct.isSetBoolId()) {
        optionals.set(3);
      }
      if (struct.isSetByteId()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetDoubleId()) {
        oprot.writeDouble(struct.doubleId);
      }
      if (struct.isSetStringId()) {
        oprot.writeString(struct.stringId);
      }
      if (struct.isSetBoolId()) {
        oprot.writeBool(struct.boolId);
      }
      if (struct.isSetByteId()) {
        oprot.writeByte(struct.byteId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TesetCompose struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.doubleId = iprot.readDouble();
        struct.setDoubleIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.stringId = iprot.readString();
        struct.setStringIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.boolId = iprot.readBool();
        struct.setBoolIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.byteId = iprot.readByte();
        struct.setByteIdIsSet(true);
      }
    }
  }

}

