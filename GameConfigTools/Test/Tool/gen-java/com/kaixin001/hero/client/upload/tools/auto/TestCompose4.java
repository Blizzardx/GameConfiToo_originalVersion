/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.kaixin001.hero.client.upload.tools.auto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TestCompose4 implements org.apache.thrift.TBase<TestCompose4, TestCompose4._Fields>, java.io.Serializable, Cloneable, Comparable<TestCompose4> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TestCompose4");

  private static final org.apache.thrift.protocol.TField TMP_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("tmpMap", org.apache.thrift.protocol.TType.MAP, (short)1);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TestCompose4StandardSchemeFactory());
    schemes.put(TupleScheme.class, new TestCompose4TupleSchemeFactory());
  }

  public Map<Integer,TestCompose3> tmpMap; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TMP_MAP((short)1, "tmpMap");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TMP_MAP
          return TMP_MAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TMP_MAP, new org.apache.thrift.meta_data.FieldMetaData("tmpMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TestCompose3.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TestCompose4.class, metaDataMap);
  }

  public TestCompose4() {
  }

  public TestCompose4(
    Map<Integer,TestCompose3> tmpMap)
  {
    this();
    this.tmpMap = tmpMap;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TestCompose4(TestCompose4 other) {
    if (other.isSetTmpMap()) {
      Map<Integer,TestCompose3> __this__tmpMap = new HashMap<Integer,TestCompose3>(other.tmpMap.size());
      for (Map.Entry<Integer, TestCompose3> other_element : other.tmpMap.entrySet()) {

        Integer other_element_key = other_element.getKey();
        TestCompose3 other_element_value = other_element.getValue();

        Integer __this__tmpMap_copy_key = other_element_key;

        TestCompose3 __this__tmpMap_copy_value = new TestCompose3(other_element_value);

        __this__tmpMap.put(__this__tmpMap_copy_key, __this__tmpMap_copy_value);
      }
      this.tmpMap = __this__tmpMap;
    }
  }

  public TestCompose4 deepCopy() {
    return new TestCompose4(this);
  }

  @Override
  public void clear() {
    this.tmpMap = null;
  }

  public int getTmpMapSize() {
    return (this.tmpMap == null) ? 0 : this.tmpMap.size();
  }

  public void putToTmpMap(int key, TestCompose3 val) {
    if (this.tmpMap == null) {
      this.tmpMap = new HashMap<Integer,TestCompose3>();
    }
    this.tmpMap.put(key, val);
  }

  public Map<Integer,TestCompose3> getTmpMap() {
    return this.tmpMap;
  }

  public TestCompose4 setTmpMap(Map<Integer,TestCompose3> tmpMap) {
    this.tmpMap = tmpMap;
    return this;
  }

  public void unsetTmpMap() {
    this.tmpMap = null;
  }

  /** Returns true if field tmpMap is set (has been assigned a value) and false otherwise */
  public boolean isSetTmpMap() {
    return this.tmpMap != null;
  }

  public void setTmpMapIsSet(boolean value) {
    if (!value) {
      this.tmpMap = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TMP_MAP:
      if (value == null) {
        unsetTmpMap();
      } else {
        setTmpMap((Map<Integer,TestCompose3>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TMP_MAP:
      return getTmpMap();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TMP_MAP:
      return isSetTmpMap();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TestCompose4)
      return this.equals((TestCompose4)that);
    return false;
  }

  public boolean equals(TestCompose4 that) {
    if (that == null)
      return false;

    boolean this_present_tmpMap = true && this.isSetTmpMap();
    boolean that_present_tmpMap = true && that.isSetTmpMap();
    if (this_present_tmpMap || that_present_tmpMap) {
      if (!(this_present_tmpMap && that_present_tmpMap))
        return false;
      if (!this.tmpMap.equals(that.tmpMap))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TestCompose4 other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTmpMap()).compareTo(other.isSetTmpMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTmpMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tmpMap, other.tmpMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TestCompose4(");
    boolean first = true;

    sb.append("tmpMap:");
    if (this.tmpMap == null) {
      sb.append("null");
    } else {
      sb.append(this.tmpMap);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TestCompose4StandardSchemeFactory implements SchemeFactory {
    public TestCompose4StandardScheme getScheme() {
      return new TestCompose4StandardScheme();
    }
  }

  private static class TestCompose4StandardScheme extends StandardScheme<TestCompose4> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TestCompose4 struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TMP_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map26 = iprot.readMapBegin();
                struct.tmpMap = new HashMap<Integer,TestCompose3>(2*_map26.size);
                for (int _i27 = 0; _i27 < _map26.size; ++_i27)
                {
                  int _key28;
                  TestCompose3 _val29;
                  _key28 = iprot.readI32();
                  _val29 = new TestCompose3();
                  _val29.read(iprot);
                  struct.tmpMap.put(_key28, _val29);
                }
                iprot.readMapEnd();
              }
              struct.setTmpMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TestCompose4 struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tmpMap != null) {
        oprot.writeFieldBegin(TMP_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, struct.tmpMap.size()));
          for (Map.Entry<Integer, TestCompose3> _iter30 : struct.tmpMap.entrySet())
          {
            oprot.writeI32(_iter30.getKey());
            _iter30.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TestCompose4TupleSchemeFactory implements SchemeFactory {
    public TestCompose4TupleScheme getScheme() {
      return new TestCompose4TupleScheme();
    }
  }

  private static class TestCompose4TupleScheme extends TupleScheme<TestCompose4> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TestCompose4 struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTmpMap()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetTmpMap()) {
        {
          oprot.writeI32(struct.tmpMap.size());
          for (Map.Entry<Integer, TestCompose3> _iter31 : struct.tmpMap.entrySet())
          {
            oprot.writeI32(_iter31.getKey());
            _iter31.getValue().write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TestCompose4 struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map32 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.tmpMap = new HashMap<Integer,TestCompose3>(2*_map32.size);
          for (int _i33 = 0; _i33 < _map32.size; ++_i33)
          {
            int _key34;
            TestCompose3 _val35;
            _key34 = iprot.readI32();
            _val35 = new TestCompose3();
            _val35.read(iprot);
            struct.tmpMap.put(_key34, _val35);
          }
        }
        struct.setTmpMapIsSet(true);
      }
    }
  }

}

