/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Config
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Listmap : TBase
  {
    private List<Dictionary<int, int>> _tmpList;

    public List<Dictionary<int, int>> TmpList
    {
      get
      {
        return _tmpList;
      }
      set
      {
        __isset.tmpList = true;
        this._tmpList = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool tmpList;
    }

    public Listmap() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                TmpList = new List<Dictionary<int, int>>();
                TList _list26 = iprot.ReadListBegin();
                for( int _i27 = 0; _i27 < _list26.Count; ++_i27)
                {
                  Dictionary<int, int> _elem28 = new Dictionary<int, int>();
                  {
                    _elem28 = new Dictionary<int, int>();
                    TMap _map29 = iprot.ReadMapBegin();
                    for( int _i30 = 0; _i30 < _map29.Count; ++_i30)
                    {
                      int _key31;
                      int _val32;
                      _key31 = iprot.ReadI32();
                      _val32 = iprot.ReadI32();
                      _elem28[_key31] = _val32;
                    }
                    iprot.ReadMapEnd();
                  }
                  TmpList.Add(_elem28);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Listmap");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (TmpList != null && __isset.tmpList) {
        field.Name = "tmpList";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Map, TmpList.Count));
          foreach (Dictionary<int, int> _iter33 in TmpList)
          {
            {
              oprot.WriteMapBegin(new TMap(TType.I32, TType.I32, _iter33.Count));
              foreach (int _iter34 in _iter33.Keys)
              {
                oprot.WriteI32(_iter34);
                oprot.WriteI32(_iter33[_iter34]);
              }
              oprot.WriteMapEnd();
            }
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Listmap(");
      sb.Append("TmpList: ");
      sb.Append(TmpList);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
