/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Config
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Listset : TBase
  {
    private List<THashSet<int>> _tmpList;

    public List<THashSet<int>> TmpList
    {
      get
      {
        return _tmpList;
      }
      set
      {
        __isset.tmpList = true;
        this._tmpList = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool tmpList;
    }

    public Listset() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                TmpList = new List<THashSet<int>>();
                TList _list35 = iprot.ReadListBegin();
                for( int _i36 = 0; _i36 < _list35.Count; ++_i36)
                {
                  THashSet<int> _elem37 = new THashSet<int>();
                  {
                    _elem37 = new THashSet<int>();
                    TSet _set38 = iprot.ReadSetBegin();
                    for( int _i39 = 0; _i39 < _set38.Count; ++_i39)
                    {
                      int _elem40 = 0;
                      _elem40 = iprot.ReadI32();
                      _elem37.Add(_elem40);
                    }
                    iprot.ReadSetEnd();
                  }
                  TmpList.Add(_elem37);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Listset");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (TmpList != null && __isset.tmpList) {
        field.Name = "tmpList";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Set, TmpList.Count));
          foreach (THashSet<int> _iter41 in TmpList)
          {
            {
              oprot.WriteSetBegin(new TSet(TType.I32, _iter41.Count));
              foreach (int _iter42 in _iter41)
              {
                oprot.WriteI32(_iter42);
              }
              oprot.WriteSetEnd();
            }
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Listset(");
      sb.Append("TmpList: ");
      sb.Append(TmpList);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
