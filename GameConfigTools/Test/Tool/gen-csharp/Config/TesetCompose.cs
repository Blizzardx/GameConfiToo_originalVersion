/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Config
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TesetCompose : TBase
  {
    private int _id;
    private double _doubleId;
    private string _stringId;
    private bool _boolId;
    private sbyte _byteId;

    public int Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public double DoubleId
    {
      get
      {
        return _doubleId;
      }
      set
      {
        __isset.doubleId = true;
        this._doubleId = value;
      }
    }

    public string StringId
    {
      get
      {
        return _stringId;
      }
      set
      {
        __isset.stringId = true;
        this._stringId = value;
      }
    }

    public bool BoolId
    {
      get
      {
        return _boolId;
      }
      set
      {
        __isset.boolId = true;
        this._boolId = value;
      }
    }

    public sbyte ByteId
    {
      get
      {
        return _byteId;
      }
      set
      {
        __isset.byteId = true;
        this._byteId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool doubleId;
      public bool stringId;
      public bool boolId;
      public bool byteId;
    }

    public TesetCompose() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Double) {
              DoubleId = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              StringId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Bool) {
              BoolId = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Byte) {
              ByteId = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("TesetCompose");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.id) {
        field.Name = "id";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Id);
        oprot.WriteFieldEnd();
      }
      if (__isset.doubleId) {
        field.Name = "doubleId";
        field.Type = TType.Double;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(DoubleId);
        oprot.WriteFieldEnd();
      }
      if (StringId != null && __isset.stringId) {
        field.Name = "stringId";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(StringId);
        oprot.WriteFieldEnd();
      }
      if (__isset.boolId) {
        field.Name = "boolId";
        field.Type = TType.Bool;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(BoolId);
        oprot.WriteFieldEnd();
      }
      if (__isset.byteId) {
        field.Name = "byteId";
        field.Type = TType.Byte;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(ByteId);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("TesetCompose(");
      sb.Append("Id: ");
      sb.Append(Id);
      sb.Append(",DoubleId: ");
      sb.Append(DoubleId);
      sb.Append(",StringId: ");
      sb.Append(StringId);
      sb.Append(",BoolId: ");
      sb.Append(BoolId);
      sb.Append(",ByteId: ");
      sb.Append(ByteId);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
