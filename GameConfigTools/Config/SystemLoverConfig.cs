/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Config
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SystemLoverConfig : TBase
  {
    private List<SystemLoverExpStepInfo> _expStepInfoList;
    private int _maxLoverExp;
    private int _battleAddLoverExpCycleId;
    private int _battleAddLoverExpCounterId;
    private int _findLoverIB;

    public List<SystemLoverExpStepInfo> ExpStepInfoList
    {
      get
      {
        return _expStepInfoList;
      }
      set
      {
        __isset.expStepInfoList = true;
        this._expStepInfoList = value;
      }
    }

    public int MaxLoverExp
    {
      get
      {
        return _maxLoverExp;
      }
      set
      {
        __isset.maxLoverExp = true;
        this._maxLoverExp = value;
      }
    }

    public int BattleAddLoverExpCycleId
    {
      get
      {
        return _battleAddLoverExpCycleId;
      }
      set
      {
        __isset.battleAddLoverExpCycleId = true;
        this._battleAddLoverExpCycleId = value;
      }
    }

    public int BattleAddLoverExpCounterId
    {
      get
      {
        return _battleAddLoverExpCounterId;
      }
      set
      {
        __isset.battleAddLoverExpCounterId = true;
        this._battleAddLoverExpCounterId = value;
      }
    }

    public int FindLoverIB
    {
      get
      {
        return _findLoverIB;
      }
      set
      {
        __isset.findLoverIB = true;
        this._findLoverIB = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool expStepInfoList;
      public bool maxLoverExp;
      public bool battleAddLoverExpCycleId;
      public bool battleAddLoverExpCounterId;
      public bool findLoverIB;
    }

    public SystemLoverConfig() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 10:
            if (field.Type == TType.List) {
              {
                ExpStepInfoList = new List<SystemLoverExpStepInfo>();
                TList _list25 = iprot.ReadListBegin();
                for( int _i26 = 0; _i26 < _list25.Count; ++_i26)
                {
                  SystemLoverExpStepInfo _elem27 = new SystemLoverExpStepInfo();
                  _elem27 = new SystemLoverExpStepInfo();
                  _elem27.Read(iprot);
                  ExpStepInfoList.Add(_elem27);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.I32) {
              MaxLoverExp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.I32) {
              BattleAddLoverExpCycleId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 40:
            if (field.Type == TType.I32) {
              BattleAddLoverExpCounterId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 50:
            if (field.Type == TType.I32) {
              FindLoverIB = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("SystemLoverConfig");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (ExpStepInfoList != null && __isset.expStepInfoList) {
        field.Name = "expStepInfoList";
        field.Type = TType.List;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, ExpStepInfoList.Count));
          foreach (SystemLoverExpStepInfo _iter28 in ExpStepInfoList)
          {
            _iter28.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.maxLoverExp) {
        field.Name = "maxLoverExp";
        field.Type = TType.I32;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MaxLoverExp);
        oprot.WriteFieldEnd();
      }
      if (__isset.battleAddLoverExpCycleId) {
        field.Name = "battleAddLoverExpCycleId";
        field.Type = TType.I32;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(BattleAddLoverExpCycleId);
        oprot.WriteFieldEnd();
      }
      if (__isset.battleAddLoverExpCounterId) {
        field.Name = "battleAddLoverExpCounterId";
        field.Type = TType.I32;
        field.ID = 40;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(BattleAddLoverExpCounterId);
        oprot.WriteFieldEnd();
      }
      if (__isset.findLoverIB) {
        field.Name = "findLoverIB";
        field.Type = TType.I32;
        field.ID = 50;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(FindLoverIB);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("SystemLoverConfig(");
      sb.Append("ExpStepInfoList: ");
      sb.Append(ExpStepInfoList);
      sb.Append(",MaxLoverExp: ");
      sb.Append(MaxLoverExp);
      sb.Append(",BattleAddLoverExpCycleId: ");
      sb.Append(BattleAddLoverExpCycleId);
      sb.Append(",BattleAddLoverExpCounterId: ");
      sb.Append(BattleAddLoverExpCounterId);
      sb.Append(",FindLoverIB: ");
      sb.Append(FindLoverIB);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
