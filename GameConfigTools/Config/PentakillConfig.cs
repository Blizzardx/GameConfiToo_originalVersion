/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Config
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class PentakillConfig : TBase
  {
    private int _killCount;
    private string _killEffect;
    private int _killAddition;
    private int _bekilledAddition;
    private int _killRadio;
    private int _bekilledRadio;

    public int KillCount
    {
      get
      {
        return _killCount;
      }
      set
      {
        __isset.killCount = true;
        this._killCount = value;
      }
    }

    public string KillEffect
    {
      get
      {
        return _killEffect;
      }
      set
      {
        __isset.killEffect = true;
        this._killEffect = value;
      }
    }

    public int KillAddition
    {
      get
      {
        return _killAddition;
      }
      set
      {
        __isset.killAddition = true;
        this._killAddition = value;
      }
    }

    public int BekilledAddition
    {
      get
      {
        return _bekilledAddition;
      }
      set
      {
        __isset.bekilledAddition = true;
        this._bekilledAddition = value;
      }
    }

    public int KillRadio
    {
      get
      {
        return _killRadio;
      }
      set
      {
        __isset.killRadio = true;
        this._killRadio = value;
      }
    }

    public int BekilledRadio
    {
      get
      {
        return _bekilledRadio;
      }
      set
      {
        __isset.bekilledRadio = true;
        this._bekilledRadio = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool killCount;
      public bool killEffect;
      public bool killAddition;
      public bool bekilledAddition;
      public bool killRadio;
      public bool bekilledRadio;
    }

    public PentakillConfig() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 10:
            if (field.Type == TType.I32) {
              KillCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.String) {
              KillEffect = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.I32) {
              KillAddition = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 40:
            if (field.Type == TType.I32) {
              BekilledAddition = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 50:
            if (field.Type == TType.I32) {
              KillRadio = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 60:
            if (field.Type == TType.I32) {
              BekilledRadio = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("PentakillConfig");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.killCount) {
        field.Name = "killCount";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(KillCount);
        oprot.WriteFieldEnd();
      }
      if (KillEffect != null && __isset.killEffect) {
        field.Name = "killEffect";
        field.Type = TType.String;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(KillEffect);
        oprot.WriteFieldEnd();
      }
      if (__isset.killAddition) {
        field.Name = "killAddition";
        field.Type = TType.I32;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(KillAddition);
        oprot.WriteFieldEnd();
      }
      if (__isset.bekilledAddition) {
        field.Name = "bekilledAddition";
        field.Type = TType.I32;
        field.ID = 40;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(BekilledAddition);
        oprot.WriteFieldEnd();
      }
      if (__isset.killRadio) {
        field.Name = "killRadio";
        field.Type = TType.I32;
        field.ID = 50;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(KillRadio);
        oprot.WriteFieldEnd();
      }
      if (__isset.bekilledRadio) {
        field.Name = "bekilledRadio";
        field.Type = TType.I32;
        field.ID = 60;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(BekilledRadio);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("PentakillConfig(");
      sb.Append("KillCount: ");
      sb.Append(KillCount);
      sb.Append(",KillEffect: ");
      sb.Append(KillEffect);
      sb.Append(",KillAddition: ");
      sb.Append(KillAddition);
      sb.Append(",BekilledAddition: ");
      sb.Append(BekilledAddition);
      sb.Append(",KillRadio: ");
      sb.Append(KillRadio);
      sb.Append(",BekilledRadio: ");
      sb.Append(BekilledRadio);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
