/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Config
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SkillExConfig : TBase
  {
    private int _skillId;
    private sbyte _quality;
    private short _level;
    private bool _beginCD;
    private int _initCD;
    private int _addCD;
    private int _preLimitId;
    private int _preFuncId;
    private int _targetId;
    private int _limitId;
    private int _funcId;
    private int _takeOffFuncId;

    public int SkillId
    {
      get
      {
        return _skillId;
      }
      set
      {
        __isset.skillId = true;
        this._skillId = value;
      }
    }

    public sbyte Quality
    {
      get
      {
        return _quality;
      }
      set
      {
        __isset.quality = true;
        this._quality = value;
      }
    }

    public short Level
    {
      get
      {
        return _level;
      }
      set
      {
        __isset.level = true;
        this._level = value;
      }
    }

    public bool BeginCD
    {
      get
      {
        return _beginCD;
      }
      set
      {
        __isset.beginCD = true;
        this._beginCD = value;
      }
    }

    public int InitCD
    {
      get
      {
        return _initCD;
      }
      set
      {
        __isset.initCD = true;
        this._initCD = value;
      }
    }

    public int AddCD
    {
      get
      {
        return _addCD;
      }
      set
      {
        __isset.addCD = true;
        this._addCD = value;
      }
    }

    public int PreLimitId
    {
      get
      {
        return _preLimitId;
      }
      set
      {
        __isset.preLimitId = true;
        this._preLimitId = value;
      }
    }

    public int PreFuncId
    {
      get
      {
        return _preFuncId;
      }
      set
      {
        __isset.preFuncId = true;
        this._preFuncId = value;
      }
    }

    public int TargetId
    {
      get
      {
        return _targetId;
      }
      set
      {
        __isset.targetId = true;
        this._targetId = value;
      }
    }

    public int LimitId
    {
      get
      {
        return _limitId;
      }
      set
      {
        __isset.limitId = true;
        this._limitId = value;
      }
    }

    public int FuncId
    {
      get
      {
        return _funcId;
      }
      set
      {
        __isset.funcId = true;
        this._funcId = value;
      }
    }

    public int TakeOffFuncId
    {
      get
      {
        return _takeOffFuncId;
      }
      set
      {
        __isset.takeOffFuncId = true;
        this._takeOffFuncId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool skillId;
      public bool quality;
      public bool level;
      public bool beginCD;
      public bool initCD;
      public bool addCD;
      public bool preLimitId;
      public bool preFuncId;
      public bool targetId;
      public bool limitId;
      public bool funcId;
      public bool takeOffFuncId;
    }

    public SkillExConfig() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 10:
            if (field.Type == TType.I32) {
              SkillId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.Byte) {
              Quality = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.I16) {
              Level = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 40:
            if (field.Type == TType.Bool) {
              BeginCD = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 50:
            if (field.Type == TType.I32) {
              InitCD = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 60:
            if (field.Type == TType.I32) {
              AddCD = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 70:
            if (field.Type == TType.I32) {
              PreLimitId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 71:
            if (field.Type == TType.I32) {
              PreFuncId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 80:
            if (field.Type == TType.I32) {
              TargetId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 90:
            if (field.Type == TType.I32) {
              LimitId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 100:
            if (field.Type == TType.I32) {
              FuncId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 110:
            if (field.Type == TType.I32) {
              TakeOffFuncId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("SkillExConfig");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.skillId) {
        field.Name = "skillId";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SkillId);
        oprot.WriteFieldEnd();
      }
      if (__isset.quality) {
        field.Name = "quality";
        field.Type = TType.Byte;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Quality);
        oprot.WriteFieldEnd();
      }
      if (__isset.level) {
        field.Name = "level";
        field.Type = TType.I16;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(Level);
        oprot.WriteFieldEnd();
      }
      if (__isset.beginCD) {
        field.Name = "beginCD";
        field.Type = TType.Bool;
        field.ID = 40;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(BeginCD);
        oprot.WriteFieldEnd();
      }
      if (__isset.initCD) {
        field.Name = "initCD";
        field.Type = TType.I32;
        field.ID = 50;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(InitCD);
        oprot.WriteFieldEnd();
      }
      if (__isset.addCD) {
        field.Name = "addCD";
        field.Type = TType.I32;
        field.ID = 60;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(AddCD);
        oprot.WriteFieldEnd();
      }
      if (__isset.preLimitId) {
        field.Name = "preLimitId";
        field.Type = TType.I32;
        field.ID = 70;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PreLimitId);
        oprot.WriteFieldEnd();
      }
      if (__isset.preFuncId) {
        field.Name = "preFuncId";
        field.Type = TType.I32;
        field.ID = 71;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PreFuncId);
        oprot.WriteFieldEnd();
      }
      if (__isset.targetId) {
        field.Name = "targetId";
        field.Type = TType.I32;
        field.ID = 80;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TargetId);
        oprot.WriteFieldEnd();
      }
      if (__isset.limitId) {
        field.Name = "limitId";
        field.Type = TType.I32;
        field.ID = 90;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(LimitId);
        oprot.WriteFieldEnd();
      }
      if (__isset.funcId) {
        field.Name = "funcId";
        field.Type = TType.I32;
        field.ID = 100;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(FuncId);
        oprot.WriteFieldEnd();
      }
      if (__isset.takeOffFuncId) {
        field.Name = "takeOffFuncId";
        field.Type = TType.I32;
        field.ID = 110;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TakeOffFuncId);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("SkillExConfig(");
      sb.Append("SkillId: ");
      sb.Append(SkillId);
      sb.Append(",Quality: ");
      sb.Append(Quality);
      sb.Append(",Level: ");
      sb.Append(Level);
      sb.Append(",BeginCD: ");
      sb.Append(BeginCD);
      sb.Append(",InitCD: ");
      sb.Append(InitCD);
      sb.Append(",AddCD: ");
      sb.Append(AddCD);
      sb.Append(",PreLimitId: ");
      sb.Append(PreLimitId);
      sb.Append(",PreFuncId: ");
      sb.Append(PreFuncId);
      sb.Append(",TargetId: ");
      sb.Append(TargetId);
      sb.Append(",LimitId: ");
      sb.Append(LimitId);
      sb.Append(",FuncId: ");
      sb.Append(FuncId);
      sb.Append(",TakeOffFuncId: ");
      sb.Append(TakeOffFuncId);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
