/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Config
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CadPlayerAttrConfig : TBase
  {
    private int _pid;
    private int _level;
    private int _exp;
    private int _normalSkill;
    private int _skill1;
    private int _maxHp;
    private int _moveSpeed;
    private int _jumpSpeed;
    private int _jumpHight;
    private int _jumpCount;
    private int _boxSpeed;
    private string _model;
    private string _dataPrefab;

    public int Pid
    {
      get
      {
        return _pid;
      }
      set
      {
        __isset.pid = true;
        this._pid = value;
      }
    }

    public int Level
    {
      get
      {
        return _level;
      }
      set
      {
        __isset.level = true;
        this._level = value;
      }
    }

    public int Exp
    {
      get
      {
        return _exp;
      }
      set
      {
        __isset.exp = true;
        this._exp = value;
      }
    }

    public int NormalSkill
    {
      get
      {
        return _normalSkill;
      }
      set
      {
        __isset.normalSkill = true;
        this._normalSkill = value;
      }
    }

    public int Skill1
    {
      get
      {
        return _skill1;
      }
      set
      {
        __isset.skill1 = true;
        this._skill1 = value;
      }
    }

    public int MaxHp
    {
      get
      {
        return _maxHp;
      }
      set
      {
        __isset.maxHp = true;
        this._maxHp = value;
      }
    }

    public int MoveSpeed
    {
      get
      {
        return _moveSpeed;
      }
      set
      {
        __isset.moveSpeed = true;
        this._moveSpeed = value;
      }
    }

    public int JumpSpeed
    {
      get
      {
        return _jumpSpeed;
      }
      set
      {
        __isset.jumpSpeed = true;
        this._jumpSpeed = value;
      }
    }

    public int JumpHight
    {
      get
      {
        return _jumpHight;
      }
      set
      {
        __isset.jumpHight = true;
        this._jumpHight = value;
      }
    }

    public int JumpCount
    {
      get
      {
        return _jumpCount;
      }
      set
      {
        __isset.jumpCount = true;
        this._jumpCount = value;
      }
    }

    public int BoxSpeed
    {
      get
      {
        return _boxSpeed;
      }
      set
      {
        __isset.boxSpeed = true;
        this._boxSpeed = value;
      }
    }

    public string Model
    {
      get
      {
        return _model;
      }
      set
      {
        __isset.model = true;
        this._model = value;
      }
    }

    public string DataPrefab
    {
      get
      {
        return _dataPrefab;
      }
      set
      {
        __isset.dataPrefab = true;
        this._dataPrefab = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool pid;
      public bool level;
      public bool exp;
      public bool normalSkill;
      public bool skill1;
      public bool maxHp;
      public bool moveSpeed;
      public bool jumpSpeed;
      public bool jumpHight;
      public bool jumpCount;
      public bool boxSpeed;
      public bool model;
      public bool dataPrefab;
    }

    public CadPlayerAttrConfig() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 10:
            if (field.Type == TType.I32) {
              Pid = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.I32) {
              Level = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.I32) {
              Exp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 40:
            if (field.Type == TType.I32) {
              NormalSkill = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 50:
            if (field.Type == TType.I32) {
              Skill1 = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 60:
            if (field.Type == TType.I32) {
              MaxHp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 70:
            if (field.Type == TType.I32) {
              MoveSpeed = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 80:
            if (field.Type == TType.I32) {
              JumpSpeed = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 81:
            if (field.Type == TType.I32) {
              JumpHight = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 82:
            if (field.Type == TType.I32) {
              JumpCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 90:
            if (field.Type == TType.I32) {
              BoxSpeed = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 100:
            if (field.Type == TType.String) {
              Model = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 110:
            if (field.Type == TType.String) {
              DataPrefab = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("CadPlayerAttrConfig");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.pid) {
        field.Name = "pid";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Pid);
        oprot.WriteFieldEnd();
      }
      if (__isset.level) {
        field.Name = "level";
        field.Type = TType.I32;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Level);
        oprot.WriteFieldEnd();
      }
      if (__isset.exp) {
        field.Name = "exp";
        field.Type = TType.I32;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Exp);
        oprot.WriteFieldEnd();
      }
      if (__isset.normalSkill) {
        field.Name = "normalSkill";
        field.Type = TType.I32;
        field.ID = 40;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NormalSkill);
        oprot.WriteFieldEnd();
      }
      if (__isset.skill1) {
        field.Name = "skill1";
        field.Type = TType.I32;
        field.ID = 50;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Skill1);
        oprot.WriteFieldEnd();
      }
      if (__isset.maxHp) {
        field.Name = "maxHp";
        field.Type = TType.I32;
        field.ID = 60;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MaxHp);
        oprot.WriteFieldEnd();
      }
      if (__isset.moveSpeed) {
        field.Name = "moveSpeed";
        field.Type = TType.I32;
        field.ID = 70;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MoveSpeed);
        oprot.WriteFieldEnd();
      }
      if (__isset.jumpSpeed) {
        field.Name = "jumpSpeed";
        field.Type = TType.I32;
        field.ID = 80;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(JumpSpeed);
        oprot.WriteFieldEnd();
      }
      if (__isset.jumpHight) {
        field.Name = "jumpHight";
        field.Type = TType.I32;
        field.ID = 81;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(JumpHight);
        oprot.WriteFieldEnd();
      }
      if (__isset.jumpCount) {
        field.Name = "jumpCount";
        field.Type = TType.I32;
        field.ID = 82;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(JumpCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.boxSpeed) {
        field.Name = "boxSpeed";
        field.Type = TType.I32;
        field.ID = 90;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(BoxSpeed);
        oprot.WriteFieldEnd();
      }
      if (Model != null && __isset.model) {
        field.Name = "model";
        field.Type = TType.String;
        field.ID = 100;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Model);
        oprot.WriteFieldEnd();
      }
      if (DataPrefab != null && __isset.dataPrefab) {
        field.Name = "dataPrefab";
        field.Type = TType.String;
        field.ID = 110;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DataPrefab);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("CadPlayerAttrConfig(");
      sb.Append("Pid: ");
      sb.Append(Pid);
      sb.Append(",Level: ");
      sb.Append(Level);
      sb.Append(",Exp: ");
      sb.Append(Exp);
      sb.Append(",NormalSkill: ");
      sb.Append(NormalSkill);
      sb.Append(",Skill1: ");
      sb.Append(Skill1);
      sb.Append(",MaxHp: ");
      sb.Append(MaxHp);
      sb.Append(",MoveSpeed: ");
      sb.Append(MoveSpeed);
      sb.Append(",JumpSpeed: ");
      sb.Append(JumpSpeed);
      sb.Append(",JumpHight: ");
      sb.Append(JumpHight);
      sb.Append(",JumpCount: ");
      sb.Append(JumpCount);
      sb.Append(",BoxSpeed: ");
      sb.Append(BoxSpeed);
      sb.Append(",Model: ");
      sb.Append(Model);
      sb.Append(",DataPrefab: ");
      sb.Append(DataPrefab);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
