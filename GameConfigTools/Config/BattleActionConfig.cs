/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Config
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class BattleActionConfig : TBase
  {
    private int _id;
    private int _skillId;
    private string _name;
    private bool _canMove;
    private bool _canJump;
    private bool _canSkill;
    private int _totalTime;
    private bool _isLoop;

    public int Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public int SkillId
    {
      get
      {
        return _skillId;
      }
      set
      {
        __isset.skillId = true;
        this._skillId = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public bool CanMove
    {
      get
      {
        return _canMove;
      }
      set
      {
        __isset.canMove = true;
        this._canMove = value;
      }
    }

    public bool CanJump
    {
      get
      {
        return _canJump;
      }
      set
      {
        __isset.canJump = true;
        this._canJump = value;
      }
    }

    public bool CanSkill
    {
      get
      {
        return _canSkill;
      }
      set
      {
        __isset.canSkill = true;
        this._canSkill = value;
      }
    }

    public int TotalTime
    {
      get
      {
        return _totalTime;
      }
      set
      {
        __isset.totalTime = true;
        this._totalTime = value;
      }
    }

    public bool IsLoop
    {
      get
      {
        return _isLoop;
      }
      set
      {
        __isset.isLoop = true;
        this._isLoop = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool skillId;
      public bool name;
      public bool canMove;
      public bool canJump;
      public bool canSkill;
      public bool totalTime;
      public bool isLoop;
    }

    public BattleActionConfig() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 10:
            if (field.Type == TType.I32) {
              Id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.I32) {
              SkillId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 40:
            if (field.Type == TType.Bool) {
              CanMove = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 50:
            if (field.Type == TType.Bool) {
              CanJump = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 51:
            if (field.Type == TType.Bool) {
              CanSkill = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 60:
            if (field.Type == TType.I32) {
              TotalTime = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 70:
            if (field.Type == TType.Bool) {
              IsLoop = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("BattleActionConfig");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.id) {
        field.Name = "id";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Id);
        oprot.WriteFieldEnd();
      }
      if (__isset.skillId) {
        field.Name = "skillId";
        field.Type = TType.I32;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SkillId);
        oprot.WriteFieldEnd();
      }
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      if (__isset.canMove) {
        field.Name = "canMove";
        field.Type = TType.Bool;
        field.ID = 40;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(CanMove);
        oprot.WriteFieldEnd();
      }
      if (__isset.canJump) {
        field.Name = "canJump";
        field.Type = TType.Bool;
        field.ID = 50;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(CanJump);
        oprot.WriteFieldEnd();
      }
      if (__isset.canSkill) {
        field.Name = "canSkill";
        field.Type = TType.Bool;
        field.ID = 51;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(CanSkill);
        oprot.WriteFieldEnd();
      }
      if (__isset.totalTime) {
        field.Name = "totalTime";
        field.Type = TType.I32;
        field.ID = 60;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TotalTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.isLoop) {
        field.Name = "isLoop";
        field.Type = TType.Bool;
        field.ID = 70;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsLoop);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("BattleActionConfig(");
      sb.Append("Id: ");
      sb.Append(Id);
      sb.Append(",SkillId: ");
      sb.Append(SkillId);
      sb.Append(",Name: ");
      sb.Append(Name);
      sb.Append(",CanMove: ");
      sb.Append(CanMove);
      sb.Append(",CanJump: ");
      sb.Append(CanJump);
      sb.Append(",CanSkill: ");
      sb.Append(CanSkill);
      sb.Append(",TotalTime: ");
      sb.Append(TotalTime);
      sb.Append(",IsLoop: ");
      sb.Append(IsLoop);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
