/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Config
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class BattleActionConfig : TBase
  {
    private int _id;
    private int _skillId;
    private string _name;
    private bool _isMoveBreak;
    private bool _isFlyBreak;
    private bool _isSkillBreak;
    private bool _isDemageBreak;
    private bool _isCollisionBreak;
    private bool _isFloat;
    private bool _canUseOnDrop;
    private int _totalFrame;

    public int Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public int SkillId
    {
      get
      {
        return _skillId;
      }
      set
      {
        __isset.skillId = true;
        this._skillId = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public bool IsMoveBreak
    {
      get
      {
        return _isMoveBreak;
      }
      set
      {
        __isset.isMoveBreak = true;
        this._isMoveBreak = value;
      }
    }

    public bool IsFlyBreak
    {
      get
      {
        return _isFlyBreak;
      }
      set
      {
        __isset.isFlyBreak = true;
        this._isFlyBreak = value;
      }
    }

    public bool IsSkillBreak
    {
      get
      {
        return _isSkillBreak;
      }
      set
      {
        __isset.isSkillBreak = true;
        this._isSkillBreak = value;
      }
    }

    public bool IsDemageBreak
    {
      get
      {
        return _isDemageBreak;
      }
      set
      {
        __isset.isDemageBreak = true;
        this._isDemageBreak = value;
      }
    }

    public bool IsCollisionBreak
    {
      get
      {
        return _isCollisionBreak;
      }
      set
      {
        __isset.isCollisionBreak = true;
        this._isCollisionBreak = value;
      }
    }

    public bool IsFloat
    {
      get
      {
        return _isFloat;
      }
      set
      {
        __isset.isFloat = true;
        this._isFloat = value;
      }
    }

    public bool CanUseOnDrop
    {
      get
      {
        return _canUseOnDrop;
      }
      set
      {
        __isset.canUseOnDrop = true;
        this._canUseOnDrop = value;
      }
    }

    public int TotalFrame
    {
      get
      {
        return _totalFrame;
      }
      set
      {
        __isset.totalFrame = true;
        this._totalFrame = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool skillId;
      public bool name;
      public bool isMoveBreak;
      public bool isFlyBreak;
      public bool isSkillBreak;
      public bool isDemageBreak;
      public bool isCollisionBreak;
      public bool isFloat;
      public bool canUseOnDrop;
      public bool totalFrame;
    }

    public BattleActionConfig() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 10:
            if (field.Type == TType.I32) {
              Id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.I32) {
              SkillId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 40:
            if (field.Type == TType.Bool) {
              IsMoveBreak = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 50:
            if (field.Type == TType.Bool) {
              IsFlyBreak = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 60:
            if (field.Type == TType.Bool) {
              IsSkillBreak = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 70:
            if (field.Type == TType.Bool) {
              IsDemageBreak = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 80:
            if (field.Type == TType.Bool) {
              IsCollisionBreak = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 90:
            if (field.Type == TType.Bool) {
              IsFloat = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 100:
            if (field.Type == TType.Bool) {
              CanUseOnDrop = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 110:
            if (field.Type == TType.I32) {
              TotalFrame = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("BattleActionConfig");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.id) {
        field.Name = "id";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Id);
        oprot.WriteFieldEnd();
      }
      if (__isset.skillId) {
        field.Name = "skillId";
        field.Type = TType.I32;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SkillId);
        oprot.WriteFieldEnd();
      }
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      if (__isset.isMoveBreak) {
        field.Name = "isMoveBreak";
        field.Type = TType.Bool;
        field.ID = 40;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsMoveBreak);
        oprot.WriteFieldEnd();
      }
      if (__isset.isFlyBreak) {
        field.Name = "isFlyBreak";
        field.Type = TType.Bool;
        field.ID = 50;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsFlyBreak);
        oprot.WriteFieldEnd();
      }
      if (__isset.isSkillBreak) {
        field.Name = "isSkillBreak";
        field.Type = TType.Bool;
        field.ID = 60;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsSkillBreak);
        oprot.WriteFieldEnd();
      }
      if (__isset.isDemageBreak) {
        field.Name = "isDemageBreak";
        field.Type = TType.Bool;
        field.ID = 70;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsDemageBreak);
        oprot.WriteFieldEnd();
      }
      if (__isset.isCollisionBreak) {
        field.Name = "isCollisionBreak";
        field.Type = TType.Bool;
        field.ID = 80;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsCollisionBreak);
        oprot.WriteFieldEnd();
      }
      if (__isset.isFloat) {
        field.Name = "isFloat";
        field.Type = TType.Bool;
        field.ID = 90;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsFloat);
        oprot.WriteFieldEnd();
      }
      if (__isset.canUseOnDrop) {
        field.Name = "canUseOnDrop";
        field.Type = TType.Bool;
        field.ID = 100;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(CanUseOnDrop);
        oprot.WriteFieldEnd();
      }
      if (__isset.totalFrame) {
        field.Name = "totalFrame";
        field.Type = TType.I32;
        field.ID = 110;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TotalFrame);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("BattleActionConfig(");
      sb.Append("Id: ");
      sb.Append(Id);
      sb.Append(",SkillId: ");
      sb.Append(SkillId);
      sb.Append(",Name: ");
      sb.Append(Name);
      sb.Append(",IsMoveBreak: ");
      sb.Append(IsMoveBreak);
      sb.Append(",IsFlyBreak: ");
      sb.Append(IsFlyBreak);
      sb.Append(",IsSkillBreak: ");
      sb.Append(IsSkillBreak);
      sb.Append(",IsDemageBreak: ");
      sb.Append(IsDemageBreak);
      sb.Append(",IsCollisionBreak: ");
      sb.Append(IsCollisionBreak);
      sb.Append(",IsFloat: ");
      sb.Append(IsFloat);
      sb.Append(",CanUseOnDrop: ");
      sb.Append(CanUseOnDrop);
      sb.Append(",TotalFrame: ");
      sb.Append(TotalFrame);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
