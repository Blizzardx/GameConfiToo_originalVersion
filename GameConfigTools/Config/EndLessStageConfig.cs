/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Config
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class EndlessStageConfig : TBase
  {
    private int _id;
    private int _nameMessageId;
    private int _descMessageId;
    private int _activeLimitId;
    private int _difficultyDegree;
    private int _startCurveId;
    private int _endCurveId;
    private int _cycleStartCurveId;
    private int _cycleEndCurveId;
    private List<int> _rewardMessageId;
    private string _thumbnail;
    private List<int> _scenceIdList;
    private int _sequenceNum;
    private int _maxScore;
    private List<int> _rewardItemIdList;
    private int _limitMessageId;

    public int Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public int NameMessageId
    {
      get
      {
        return _nameMessageId;
      }
      set
      {
        __isset.nameMessageId = true;
        this._nameMessageId = value;
      }
    }

    public int DescMessageId
    {
      get
      {
        return _descMessageId;
      }
      set
      {
        __isset.descMessageId = true;
        this._descMessageId = value;
      }
    }

    public int ActiveLimitId
    {
      get
      {
        return _activeLimitId;
      }
      set
      {
        __isset.activeLimitId = true;
        this._activeLimitId = value;
      }
    }

    public int DifficultyDegree
    {
      get
      {
        return _difficultyDegree;
      }
      set
      {
        __isset.difficultyDegree = true;
        this._difficultyDegree = value;
      }
    }

    public int StartCurveId
    {
      get
      {
        return _startCurveId;
      }
      set
      {
        __isset.startCurveId = true;
        this._startCurveId = value;
      }
    }

    public int EndCurveId
    {
      get
      {
        return _endCurveId;
      }
      set
      {
        __isset.endCurveId = true;
        this._endCurveId = value;
      }
    }

    public int CycleStartCurveId
    {
      get
      {
        return _cycleStartCurveId;
      }
      set
      {
        __isset.cycleStartCurveId = true;
        this._cycleStartCurveId = value;
      }
    }

    public int CycleEndCurveId
    {
      get
      {
        return _cycleEndCurveId;
      }
      set
      {
        __isset.cycleEndCurveId = true;
        this._cycleEndCurveId = value;
      }
    }

    public List<int> RewardMessageId
    {
      get
      {
        return _rewardMessageId;
      }
      set
      {
        __isset.rewardMessageId = true;
        this._rewardMessageId = value;
      }
    }

    public string Thumbnail
    {
      get
      {
        return _thumbnail;
      }
      set
      {
        __isset.thumbnail = true;
        this._thumbnail = value;
      }
    }

    public List<int> ScenceIdList
    {
      get
      {
        return _scenceIdList;
      }
      set
      {
        __isset.scenceIdList = true;
        this._scenceIdList = value;
      }
    }

    public int SequenceNum
    {
      get
      {
        return _sequenceNum;
      }
      set
      {
        __isset.sequenceNum = true;
        this._sequenceNum = value;
      }
    }

    public int MaxScore
    {
      get
      {
        return _maxScore;
      }
      set
      {
        __isset.maxScore = true;
        this._maxScore = value;
      }
    }

    public List<int> RewardItemIdList
    {
      get
      {
        return _rewardItemIdList;
      }
      set
      {
        __isset.rewardItemIdList = true;
        this._rewardItemIdList = value;
      }
    }

    public int LimitMessageId
    {
      get
      {
        return _limitMessageId;
      }
      set
      {
        __isset.limitMessageId = true;
        this._limitMessageId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool nameMessageId;
      public bool descMessageId;
      public bool activeLimitId;
      public bool difficultyDegree;
      public bool startCurveId;
      public bool endCurveId;
      public bool cycleStartCurveId;
      public bool cycleEndCurveId;
      public bool rewardMessageId;
      public bool thumbnail;
      public bool scenceIdList;
      public bool sequenceNum;
      public bool maxScore;
      public bool rewardItemIdList;
      public bool limitMessageId;
    }

    public EndlessStageConfig() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 10:
            if (field.Type == TType.I32) {
              Id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I32) {
              NameMessageId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.I32) {
              DescMessageId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.I32) {
              ActiveLimitId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 40:
            if (field.Type == TType.I32) {
              DifficultyDegree = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 50:
            if (field.Type == TType.I32) {
              StartCurveId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 60:
            if (field.Type == TType.I32) {
              EndCurveId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 70:
            if (field.Type == TType.I32) {
              CycleStartCurveId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 80:
            if (field.Type == TType.I32) {
              CycleEndCurveId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 90:
            if (field.Type == TType.List) {
              {
                RewardMessageId = new List<int>();
                TList _list212 = iprot.ReadListBegin();
                for( int _i213 = 0; _i213 < _list212.Count; ++_i213)
                {
                  int _elem214 = 0;
                  _elem214 = iprot.ReadI32();
                  RewardMessageId.Add(_elem214);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 100:
            if (field.Type == TType.String) {
              Thumbnail = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 110:
            if (field.Type == TType.List) {
              {
                ScenceIdList = new List<int>();
                TList _list215 = iprot.ReadListBegin();
                for( int _i216 = 0; _i216 < _list215.Count; ++_i216)
                {
                  int _elem217 = 0;
                  _elem217 = iprot.ReadI32();
                  ScenceIdList.Add(_elem217);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 120:
            if (field.Type == TType.I32) {
              SequenceNum = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 130:
            if (field.Type == TType.I32) {
              MaxScore = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 140:
            if (field.Type == TType.List) {
              {
                RewardItemIdList = new List<int>();
                TList _list218 = iprot.ReadListBegin();
                for( int _i219 = 0; _i219 < _list218.Count; ++_i219)
                {
                  int _elem220 = 0;
                  _elem220 = iprot.ReadI32();
                  RewardItemIdList.Add(_elem220);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 150:
            if (field.Type == TType.I32) {
              LimitMessageId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("EndlessStageConfig");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.id) {
        field.Name = "id";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Id);
        oprot.WriteFieldEnd();
      }
      if (__isset.nameMessageId) {
        field.Name = "nameMessageId";
        field.Type = TType.I32;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NameMessageId);
        oprot.WriteFieldEnd();
      }
      if (__isset.descMessageId) {
        field.Name = "descMessageId";
        field.Type = TType.I32;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DescMessageId);
        oprot.WriteFieldEnd();
      }
      if (__isset.activeLimitId) {
        field.Name = "activeLimitId";
        field.Type = TType.I32;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ActiveLimitId);
        oprot.WriteFieldEnd();
      }
      if (__isset.difficultyDegree) {
        field.Name = "difficultyDegree";
        field.Type = TType.I32;
        field.ID = 40;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DifficultyDegree);
        oprot.WriteFieldEnd();
      }
      if (__isset.startCurveId) {
        field.Name = "startCurveId";
        field.Type = TType.I32;
        field.ID = 50;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(StartCurveId);
        oprot.WriteFieldEnd();
      }
      if (__isset.endCurveId) {
        field.Name = "endCurveId";
        field.Type = TType.I32;
        field.ID = 60;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(EndCurveId);
        oprot.WriteFieldEnd();
      }
      if (__isset.cycleStartCurveId) {
        field.Name = "cycleStartCurveId";
        field.Type = TType.I32;
        field.ID = 70;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(CycleStartCurveId);
        oprot.WriteFieldEnd();
      }
      if (__isset.cycleEndCurveId) {
        field.Name = "cycleEndCurveId";
        field.Type = TType.I32;
        field.ID = 80;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(CycleEndCurveId);
        oprot.WriteFieldEnd();
      }
      if (RewardMessageId != null && __isset.rewardMessageId) {
        field.Name = "rewardMessageId";
        field.Type = TType.List;
        field.ID = 90;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, RewardMessageId.Count));
          foreach (int _iter221 in RewardMessageId)
          {
            oprot.WriteI32(_iter221);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Thumbnail != null && __isset.thumbnail) {
        field.Name = "thumbnail";
        field.Type = TType.String;
        field.ID = 100;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Thumbnail);
        oprot.WriteFieldEnd();
      }
      if (ScenceIdList != null && __isset.scenceIdList) {
        field.Name = "scenceIdList";
        field.Type = TType.List;
        field.ID = 110;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, ScenceIdList.Count));
          foreach (int _iter222 in ScenceIdList)
          {
            oprot.WriteI32(_iter222);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.sequenceNum) {
        field.Name = "sequenceNum";
        field.Type = TType.I32;
        field.ID = 120;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SequenceNum);
        oprot.WriteFieldEnd();
      }
      if (__isset.maxScore) {
        field.Name = "maxScore";
        field.Type = TType.I32;
        field.ID = 130;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MaxScore);
        oprot.WriteFieldEnd();
      }
      if (RewardItemIdList != null && __isset.rewardItemIdList) {
        field.Name = "rewardItemIdList";
        field.Type = TType.List;
        field.ID = 140;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, RewardItemIdList.Count));
          foreach (int _iter223 in RewardItemIdList)
          {
            oprot.WriteI32(_iter223);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.limitMessageId) {
        field.Name = "limitMessageId";
        field.Type = TType.I32;
        field.ID = 150;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(LimitMessageId);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("EndlessStageConfig(");
      sb.Append("Id: ");
      sb.Append(Id);
      sb.Append(",NameMessageId: ");
      sb.Append(NameMessageId);
      sb.Append(",DescMessageId: ");
      sb.Append(DescMessageId);
      sb.Append(",ActiveLimitId: ");
      sb.Append(ActiveLimitId);
      sb.Append(",DifficultyDegree: ");
      sb.Append(DifficultyDegree);
      sb.Append(",StartCurveId: ");
      sb.Append(StartCurveId);
      sb.Append(",EndCurveId: ");
      sb.Append(EndCurveId);
      sb.Append(",CycleStartCurveId: ");
      sb.Append(CycleStartCurveId);
      sb.Append(",CycleEndCurveId: ");
      sb.Append(CycleEndCurveId);
      sb.Append(",RewardMessageId: ");
      sb.Append(RewardMessageId);
      sb.Append(",Thumbnail: ");
      sb.Append(Thumbnail);
      sb.Append(",ScenceIdList: ");
      sb.Append(ScenceIdList);
      sb.Append(",SequenceNum: ");
      sb.Append(SequenceNum);
      sb.Append(",MaxScore: ");
      sb.Append(MaxScore);
      sb.Append(",RewardItemIdList: ");
      sb.Append(RewardItemIdList);
      sb.Append(",LimitMessageId: ");
      sb.Append(LimitMessageId);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
