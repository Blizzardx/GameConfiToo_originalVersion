/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Config
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class BattleColorConfig : TBase
  {
    private int _id;
    private string _battleColor1;
    private string _battleColor2;
    private string _effectColor1;
    private string _effectColor2;

    public int Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public string BattleColor1
    {
      get
      {
        return _battleColor1;
      }
      set
      {
        __isset.battleColor1 = true;
        this._battleColor1 = value;
      }
    }

    public string BattleColor2
    {
      get
      {
        return _battleColor2;
      }
      set
      {
        __isset.battleColor2 = true;
        this._battleColor2 = value;
      }
    }

    public string EffectColor1
    {
      get
      {
        return _effectColor1;
      }
      set
      {
        __isset.effectColor1 = true;
        this._effectColor1 = value;
      }
    }

    public string EffectColor2
    {
      get
      {
        return _effectColor2;
      }
      set
      {
        __isset.effectColor2 = true;
        this._effectColor2 = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool battleColor1;
      public bool battleColor2;
      public bool effectColor1;
      public bool effectColor2;
    }

    public BattleColorConfig() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 10:
            if (field.Type == TType.I32) {
              Id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.String) {
              BattleColor1 = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.String) {
              BattleColor2 = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 40:
            if (field.Type == TType.String) {
              EffectColor1 = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 50:
            if (field.Type == TType.String) {
              EffectColor2 = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("BattleColorConfig");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.id) {
        field.Name = "id";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Id);
        oprot.WriteFieldEnd();
      }
      if (BattleColor1 != null && __isset.battleColor1) {
        field.Name = "battleColor1";
        field.Type = TType.String;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(BattleColor1);
        oprot.WriteFieldEnd();
      }
      if (BattleColor2 != null && __isset.battleColor2) {
        field.Name = "battleColor2";
        field.Type = TType.String;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(BattleColor2);
        oprot.WriteFieldEnd();
      }
      if (EffectColor1 != null && __isset.effectColor1) {
        field.Name = "effectColor1";
        field.Type = TType.String;
        field.ID = 40;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(EffectColor1);
        oprot.WriteFieldEnd();
      }
      if (EffectColor2 != null && __isset.effectColor2) {
        field.Name = "effectColor2";
        field.Type = TType.String;
        field.ID = 50;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(EffectColor2);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("BattleColorConfig(");
      sb.Append("Id: ");
      sb.Append(Id);
      sb.Append(",BattleColor1: ");
      sb.Append(BattleColor1);
      sb.Append(",BattleColor2: ");
      sb.Append(BattleColor2);
      sb.Append(",EffectColor1: ");
      sb.Append(EffectColor1);
      sb.Append(",EffectColor2: ");
      sb.Append(EffectColor2);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
