/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Config
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CharacterActionConfig : TBase
  {
    private int _id;
    private string _born;
    private int _bornTime;
    private string _idle;
    private int _idleTime;
    private string _walk;
    private int _walkTime;
    private string _jump;
    private int _jumpTime;
    private string _drop;
    private int _dropTime;
    private string _landing;
    private int _landingTime;
    private string _death;
    private int _deathTime;
    private string _back;
    private int _backTime;
    private string _left;
    private int _leftTime;
    private string _right;
    private int _rightTime;

    public int Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public string Born
    {
      get
      {
        return _born;
      }
      set
      {
        __isset.born = true;
        this._born = value;
      }
    }

    public int BornTime
    {
      get
      {
        return _bornTime;
      }
      set
      {
        __isset.bornTime = true;
        this._bornTime = value;
      }
    }

    public string Idle
    {
      get
      {
        return _idle;
      }
      set
      {
        __isset.idle = true;
        this._idle = value;
      }
    }

    public int IdleTime
    {
      get
      {
        return _idleTime;
      }
      set
      {
        __isset.idleTime = true;
        this._idleTime = value;
      }
    }

    public string Walk
    {
      get
      {
        return _walk;
      }
      set
      {
        __isset.walk = true;
        this._walk = value;
      }
    }

    public int WalkTime
    {
      get
      {
        return _walkTime;
      }
      set
      {
        __isset.walkTime = true;
        this._walkTime = value;
      }
    }

    public string Jump
    {
      get
      {
        return _jump;
      }
      set
      {
        __isset.jump = true;
        this._jump = value;
      }
    }

    public int JumpTime
    {
      get
      {
        return _jumpTime;
      }
      set
      {
        __isset.jumpTime = true;
        this._jumpTime = value;
      }
    }

    public string Drop
    {
      get
      {
        return _drop;
      }
      set
      {
        __isset.drop = true;
        this._drop = value;
      }
    }

    public int DropTime
    {
      get
      {
        return _dropTime;
      }
      set
      {
        __isset.dropTime = true;
        this._dropTime = value;
      }
    }

    public string Landing
    {
      get
      {
        return _landing;
      }
      set
      {
        __isset.landing = true;
        this._landing = value;
      }
    }

    public int LandingTime
    {
      get
      {
        return _landingTime;
      }
      set
      {
        __isset.landingTime = true;
        this._landingTime = value;
      }
    }

    public string Death
    {
      get
      {
        return _death;
      }
      set
      {
        __isset.death = true;
        this._death = value;
      }
    }

    public int DeathTime
    {
      get
      {
        return _deathTime;
      }
      set
      {
        __isset.deathTime = true;
        this._deathTime = value;
      }
    }

    public string Back
    {
      get
      {
        return _back;
      }
      set
      {
        __isset.back = true;
        this._back = value;
      }
    }

    public int BackTime
    {
      get
      {
        return _backTime;
      }
      set
      {
        __isset.backTime = true;
        this._backTime = value;
      }
    }

    public string Left
    {
      get
      {
        return _left;
      }
      set
      {
        __isset.left = true;
        this._left = value;
      }
    }

    public int LeftTime
    {
      get
      {
        return _leftTime;
      }
      set
      {
        __isset.leftTime = true;
        this._leftTime = value;
      }
    }

    public string Right
    {
      get
      {
        return _right;
      }
      set
      {
        __isset.right = true;
        this._right = value;
      }
    }

    public int RightTime
    {
      get
      {
        return _rightTime;
      }
      set
      {
        __isset.rightTime = true;
        this._rightTime = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool born;
      public bool bornTime;
      public bool idle;
      public bool idleTime;
      public bool walk;
      public bool walkTime;
      public bool jump;
      public bool jumpTime;
      public bool drop;
      public bool dropTime;
      public bool landing;
      public bool landingTime;
      public bool death;
      public bool deathTime;
      public bool back;
      public bool backTime;
      public bool left;
      public bool leftTime;
      public bool right;
      public bool rightTime;
    }

    public CharacterActionConfig() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 10:
            if (field.Type == TType.I32) {
              Id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.String) {
              Born = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.I32) {
              BornTime = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 40:
            if (field.Type == TType.String) {
              Idle = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 50:
            if (field.Type == TType.I32) {
              IdleTime = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 60:
            if (field.Type == TType.String) {
              Walk = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 70:
            if (field.Type == TType.I32) {
              WalkTime = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 80:
            if (field.Type == TType.String) {
              Jump = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 90:
            if (field.Type == TType.I32) {
              JumpTime = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 100:
            if (field.Type == TType.String) {
              Drop = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 110:
            if (field.Type == TType.I32) {
              DropTime = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 120:
            if (field.Type == TType.String) {
              Landing = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 130:
            if (field.Type == TType.I32) {
              LandingTime = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 140:
            if (field.Type == TType.String) {
              Death = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 150:
            if (field.Type == TType.I32) {
              DeathTime = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 160:
            if (field.Type == TType.String) {
              Back = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 170:
            if (field.Type == TType.I32) {
              BackTime = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 180:
            if (field.Type == TType.String) {
              Left = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 190:
            if (field.Type == TType.I32) {
              LeftTime = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 200:
            if (field.Type == TType.String) {
              Right = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 210:
            if (field.Type == TType.I32) {
              RightTime = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("CharacterActionConfig");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.id) {
        field.Name = "id";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Id);
        oprot.WriteFieldEnd();
      }
      if (Born != null && __isset.born) {
        field.Name = "born";
        field.Type = TType.String;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Born);
        oprot.WriteFieldEnd();
      }
      if (__isset.bornTime) {
        field.Name = "bornTime";
        field.Type = TType.I32;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(BornTime);
        oprot.WriteFieldEnd();
      }
      if (Idle != null && __isset.idle) {
        field.Name = "idle";
        field.Type = TType.String;
        field.ID = 40;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Idle);
        oprot.WriteFieldEnd();
      }
      if (__isset.idleTime) {
        field.Name = "idleTime";
        field.Type = TType.I32;
        field.ID = 50;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(IdleTime);
        oprot.WriteFieldEnd();
      }
      if (Walk != null && __isset.walk) {
        field.Name = "walk";
        field.Type = TType.String;
        field.ID = 60;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Walk);
        oprot.WriteFieldEnd();
      }
      if (__isset.walkTime) {
        field.Name = "walkTime";
        field.Type = TType.I32;
        field.ID = 70;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(WalkTime);
        oprot.WriteFieldEnd();
      }
      if (Jump != null && __isset.jump) {
        field.Name = "jump";
        field.Type = TType.String;
        field.ID = 80;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Jump);
        oprot.WriteFieldEnd();
      }
      if (__isset.jumpTime) {
        field.Name = "jumpTime";
        field.Type = TType.I32;
        field.ID = 90;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(JumpTime);
        oprot.WriteFieldEnd();
      }
      if (Drop != null && __isset.drop) {
        field.Name = "drop";
        field.Type = TType.String;
        field.ID = 100;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Drop);
        oprot.WriteFieldEnd();
      }
      if (__isset.dropTime) {
        field.Name = "dropTime";
        field.Type = TType.I32;
        field.ID = 110;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DropTime);
        oprot.WriteFieldEnd();
      }
      if (Landing != null && __isset.landing) {
        field.Name = "landing";
        field.Type = TType.String;
        field.ID = 120;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Landing);
        oprot.WriteFieldEnd();
      }
      if (__isset.landingTime) {
        field.Name = "landingTime";
        field.Type = TType.I32;
        field.ID = 130;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(LandingTime);
        oprot.WriteFieldEnd();
      }
      if (Death != null && __isset.death) {
        field.Name = "death";
        field.Type = TType.String;
        field.ID = 140;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Death);
        oprot.WriteFieldEnd();
      }
      if (__isset.deathTime) {
        field.Name = "deathTime";
        field.Type = TType.I32;
        field.ID = 150;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DeathTime);
        oprot.WriteFieldEnd();
      }
      if (Back != null && __isset.back) {
        field.Name = "back";
        field.Type = TType.String;
        field.ID = 160;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Back);
        oprot.WriteFieldEnd();
      }
      if (__isset.backTime) {
        field.Name = "backTime";
        field.Type = TType.I32;
        field.ID = 170;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(BackTime);
        oprot.WriteFieldEnd();
      }
      if (Left != null && __isset.left) {
        field.Name = "left";
        field.Type = TType.String;
        field.ID = 180;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Left);
        oprot.WriteFieldEnd();
      }
      if (__isset.leftTime) {
        field.Name = "leftTime";
        field.Type = TType.I32;
        field.ID = 190;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(LeftTime);
        oprot.WriteFieldEnd();
      }
      if (Right != null && __isset.right) {
        field.Name = "right";
        field.Type = TType.String;
        field.ID = 200;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Right);
        oprot.WriteFieldEnd();
      }
      if (__isset.rightTime) {
        field.Name = "rightTime";
        field.Type = TType.I32;
        field.ID = 210;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(RightTime);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("CharacterActionConfig(");
      sb.Append("Id: ");
      sb.Append(Id);
      sb.Append(",Born: ");
      sb.Append(Born);
      sb.Append(",BornTime: ");
      sb.Append(BornTime);
      sb.Append(",Idle: ");
      sb.Append(Idle);
      sb.Append(",IdleTime: ");
      sb.Append(IdleTime);
      sb.Append(",Walk: ");
      sb.Append(Walk);
      sb.Append(",WalkTime: ");
      sb.Append(WalkTime);
      sb.Append(",Jump: ");
      sb.Append(Jump);
      sb.Append(",JumpTime: ");
      sb.Append(JumpTime);
      sb.Append(",Drop: ");
      sb.Append(Drop);
      sb.Append(",DropTime: ");
      sb.Append(DropTime);
      sb.Append(",Landing: ");
      sb.Append(Landing);
      sb.Append(",LandingTime: ");
      sb.Append(LandingTime);
      sb.Append(",Death: ");
      sb.Append(Death);
      sb.Append(",DeathTime: ");
      sb.Append(DeathTime);
      sb.Append(",Back: ");
      sb.Append(Back);
      sb.Append(",BackTime: ");
      sb.Append(BackTime);
      sb.Append(",Left: ");
      sb.Append(Left);
      sb.Append(",LeftTime: ");
      sb.Append(LeftTime);
      sb.Append(",Right: ");
      sb.Append(Right);
      sb.Append(",RightTime: ");
      sb.Append(RightTime);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
