/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Config
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TargetData : TBase
  {
    private int _targetId;
    private List<string> _paramStringList;
    private List<int> _paramIntList;

    public int TargetId
    {
      get
      {
        return _targetId;
      }
      set
      {
        __isset.targetId = true;
        this._targetId = value;
      }
    }

    public List<string> ParamStringList
    {
      get
      {
        return _paramStringList;
      }
      set
      {
        __isset.paramStringList = true;
        this._paramStringList = value;
      }
    }

    public List<int> ParamIntList
    {
      get
      {
        return _paramIntList;
      }
      set
      {
        __isset.paramIntList = true;
        this._paramIntList = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool targetId;
      public bool paramStringList;
      public bool paramIntList;
    }

    public TargetData() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              TargetId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                ParamStringList = new List<string>();
                TList _list53 = iprot.ReadListBegin();
                for( int _i54 = 0; _i54 < _list53.Count; ++_i54)
                {
                  string _elem55 = null;
                  _elem55 = iprot.ReadString();
                  ParamStringList.Add(_elem55);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                ParamIntList = new List<int>();
                TList _list56 = iprot.ReadListBegin();
                for( int _i57 = 0; _i57 < _list56.Count; ++_i57)
                {
                  int _elem58 = 0;
                  _elem58 = iprot.ReadI32();
                  ParamIntList.Add(_elem58);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("TargetData");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.targetId) {
        field.Name = "targetId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TargetId);
        oprot.WriteFieldEnd();
      }
      if (ParamStringList != null && __isset.paramStringList) {
        field.Name = "paramStringList";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, ParamStringList.Count));
          foreach (string _iter59 in ParamStringList)
          {
            oprot.WriteString(_iter59);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (ParamIntList != null && __isset.paramIntList) {
        field.Name = "paramIntList";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, ParamIntList.Count));
          foreach (int _iter60 in ParamIntList)
          {
            oprot.WriteI32(_iter60);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("TargetData(");
      sb.Append("TargetId: ");
      sb.Append(TargetId);
      sb.Append(",ParamStringList: ");
      sb.Append(ParamStringList);
      sb.Append(",ParamIntList: ");
      sb.Append(ParamIntList);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
