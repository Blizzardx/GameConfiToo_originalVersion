/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Config
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class PvpStageConfig : TBase
  {
    private int _id;
    private int _nameMessageId;
    private int _descMessageId;
    private string _stageMapResource;
    private string _iconPic;
    private int _endLimitId;
    private int _endFuncId;
    private int _modeId;
    private int _resultPlanId;
    private List<int> _showDropItemIdList;
    private int _starBit4CountId;
    private int _weatherPlanId;
    private int _totalTime;
    private int _initCradit;
    private int _atkCraditPet;
    private int _killCraditPet;
    private int _bekillCraditPet;
    private int _otherPlayerCol;
    private int _killPet;
    private int _bornLimitId;
    private int _bornFuncId;

    public int Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public int NameMessageId
    {
      get
      {
        return _nameMessageId;
      }
      set
      {
        __isset.nameMessageId = true;
        this._nameMessageId = value;
      }
    }

    public int DescMessageId
    {
      get
      {
        return _descMessageId;
      }
      set
      {
        __isset.descMessageId = true;
        this._descMessageId = value;
      }
    }

    public string StageMapResource
    {
      get
      {
        return _stageMapResource;
      }
      set
      {
        __isset.stageMapResource = true;
        this._stageMapResource = value;
      }
    }

    public string IconPic
    {
      get
      {
        return _iconPic;
      }
      set
      {
        __isset.iconPic = true;
        this._iconPic = value;
      }
    }

    public int EndLimitId
    {
      get
      {
        return _endLimitId;
      }
      set
      {
        __isset.endLimitId = true;
        this._endLimitId = value;
      }
    }

    public int EndFuncId
    {
      get
      {
        return _endFuncId;
      }
      set
      {
        __isset.endFuncId = true;
        this._endFuncId = value;
      }
    }

    public int ModeId
    {
      get
      {
        return _modeId;
      }
      set
      {
        __isset.modeId = true;
        this._modeId = value;
      }
    }

    public int ResultPlanId
    {
      get
      {
        return _resultPlanId;
      }
      set
      {
        __isset.resultPlanId = true;
        this._resultPlanId = value;
      }
    }

    public List<int> ShowDropItemIdList
    {
      get
      {
        return _showDropItemIdList;
      }
      set
      {
        __isset.showDropItemIdList = true;
        this._showDropItemIdList = value;
      }
    }

    public int StarBit4CountId
    {
      get
      {
        return _starBit4CountId;
      }
      set
      {
        __isset.starBit4CountId = true;
        this._starBit4CountId = value;
      }
    }

    public int WeatherPlanId
    {
      get
      {
        return _weatherPlanId;
      }
      set
      {
        __isset.weatherPlanId = true;
        this._weatherPlanId = value;
      }
    }

    public int TotalTime
    {
      get
      {
        return _totalTime;
      }
      set
      {
        __isset.totalTime = true;
        this._totalTime = value;
      }
    }

    public int InitCradit
    {
      get
      {
        return _initCradit;
      }
      set
      {
        __isset.initCradit = true;
        this._initCradit = value;
      }
    }

    public int AtkCraditPet
    {
      get
      {
        return _atkCraditPet;
      }
      set
      {
        __isset.atkCraditPet = true;
        this._atkCraditPet = value;
      }
    }

    public int KillCraditPet
    {
      get
      {
        return _killCraditPet;
      }
      set
      {
        __isset.killCraditPet = true;
        this._killCraditPet = value;
      }
    }

    public int BekillCraditPet
    {
      get
      {
        return _bekillCraditPet;
      }
      set
      {
        __isset.bekillCraditPet = true;
        this._bekillCraditPet = value;
      }
    }

    public int OtherPlayerCol
    {
      get
      {
        return _otherPlayerCol;
      }
      set
      {
        __isset.otherPlayerCol = true;
        this._otherPlayerCol = value;
      }
    }

    public int KillPet
    {
      get
      {
        return _killPet;
      }
      set
      {
        __isset.killPet = true;
        this._killPet = value;
      }
    }

    public int BornLimitId
    {
      get
      {
        return _bornLimitId;
      }
      set
      {
        __isset.bornLimitId = true;
        this._bornLimitId = value;
      }
    }

    public int BornFuncId
    {
      get
      {
        return _bornFuncId;
      }
      set
      {
        __isset.bornFuncId = true;
        this._bornFuncId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool nameMessageId;
      public bool descMessageId;
      public bool stageMapResource;
      public bool iconPic;
      public bool endLimitId;
      public bool endFuncId;
      public bool modeId;
      public bool resultPlanId;
      public bool showDropItemIdList;
      public bool starBit4CountId;
      public bool weatherPlanId;
      public bool totalTime;
      public bool initCradit;
      public bool atkCraditPet;
      public bool killCraditPet;
      public bool bekillCraditPet;
      public bool otherPlayerCol;
      public bool killPet;
      public bool bornLimitId;
      public bool bornFuncId;
    }

    public PvpStageConfig() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 10:
            if (field.Type == TType.I32) {
              Id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.I32) {
              NameMessageId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.I32) {
              DescMessageId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 40:
            if (field.Type == TType.String) {
              StageMapResource = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 50:
            if (field.Type == TType.String) {
              IconPic = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 60:
            if (field.Type == TType.I32) {
              EndLimitId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 70:
            if (field.Type == TType.I32) {
              EndFuncId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 80:
            if (field.Type == TType.I32) {
              ModeId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 90:
            if (field.Type == TType.I32) {
              ResultPlanId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 100:
            if (field.Type == TType.List) {
              {
                ShowDropItemIdList = new List<int>();
                TList _list171 = iprot.ReadListBegin();
                for( int _i172 = 0; _i172 < _list171.Count; ++_i172)
                {
                  int _elem173 = 0;
                  _elem173 = iprot.ReadI32();
                  ShowDropItemIdList.Add(_elem173);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 110:
            if (field.Type == TType.I32) {
              StarBit4CountId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 120:
            if (field.Type == TType.I32) {
              WeatherPlanId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 130:
            if (field.Type == TType.I32) {
              TotalTime = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 140:
            if (field.Type == TType.I32) {
              InitCradit = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 150:
            if (field.Type == TType.I32) {
              AtkCraditPet = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 160:
            if (field.Type == TType.I32) {
              KillCraditPet = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 170:
            if (field.Type == TType.I32) {
              BekillCraditPet = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 180:
            if (field.Type == TType.I32) {
              OtherPlayerCol = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 190:
            if (field.Type == TType.I32) {
              KillPet = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 200:
            if (field.Type == TType.I32) {
              BornLimitId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 210:
            if (field.Type == TType.I32) {
              BornFuncId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("PvpStageConfig");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.id) {
        field.Name = "id";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Id);
        oprot.WriteFieldEnd();
      }
      if (__isset.nameMessageId) {
        field.Name = "nameMessageId";
        field.Type = TType.I32;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NameMessageId);
        oprot.WriteFieldEnd();
      }
      if (__isset.descMessageId) {
        field.Name = "descMessageId";
        field.Type = TType.I32;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DescMessageId);
        oprot.WriteFieldEnd();
      }
      if (StageMapResource != null && __isset.stageMapResource) {
        field.Name = "stageMapResource";
        field.Type = TType.String;
        field.ID = 40;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(StageMapResource);
        oprot.WriteFieldEnd();
      }
      if (IconPic != null && __isset.iconPic) {
        field.Name = "iconPic";
        field.Type = TType.String;
        field.ID = 50;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(IconPic);
        oprot.WriteFieldEnd();
      }
      if (__isset.endLimitId) {
        field.Name = "endLimitId";
        field.Type = TType.I32;
        field.ID = 60;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(EndLimitId);
        oprot.WriteFieldEnd();
      }
      if (__isset.endFuncId) {
        field.Name = "endFuncId";
        field.Type = TType.I32;
        field.ID = 70;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(EndFuncId);
        oprot.WriteFieldEnd();
      }
      if (__isset.modeId) {
        field.Name = "modeId";
        field.Type = TType.I32;
        field.ID = 80;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ModeId);
        oprot.WriteFieldEnd();
      }
      if (__isset.resultPlanId) {
        field.Name = "resultPlanId";
        field.Type = TType.I32;
        field.ID = 90;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ResultPlanId);
        oprot.WriteFieldEnd();
      }
      if (ShowDropItemIdList != null && __isset.showDropItemIdList) {
        field.Name = "showDropItemIdList";
        field.Type = TType.List;
        field.ID = 100;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, ShowDropItemIdList.Count));
          foreach (int _iter174 in ShowDropItemIdList)
          {
            oprot.WriteI32(_iter174);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.starBit4CountId) {
        field.Name = "starBit4CountId";
        field.Type = TType.I32;
        field.ID = 110;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(StarBit4CountId);
        oprot.WriteFieldEnd();
      }
      if (__isset.weatherPlanId) {
        field.Name = "weatherPlanId";
        field.Type = TType.I32;
        field.ID = 120;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(WeatherPlanId);
        oprot.WriteFieldEnd();
      }
      if (__isset.totalTime) {
        field.Name = "totalTime";
        field.Type = TType.I32;
        field.ID = 130;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TotalTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.initCradit) {
        field.Name = "initCradit";
        field.Type = TType.I32;
        field.ID = 140;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(InitCradit);
        oprot.WriteFieldEnd();
      }
      if (__isset.atkCraditPet) {
        field.Name = "atkCraditPet";
        field.Type = TType.I32;
        field.ID = 150;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(AtkCraditPet);
        oprot.WriteFieldEnd();
      }
      if (__isset.killCraditPet) {
        field.Name = "killCraditPet";
        field.Type = TType.I32;
        field.ID = 160;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(KillCraditPet);
        oprot.WriteFieldEnd();
      }
      if (__isset.bekillCraditPet) {
        field.Name = "bekillCraditPet";
        field.Type = TType.I32;
        field.ID = 170;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(BekillCraditPet);
        oprot.WriteFieldEnd();
      }
      if (__isset.otherPlayerCol) {
        field.Name = "otherPlayerCol";
        field.Type = TType.I32;
        field.ID = 180;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(OtherPlayerCol);
        oprot.WriteFieldEnd();
      }
      if (__isset.killPet) {
        field.Name = "killPet";
        field.Type = TType.I32;
        field.ID = 190;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(KillPet);
        oprot.WriteFieldEnd();
      }
      if (__isset.bornLimitId) {
        field.Name = "bornLimitId";
        field.Type = TType.I32;
        field.ID = 200;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(BornLimitId);
        oprot.WriteFieldEnd();
      }
      if (__isset.bornFuncId) {
        field.Name = "bornFuncId";
        field.Type = TType.I32;
        field.ID = 210;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(BornFuncId);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("PvpStageConfig(");
      sb.Append("Id: ");
      sb.Append(Id);
      sb.Append(",NameMessageId: ");
      sb.Append(NameMessageId);
      sb.Append(",DescMessageId: ");
      sb.Append(DescMessageId);
      sb.Append(",StageMapResource: ");
      sb.Append(StageMapResource);
      sb.Append(",IconPic: ");
      sb.Append(IconPic);
      sb.Append(",EndLimitId: ");
      sb.Append(EndLimitId);
      sb.Append(",EndFuncId: ");
      sb.Append(EndFuncId);
      sb.Append(",ModeId: ");
      sb.Append(ModeId);
      sb.Append(",ResultPlanId: ");
      sb.Append(ResultPlanId);
      sb.Append(",ShowDropItemIdList: ");
      sb.Append(ShowDropItemIdList);
      sb.Append(",StarBit4CountId: ");
      sb.Append(StarBit4CountId);
      sb.Append(",WeatherPlanId: ");
      sb.Append(WeatherPlanId);
      sb.Append(",TotalTime: ");
      sb.Append(TotalTime);
      sb.Append(",InitCradit: ");
      sb.Append(InitCradit);
      sb.Append(",AtkCraditPet: ");
      sb.Append(AtkCraditPet);
      sb.Append(",KillCraditPet: ");
      sb.Append(KillCraditPet);
      sb.Append(",BekillCraditPet: ");
      sb.Append(BekillCraditPet);
      sb.Append(",OtherPlayerCol: ");
      sb.Append(OtherPlayerCol);
      sb.Append(",KillPet: ");
      sb.Append(KillPet);
      sb.Append(",BornLimitId: ");
      sb.Append(BornLimitId);
      sb.Append(",BornFuncId: ");
      sb.Append(BornFuncId);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
