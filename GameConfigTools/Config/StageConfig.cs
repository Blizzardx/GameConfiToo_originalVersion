/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Config
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class StageConfig : TBase
  {
    private int _id;
    private int _nextStageId;
    private int _nameMessageId;
    private int _descMessageId;
    private int _helpMessageId;
    private int _targetMessageId;
    private int _chapterId;
    private string _stageMaprResource;
    private int _beforeStoryId;
    private int _afterStoryId;
    private string _backgroundPic;
    private string _iconPic;
    private string _iconPicPass;
    private int _quickWinLimitId;
    private int _quickWinFuncId;
    private int _enterLimitId;
    private int _enterFuncId;
    private int _beforeShowLimitId;
    private int _beforeShowFuncId;
    private int _loseLimitId;
    private int _loseFuncId;
    private int _winLimitId;
    private int _winFuncId;
    private List<int> _dropIdList;
    private List<int> _showDropItemIdList;
    private List<int> _showMonsterIdList;
    private int _starBit4CountId;
    private int _weatherPlanId;

    public int Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public int NextStageId
    {
      get
      {
        return _nextStageId;
      }
      set
      {
        __isset.nextStageId = true;
        this._nextStageId = value;
      }
    }

    public int NameMessageId
    {
      get
      {
        return _nameMessageId;
      }
      set
      {
        __isset.nameMessageId = true;
        this._nameMessageId = value;
      }
    }

    public int DescMessageId
    {
      get
      {
        return _descMessageId;
      }
      set
      {
        __isset.descMessageId = true;
        this._descMessageId = value;
      }
    }

    public int HelpMessageId
    {
      get
      {
        return _helpMessageId;
      }
      set
      {
        __isset.helpMessageId = true;
        this._helpMessageId = value;
      }
    }

    public int TargetMessageId
    {
      get
      {
        return _targetMessageId;
      }
      set
      {
        __isset.targetMessageId = true;
        this._targetMessageId = value;
      }
    }

    public int ChapterId
    {
      get
      {
        return _chapterId;
      }
      set
      {
        __isset.chapterId = true;
        this._chapterId = value;
      }
    }

    public string StageMaprResource
    {
      get
      {
        return _stageMaprResource;
      }
      set
      {
        __isset.stageMaprResource = true;
        this._stageMaprResource = value;
      }
    }

    public int BeforeStoryId
    {
      get
      {
        return _beforeStoryId;
      }
      set
      {
        __isset.beforeStoryId = true;
        this._beforeStoryId = value;
      }
    }

    public int AfterStoryId
    {
      get
      {
        return _afterStoryId;
      }
      set
      {
        __isset.afterStoryId = true;
        this._afterStoryId = value;
      }
    }

    public string BackgroundPic
    {
      get
      {
        return _backgroundPic;
      }
      set
      {
        __isset.backgroundPic = true;
        this._backgroundPic = value;
      }
    }

    public string IconPic
    {
      get
      {
        return _iconPic;
      }
      set
      {
        __isset.iconPic = true;
        this._iconPic = value;
      }
    }

    public string IconPicPass
    {
      get
      {
        return _iconPicPass;
      }
      set
      {
        __isset.iconPicPass = true;
        this._iconPicPass = value;
      }
    }

    public int QuickWinLimitId
    {
      get
      {
        return _quickWinLimitId;
      }
      set
      {
        __isset.quickWinLimitId = true;
        this._quickWinLimitId = value;
      }
    }

    public int QuickWinFuncId
    {
      get
      {
        return _quickWinFuncId;
      }
      set
      {
        __isset.quickWinFuncId = true;
        this._quickWinFuncId = value;
      }
    }

    public int EnterLimitId
    {
      get
      {
        return _enterLimitId;
      }
      set
      {
        __isset.enterLimitId = true;
        this._enterLimitId = value;
      }
    }

    public int EnterFuncId
    {
      get
      {
        return _enterFuncId;
      }
      set
      {
        __isset.enterFuncId = true;
        this._enterFuncId = value;
      }
    }

    public int BeforeShowLimitId
    {
      get
      {
        return _beforeShowLimitId;
      }
      set
      {
        __isset.beforeShowLimitId = true;
        this._beforeShowLimitId = value;
      }
    }

    public int BeforeShowFuncId
    {
      get
      {
        return _beforeShowFuncId;
      }
      set
      {
        __isset.beforeShowFuncId = true;
        this._beforeShowFuncId = value;
      }
    }

    public int LoseLimitId
    {
      get
      {
        return _loseLimitId;
      }
      set
      {
        __isset.loseLimitId = true;
        this._loseLimitId = value;
      }
    }

    public int LoseFuncId
    {
      get
      {
        return _loseFuncId;
      }
      set
      {
        __isset.loseFuncId = true;
        this._loseFuncId = value;
      }
    }

    public int WinLimitId
    {
      get
      {
        return _winLimitId;
      }
      set
      {
        __isset.winLimitId = true;
        this._winLimitId = value;
      }
    }

    public int WinFuncId
    {
      get
      {
        return _winFuncId;
      }
      set
      {
        __isset.winFuncId = true;
        this._winFuncId = value;
      }
    }

    public List<int> DropIdList
    {
      get
      {
        return _dropIdList;
      }
      set
      {
        __isset.dropIdList = true;
        this._dropIdList = value;
      }
    }

    public List<int> ShowDropItemIdList
    {
      get
      {
        return _showDropItemIdList;
      }
      set
      {
        __isset.showDropItemIdList = true;
        this._showDropItemIdList = value;
      }
    }

    public List<int> ShowMonsterIdList
    {
      get
      {
        return _showMonsterIdList;
      }
      set
      {
        __isset.showMonsterIdList = true;
        this._showMonsterIdList = value;
      }
    }

    public int StarBit4CountId
    {
      get
      {
        return _starBit4CountId;
      }
      set
      {
        __isset.starBit4CountId = true;
        this._starBit4CountId = value;
      }
    }

    public int WeatherPlanId
    {
      get
      {
        return _weatherPlanId;
      }
      set
      {
        __isset.weatherPlanId = true;
        this._weatherPlanId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool nextStageId;
      public bool nameMessageId;
      public bool descMessageId;
      public bool helpMessageId;
      public bool targetMessageId;
      public bool chapterId;
      public bool stageMaprResource;
      public bool beforeStoryId;
      public bool afterStoryId;
      public bool backgroundPic;
      public bool iconPic;
      public bool iconPicPass;
      public bool quickWinLimitId;
      public bool quickWinFuncId;
      public bool enterLimitId;
      public bool enterFuncId;
      public bool beforeShowLimitId;
      public bool beforeShowFuncId;
      public bool loseLimitId;
      public bool loseFuncId;
      public bool winLimitId;
      public bool winFuncId;
      public bool dropIdList;
      public bool showDropItemIdList;
      public bool showMonsterIdList;
      public bool starBit4CountId;
      public bool weatherPlanId;
    }

    public StageConfig() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 10:
            if (field.Type == TType.I32) {
              Id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I32) {
              NextStageId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.I32) {
              NameMessageId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.I32) {
              DescMessageId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 40:
            if (field.Type == TType.I32) {
              HelpMessageId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 41:
            if (field.Type == TType.I32) {
              TargetMessageId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 45:
            if (field.Type == TType.I32) {
              ChapterId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 50:
            if (field.Type == TType.String) {
              StageMaprResource = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 55:
            if (field.Type == TType.I32) {
              BeforeStoryId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 56:
            if (field.Type == TType.I32) {
              AfterStoryId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 60:
            if (field.Type == TType.String) {
              BackgroundPic = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 61:
            if (field.Type == TType.String) {
              IconPic = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 62:
            if (field.Type == TType.String) {
              IconPicPass = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 70:
            if (field.Type == TType.I32) {
              QuickWinLimitId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 80:
            if (field.Type == TType.I32) {
              QuickWinFuncId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 90:
            if (field.Type == TType.I32) {
              EnterLimitId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 100:
            if (field.Type == TType.I32) {
              EnterFuncId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 101:
            if (field.Type == TType.I32) {
              BeforeShowLimitId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 102:
            if (field.Type == TType.I32) {
              BeforeShowFuncId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 110:
            if (field.Type == TType.I32) {
              LoseLimitId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 120:
            if (field.Type == TType.I32) {
              LoseFuncId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 130:
            if (field.Type == TType.I32) {
              WinLimitId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 140:
            if (field.Type == TType.I32) {
              WinFuncId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 150:
            if (field.Type == TType.List) {
              {
                DropIdList = new List<int>();
                TList _list101 = iprot.ReadListBegin();
                for( int _i102 = 0; _i102 < _list101.Count; ++_i102)
                {
                  int _elem103 = 0;
                  _elem103 = iprot.ReadI32();
                  DropIdList.Add(_elem103);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 160:
            if (field.Type == TType.List) {
              {
                ShowDropItemIdList = new List<int>();
                TList _list104 = iprot.ReadListBegin();
                for( int _i105 = 0; _i105 < _list104.Count; ++_i105)
                {
                  int _elem106 = 0;
                  _elem106 = iprot.ReadI32();
                  ShowDropItemIdList.Add(_elem106);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 170:
            if (field.Type == TType.List) {
              {
                ShowMonsterIdList = new List<int>();
                TList _list107 = iprot.ReadListBegin();
                for( int _i108 = 0; _i108 < _list107.Count; ++_i108)
                {
                  int _elem109 = 0;
                  _elem109 = iprot.ReadI32();
                  ShowMonsterIdList.Add(_elem109);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 180:
            if (field.Type == TType.I32) {
              StarBit4CountId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 190:
            if (field.Type == TType.I32) {
              WeatherPlanId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("StageConfig");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.id) {
        field.Name = "id";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Id);
        oprot.WriteFieldEnd();
      }
      if (__isset.nextStageId) {
        field.Name = "nextStageId";
        field.Type = TType.I32;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NextStageId);
        oprot.WriteFieldEnd();
      }
      if (__isset.nameMessageId) {
        field.Name = "nameMessageId";
        field.Type = TType.I32;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NameMessageId);
        oprot.WriteFieldEnd();
      }
      if (__isset.descMessageId) {
        field.Name = "descMessageId";
        field.Type = TType.I32;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DescMessageId);
        oprot.WriteFieldEnd();
      }
      if (__isset.helpMessageId) {
        field.Name = "helpMessageId";
        field.Type = TType.I32;
        field.ID = 40;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(HelpMessageId);
        oprot.WriteFieldEnd();
      }
      if (__isset.targetMessageId) {
        field.Name = "targetMessageId";
        field.Type = TType.I32;
        field.ID = 41;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TargetMessageId);
        oprot.WriteFieldEnd();
      }
      if (__isset.chapterId) {
        field.Name = "chapterId";
        field.Type = TType.I32;
        field.ID = 45;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ChapterId);
        oprot.WriteFieldEnd();
      }
      if (StageMaprResource != null && __isset.stageMaprResource) {
        field.Name = "stageMaprResource";
        field.Type = TType.String;
        field.ID = 50;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(StageMaprResource);
        oprot.WriteFieldEnd();
      }
      if (__isset.beforeStoryId) {
        field.Name = "beforeStoryId";
        field.Type = TType.I32;
        field.ID = 55;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(BeforeStoryId);
        oprot.WriteFieldEnd();
      }
      if (__isset.afterStoryId) {
        field.Name = "afterStoryId";
        field.Type = TType.I32;
        field.ID = 56;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(AfterStoryId);
        oprot.WriteFieldEnd();
      }
      if (BackgroundPic != null && __isset.backgroundPic) {
        field.Name = "backgroundPic";
        field.Type = TType.String;
        field.ID = 60;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(BackgroundPic);
        oprot.WriteFieldEnd();
      }
      if (IconPic != null && __isset.iconPic) {
        field.Name = "iconPic";
        field.Type = TType.String;
        field.ID = 61;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(IconPic);
        oprot.WriteFieldEnd();
      }
      if (IconPicPass != null && __isset.iconPicPass) {
        field.Name = "iconPicPass";
        field.Type = TType.String;
        field.ID = 62;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(IconPicPass);
        oprot.WriteFieldEnd();
      }
      if (__isset.quickWinLimitId) {
        field.Name = "quickWinLimitId";
        field.Type = TType.I32;
        field.ID = 70;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(QuickWinLimitId);
        oprot.WriteFieldEnd();
      }
      if (__isset.quickWinFuncId) {
        field.Name = "quickWinFuncId";
        field.Type = TType.I32;
        field.ID = 80;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(QuickWinFuncId);
        oprot.WriteFieldEnd();
      }
      if (__isset.enterLimitId) {
        field.Name = "enterLimitId";
        field.Type = TType.I32;
        field.ID = 90;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(EnterLimitId);
        oprot.WriteFieldEnd();
      }
      if (__isset.enterFuncId) {
        field.Name = "enterFuncId";
        field.Type = TType.I32;
        field.ID = 100;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(EnterFuncId);
        oprot.WriteFieldEnd();
      }
      if (__isset.beforeShowLimitId) {
        field.Name = "beforeShowLimitId";
        field.Type = TType.I32;
        field.ID = 101;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(BeforeShowLimitId);
        oprot.WriteFieldEnd();
      }
      if (__isset.beforeShowFuncId) {
        field.Name = "beforeShowFuncId";
        field.Type = TType.I32;
        field.ID = 102;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(BeforeShowFuncId);
        oprot.WriteFieldEnd();
      }
      if (__isset.loseLimitId) {
        field.Name = "loseLimitId";
        field.Type = TType.I32;
        field.ID = 110;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(LoseLimitId);
        oprot.WriteFieldEnd();
      }
      if (__isset.loseFuncId) {
        field.Name = "loseFuncId";
        field.Type = TType.I32;
        field.ID = 120;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(LoseFuncId);
        oprot.WriteFieldEnd();
      }
      if (__isset.winLimitId) {
        field.Name = "winLimitId";
        field.Type = TType.I32;
        field.ID = 130;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(WinLimitId);
        oprot.WriteFieldEnd();
      }
      if (__isset.winFuncId) {
        field.Name = "winFuncId";
        field.Type = TType.I32;
        field.ID = 140;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(WinFuncId);
        oprot.WriteFieldEnd();
      }
      if (DropIdList != null && __isset.dropIdList) {
        field.Name = "dropIdList";
        field.Type = TType.List;
        field.ID = 150;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, DropIdList.Count));
          foreach (int _iter110 in DropIdList)
          {
            oprot.WriteI32(_iter110);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (ShowDropItemIdList != null && __isset.showDropItemIdList) {
        field.Name = "showDropItemIdList";
        field.Type = TType.List;
        field.ID = 160;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, ShowDropItemIdList.Count));
          foreach (int _iter111 in ShowDropItemIdList)
          {
            oprot.WriteI32(_iter111);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (ShowMonsterIdList != null && __isset.showMonsterIdList) {
        field.Name = "showMonsterIdList";
        field.Type = TType.List;
        field.ID = 170;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, ShowMonsterIdList.Count));
          foreach (int _iter112 in ShowMonsterIdList)
          {
            oprot.WriteI32(_iter112);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.starBit4CountId) {
        field.Name = "starBit4CountId";
        field.Type = TType.I32;
        field.ID = 180;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(StarBit4CountId);
        oprot.WriteFieldEnd();
      }
      if (__isset.weatherPlanId) {
        field.Name = "weatherPlanId";
        field.Type = TType.I32;
        field.ID = 190;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(WeatherPlanId);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("StageConfig(");
      sb.Append("Id: ");
      sb.Append(Id);
      sb.Append(",NextStageId: ");
      sb.Append(NextStageId);
      sb.Append(",NameMessageId: ");
      sb.Append(NameMessageId);
      sb.Append(",DescMessageId: ");
      sb.Append(DescMessageId);
      sb.Append(",HelpMessageId: ");
      sb.Append(HelpMessageId);
      sb.Append(",TargetMessageId: ");
      sb.Append(TargetMessageId);
      sb.Append(",ChapterId: ");
      sb.Append(ChapterId);
      sb.Append(",StageMaprResource: ");
      sb.Append(StageMaprResource);
      sb.Append(",BeforeStoryId: ");
      sb.Append(BeforeStoryId);
      sb.Append(",AfterStoryId: ");
      sb.Append(AfterStoryId);
      sb.Append(",BackgroundPic: ");
      sb.Append(BackgroundPic);
      sb.Append(",IconPic: ");
      sb.Append(IconPic);
      sb.Append(",IconPicPass: ");
      sb.Append(IconPicPass);
      sb.Append(",QuickWinLimitId: ");
      sb.Append(QuickWinLimitId);
      sb.Append(",QuickWinFuncId: ");
      sb.Append(QuickWinFuncId);
      sb.Append(",EnterLimitId: ");
      sb.Append(EnterLimitId);
      sb.Append(",EnterFuncId: ");
      sb.Append(EnterFuncId);
      sb.Append(",BeforeShowLimitId: ");
      sb.Append(BeforeShowLimitId);
      sb.Append(",BeforeShowFuncId: ");
      sb.Append(BeforeShowFuncId);
      sb.Append(",LoseLimitId: ");
      sb.Append(LoseLimitId);
      sb.Append(",LoseFuncId: ");
      sb.Append(LoseFuncId);
      sb.Append(",WinLimitId: ");
      sb.Append(WinLimitId);
      sb.Append(",WinFuncId: ");
      sb.Append(WinFuncId);
      sb.Append(",DropIdList: ");
      sb.Append(DropIdList);
      sb.Append(",ShowDropItemIdList: ");
      sb.Append(ShowDropItemIdList);
      sb.Append(",ShowMonsterIdList: ");
      sb.Append(ShowMonsterIdList);
      sb.Append(",StarBit4CountId: ");
      sb.Append(StarBit4CountId);
      sb.Append(",WeatherPlanId: ");
      sb.Append(WeatherPlanId);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
