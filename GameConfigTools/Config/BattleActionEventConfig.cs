/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Config
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class BattleActionEventConfig : TBase
  {
    private int _actionId;
    private int _eventFrame;
    private int _frameLimitId;
    private int _frameFuncId;

    public int ActionId
    {
      get
      {
        return _actionId;
      }
      set
      {
        __isset.actionId = true;
        this._actionId = value;
      }
    }

    public int EventFrame
    {
      get
      {
        return _eventFrame;
      }
      set
      {
        __isset.eventFrame = true;
        this._eventFrame = value;
      }
    }

    public int FrameLimitId
    {
      get
      {
        return _frameLimitId;
      }
      set
      {
        __isset.frameLimitId = true;
        this._frameLimitId = value;
      }
    }

    public int FrameFuncId
    {
      get
      {
        return _frameFuncId;
      }
      set
      {
        __isset.frameFuncId = true;
        this._frameFuncId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool actionId;
      public bool eventFrame;
      public bool frameLimitId;
      public bool frameFuncId;
    }

    public BattleActionEventConfig() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 10:
            if (field.Type == TType.I32) {
              ActionId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.I32) {
              EventFrame = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.I32) {
              FrameLimitId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 40:
            if (field.Type == TType.I32) {
              FrameFuncId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("BattleActionEventConfig");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.actionId) {
        field.Name = "actionId";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ActionId);
        oprot.WriteFieldEnd();
      }
      if (__isset.eventFrame) {
        field.Name = "eventFrame";
        field.Type = TType.I32;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(EventFrame);
        oprot.WriteFieldEnd();
      }
      if (__isset.frameLimitId) {
        field.Name = "frameLimitId";
        field.Type = TType.I32;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(FrameLimitId);
        oprot.WriteFieldEnd();
      }
      if (__isset.frameFuncId) {
        field.Name = "frameFuncId";
        field.Type = TType.I32;
        field.ID = 40;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(FrameFuncId);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("BattleActionEventConfig(");
      sb.Append("ActionId: ");
      sb.Append(ActionId);
      sb.Append(",EventFrame: ");
      sb.Append(EventFrame);
      sb.Append(",FrameLimitId: ");
      sb.Append(FrameLimitId);
      sb.Append(",FrameFuncId: ");
      sb.Append(FrameFuncId);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
