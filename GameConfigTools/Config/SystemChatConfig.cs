/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Config
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SystemChatConfig : TBase
  {
    private int _chatSpeakerStayTime;
    private Dictionary<int, ChatChannelConfig> _chatChannelConfigMap;

    public int ChatSpeakerStayTime
    {
      get
      {
        return _chatSpeakerStayTime;
      }
      set
      {
        __isset.chatSpeakerStayTime = true;
        this._chatSpeakerStayTime = value;
      }
    }

    public Dictionary<int, ChatChannelConfig> ChatChannelConfigMap
    {
      get
      {
        return _chatChannelConfigMap;
      }
      set
      {
        __isset.chatChannelConfigMap = true;
        this._chatChannelConfigMap = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool chatSpeakerStayTime;
      public bool chatChannelConfigMap;
    }

    public SystemChatConfig() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 10:
            if (field.Type == TType.I32) {
              ChatSpeakerStayTime = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.Map) {
              {
                ChatChannelConfigMap = new Dictionary<int, ChatChannelConfig>();
                TMap _map24 = iprot.ReadMapBegin();
                for( int _i25 = 0; _i25 < _map24.Count; ++_i25)
                {
                  int _key26;
                  ChatChannelConfig _val27;
                  _key26 = iprot.ReadI32();
                  _val27 = new ChatChannelConfig();
                  _val27.Read(iprot);
                  ChatChannelConfigMap[_key26] = _val27;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("SystemChatConfig");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.chatSpeakerStayTime) {
        field.Name = "chatSpeakerStayTime";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ChatSpeakerStayTime);
        oprot.WriteFieldEnd();
      }
      if (ChatChannelConfigMap != null && __isset.chatChannelConfigMap) {
        field.Name = "chatChannelConfigMap";
        field.Type = TType.Map;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I32, TType.Struct, ChatChannelConfigMap.Count));
          foreach (int _iter28 in ChatChannelConfigMap.Keys)
          {
            oprot.WriteI32(_iter28);
            ChatChannelConfigMap[_iter28].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("SystemChatConfig(");
      sb.Append("ChatSpeakerStayTime: ");
      sb.Append(ChatSpeakerStayTime);
      sb.Append(",ChatChannelConfigMap: ");
      sb.Append(ChatChannelConfigMap);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
