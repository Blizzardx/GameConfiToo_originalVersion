/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Config
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class HeroStarLevelUpConfig : TBase
  {
    private short _needHeroShard;
    private short _decomposeHeroShard;
    private int _needGold;

    public short NeedHeroShard
    {
      get
      {
        return _needHeroShard;
      }
      set
      {
        __isset.needHeroShard = true;
        this._needHeroShard = value;
      }
    }

    public short DecomposeHeroShard
    {
      get
      {
        return _decomposeHeroShard;
      }
      set
      {
        __isset.decomposeHeroShard = true;
        this._decomposeHeroShard = value;
      }
    }

    public int NeedGold
    {
      get
      {
        return _needGold;
      }
      set
      {
        __isset.needGold = true;
        this._needGold = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool needHeroShard;
      public bool decomposeHeroShard;
      public bool needGold;
    }

    public HeroStarLevelUpConfig() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 10:
            if (field.Type == TType.I16) {
              NeedHeroShard = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.I16) {
              DecomposeHeroShard = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.I32) {
              NeedGold = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("HeroStarLevelUpConfig");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.needHeroShard) {
        field.Name = "needHeroShard";
        field.Type = TType.I16;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(NeedHeroShard);
        oprot.WriteFieldEnd();
      }
      if (__isset.decomposeHeroShard) {
        field.Name = "decomposeHeroShard";
        field.Type = TType.I16;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(DecomposeHeroShard);
        oprot.WriteFieldEnd();
      }
      if (__isset.needGold) {
        field.Name = "needGold";
        field.Type = TType.I32;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NeedGold);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("HeroStarLevelUpConfig(");
      sb.Append("NeedHeroShard: ");
      sb.Append(NeedHeroShard);
      sb.Append(",DecomposeHeroShard: ");
      sb.Append(DecomposeHeroShard);
      sb.Append(",NeedGold: ");
      sb.Append(NeedGold);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
