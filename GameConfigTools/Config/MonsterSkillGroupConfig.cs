/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Config
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class MonsterSkillGroupConfig : TBase
  {
    private int _id;
    private List<List<int>> _skillList;

    public int Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public List<List<int>> SkillList
    {
      get
      {
        return _skillList;
      }
      set
      {
        __isset.skillList = true;
        this._skillList = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool skillList;
    }

    public MonsterSkillGroupConfig() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 10:
            if (field.Type == TType.I32) {
              Id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.List) {
              {
                SkillList = new List<List<int>>();
                TList _list126 = iprot.ReadListBegin();
                for( int _i127 = 0; _i127 < _list126.Count; ++_i127)
                {
                  List<int> _elem128 = new List<int>();
                  {
                    _elem128 = new List<int>();
                    TList _list129 = iprot.ReadListBegin();
                    for( int _i130 = 0; _i130 < _list129.Count; ++_i130)
                    {
                      int _elem131 = 0;
                      _elem131 = iprot.ReadI32();
                      _elem128.Add(_elem131);
                    }
                    iprot.ReadListEnd();
                  }
                  SkillList.Add(_elem128);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("MonsterSkillGroupConfig");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.id) {
        field.Name = "id";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Id);
        oprot.WriteFieldEnd();
      }
      if (SkillList != null && __isset.skillList) {
        field.Name = "skillList";
        field.Type = TType.List;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.List, SkillList.Count));
          foreach (List<int> _iter132 in SkillList)
          {
            {
              oprot.WriteListBegin(new TList(TType.I32, _iter132.Count));
              foreach (int _iter133 in _iter132)
              {
                oprot.WriteI32(_iter133);
              }
              oprot.WriteListEnd();
            }
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("MonsterSkillGroupConfig(");
      sb.Append("Id: ");
      sb.Append(Id);
      sb.Append(",SkillList: ");
      sb.Append(SkillList);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
