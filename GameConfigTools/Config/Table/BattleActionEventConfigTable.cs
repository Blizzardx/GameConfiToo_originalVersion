/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Config.Table
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class BattleActionEventConfigTable : TBase
  {
    private Dictionary<int, List<Config.BattleActionEventConfig>> _battleActionEventConfigMap;

    public Dictionary<int, List<Config.BattleActionEventConfig>> BattleActionEventConfigMap
    {
      get
      {
        return _battleActionEventConfigMap;
      }
      set
      {
        __isset.battleActionEventConfigMap = true;
        this._battleActionEventConfigMap = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool battleActionEventConfigMap;
    }

    public BattleActionEventConfigTable() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 10:
            if (field.Type == TType.Map) {
              {
                BattleActionEventConfigMap = new Dictionary<int, List<Config.BattleActionEventConfig>>();
                TMap _map72 = iprot.ReadMapBegin();
                for( int _i73 = 0; _i73 < _map72.Count; ++_i73)
                {
                  int _key74;
                  List<Config.BattleActionEventConfig> _val75;
                  _key74 = iprot.ReadI32();
                  {
                    _val75 = new List<Config.BattleActionEventConfig>();
                    TList _list76 = iprot.ReadListBegin();
                    for( int _i77 = 0; _i77 < _list76.Count; ++_i77)
                    {
                      Config.BattleActionEventConfig _elem78 = new Config.BattleActionEventConfig();
                      _elem78 = new Config.BattleActionEventConfig();
                      _elem78.Read(iprot);
                      _val75.Add(_elem78);
                    }
                    iprot.ReadListEnd();
                  }
                  BattleActionEventConfigMap[_key74] = _val75;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("BattleActionEventConfigTable");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (BattleActionEventConfigMap != null && __isset.battleActionEventConfigMap) {
        field.Name = "battleActionEventConfigMap";
        field.Type = TType.Map;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I32, TType.List, BattleActionEventConfigMap.Count));
          foreach (int _iter79 in BattleActionEventConfigMap.Keys)
          {
            oprot.WriteI32(_iter79);
            {
              oprot.WriteListBegin(new TList(TType.Struct, BattleActionEventConfigMap[_iter79].Count));
              foreach (Config.BattleActionEventConfig _iter80 in BattleActionEventConfigMap[_iter79])
              {
                _iter80.Write(oprot);
              }
              oprot.WriteListEnd();
            }
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("BattleActionEventConfigTable(");
      sb.Append("BattleActionEventConfigMap: ");
      sb.Append(BattleActionEventConfigMap);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
