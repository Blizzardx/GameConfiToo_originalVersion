/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Config.Table
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ScenePreloadAssetConfigTable : TBase
  {
    private Dictionary<string, List<string>> _preloadAssetList;

    public Dictionary<string, List<string>> PreloadAssetList
    {
      get
      {
        return _preloadAssetList;
      }
      set
      {
        __isset.preloadAssetList = true;
        this._preloadAssetList = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool preloadAssetList;
    }

    public ScenePreloadAssetConfigTable() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 10:
            if (field.Type == TType.Map) {
              {
                PreloadAssetList = new Dictionary<string, List<string>>();
                TMap _map452 = iprot.ReadMapBegin();
                for( int _i453 = 0; _i453 < _map452.Count; ++_i453)
                {
                  string _key454;
                  List<string> _val455;
                  _key454 = iprot.ReadString();
                  {
                    _val455 = new List<string>();
                    TList _list456 = iprot.ReadListBegin();
                    for( int _i457 = 0; _i457 < _list456.Count; ++_i457)
                    {
                      string _elem458 = null;
                      _elem458 = iprot.ReadString();
                      _val455.Add(_elem458);
                    }
                    iprot.ReadListEnd();
                  }
                  PreloadAssetList[_key454] = _val455;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ScenePreloadAssetConfigTable");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (PreloadAssetList != null && __isset.preloadAssetList) {
        field.Name = "preloadAssetList";
        field.Type = TType.Map;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.List, PreloadAssetList.Count));
          foreach (string _iter459 in PreloadAssetList.Keys)
          {
            oprot.WriteString(_iter459);
            {
              oprot.WriteListBegin(new TList(TType.String, PreloadAssetList[_iter459].Count));
              foreach (string _iter460 in PreloadAssetList[_iter459])
              {
                oprot.WriteString(_iter460);
              }
              oprot.WriteListEnd();
            }
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ScenePreloadAssetConfigTable(");
      sb.Append("PreloadAssetList: ");
      sb.Append(PreloadAssetList);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
