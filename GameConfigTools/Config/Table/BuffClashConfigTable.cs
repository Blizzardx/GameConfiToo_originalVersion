/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Config.Table
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class BuffClashConfigTable : TBase
  {
    private Dictionary<sbyte, Dictionary<sbyte, sbyte>> _buffClashConfigMap;

    /// <summary>
    /// key:待加的buff  value:  k:碰撞类型集合，判断时检查身上的buff是否在集合中存在
    /// value: 碰撞的结果，1、替换，2、叠加，3、无效
    /// 
    /// </summary>
    public Dictionary<sbyte, Dictionary<sbyte, sbyte>> BuffClashConfigMap
    {
      get
      {
        return _buffClashConfigMap;
      }
      set
      {
        __isset.buffClashConfigMap = true;
        this._buffClashConfigMap = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool buffClashConfigMap;
    }

    public BuffClashConfigTable() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Map) {
              {
                BuffClashConfigMap = new Dictionary<sbyte, Dictionary<sbyte, sbyte>>();
                TMap _map53 = iprot.ReadMapBegin();
                for( int _i54 = 0; _i54 < _map53.Count; ++_i54)
                {
                  sbyte _key55;
                  Dictionary<sbyte, sbyte> _val56;
                  _key55 = iprot.ReadByte();
                  {
                    _val56 = new Dictionary<sbyte, sbyte>();
                    TMap _map57 = iprot.ReadMapBegin();
                    for( int _i58 = 0; _i58 < _map57.Count; ++_i58)
                    {
                      sbyte _key59;
                      sbyte _val60;
                      _key59 = iprot.ReadByte();
                      _val60 = iprot.ReadByte();
                      _val56[_key59] = _val60;
                    }
                    iprot.ReadMapEnd();
                  }
                  BuffClashConfigMap[_key55] = _val56;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("BuffClashConfigTable");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (BuffClashConfigMap != null && __isset.buffClashConfigMap) {
        field.Name = "buffClashConfigMap";
        field.Type = TType.Map;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.Byte, TType.Map, BuffClashConfigMap.Count));
          foreach (sbyte _iter61 in BuffClashConfigMap.Keys)
          {
            oprot.WriteByte(_iter61);
            {
              oprot.WriteMapBegin(new TMap(TType.Byte, TType.Byte, BuffClashConfigMap[_iter61].Count));
              foreach (sbyte _iter62 in BuffClashConfigMap[_iter61].Keys)
              {
                oprot.WriteByte(_iter62);
                oprot.WriteByte(BuffClashConfigMap[_iter61][_iter62]);
              }
              oprot.WriteMapEnd();
            }
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("BuffClashConfigTable(");
      sb.Append("BuffClashConfigMap: ");
      sb.Append(BuffClashConfigMap);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
