/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Config.Table
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class EndlessScenceConfigTable : TBase
  {
    private Dictionary<string, List<Config.EndlessScenceConfig>> _endlessScenceConfigMap;

    /// <summary>
    /// key: styleId_difficulty
    /// </summary>
    public Dictionary<string, List<Config.EndlessScenceConfig>> EndlessScenceConfigMap
    {
      get
      {
        return _endlessScenceConfigMap;
      }
      set
      {
        __isset.endlessScenceConfigMap = true;
        this._endlessScenceConfigMap = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool endlessScenceConfigMap;
    }

    public EndlessScenceConfigTable() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Map) {
              {
                EndlessScenceConfigMap = new Dictionary<string, List<Config.EndlessScenceConfig>>();
                TMap _map368 = iprot.ReadMapBegin();
                for( int _i369 = 0; _i369 < _map368.Count; ++_i369)
                {
                  string _key370;
                  List<Config.EndlessScenceConfig> _val371;
                  _key370 = iprot.ReadString();
                  {
                    _val371 = new List<Config.EndlessScenceConfig>();
                    TList _list372 = iprot.ReadListBegin();
                    for( int _i373 = 0; _i373 < _list372.Count; ++_i373)
                    {
                      Config.EndlessScenceConfig _elem374 = new Config.EndlessScenceConfig();
                      _elem374 = new Config.EndlessScenceConfig();
                      _elem374.Read(iprot);
                      _val371.Add(_elem374);
                    }
                    iprot.ReadListEnd();
                  }
                  EndlessScenceConfigMap[_key370] = _val371;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("EndlessScenceConfigTable");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (EndlessScenceConfigMap != null && __isset.endlessScenceConfigMap) {
        field.Name = "endlessScenceConfigMap";
        field.Type = TType.Map;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.List, EndlessScenceConfigMap.Count));
          foreach (string _iter375 in EndlessScenceConfigMap.Keys)
          {
            oprot.WriteString(_iter375);
            {
              oprot.WriteListBegin(new TList(TType.Struct, EndlessScenceConfigMap[_iter375].Count));
              foreach (Config.EndlessScenceConfig _iter376 in EndlessScenceConfigMap[_iter375])
              {
                _iter376.Write(oprot);
              }
              oprot.WriteListEnd();
            }
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("EndlessScenceConfigTable(");
      sb.Append("EndlessScenceConfigMap: ");
      sb.Append(EndlessScenceConfigMap);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
