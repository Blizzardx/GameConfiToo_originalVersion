/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Config.Table
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CadPlayerAttrConfigTable : TBase
  {
    private Dictionary<int, Dictionary<int, Config.CadPlayerAttrConfig>> _cadPlayerAttrConfigMap;

    public Dictionary<int, Dictionary<int, Config.CadPlayerAttrConfig>> CadPlayerAttrConfigMap
    {
      get
      {
        return _cadPlayerAttrConfigMap;
      }
      set
      {
        __isset.cadPlayerAttrConfigMap = true;
        this._cadPlayerAttrConfigMap = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool cadPlayerAttrConfigMap;
    }

    public CadPlayerAttrConfigTable() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Map) {
              {
                CadPlayerAttrConfigMap = new Dictionary<int, Dictionary<int, Config.CadPlayerAttrConfig>>();
                TMap _map318 = iprot.ReadMapBegin();
                for( int _i319 = 0; _i319 < _map318.Count; ++_i319)
                {
                  int _key320;
                  Dictionary<int, Config.CadPlayerAttrConfig> _val321;
                  _key320 = iprot.ReadI32();
                  {
                    _val321 = new Dictionary<int, Config.CadPlayerAttrConfig>();
                    TMap _map322 = iprot.ReadMapBegin();
                    for( int _i323 = 0; _i323 < _map322.Count; ++_i323)
                    {
                      int _key324;
                      Config.CadPlayerAttrConfig _val325;
                      _key324 = iprot.ReadI32();
                      _val325 = new Config.CadPlayerAttrConfig();
                      _val325.Read(iprot);
                      _val321[_key324] = _val325;
                    }
                    iprot.ReadMapEnd();
                  }
                  CadPlayerAttrConfigMap[_key320] = _val321;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("CadPlayerAttrConfigTable");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (CadPlayerAttrConfigMap != null && __isset.cadPlayerAttrConfigMap) {
        field.Name = "cadPlayerAttrConfigMap";
        field.Type = TType.Map;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I32, TType.Map, CadPlayerAttrConfigMap.Count));
          foreach (int _iter326 in CadPlayerAttrConfigMap.Keys)
          {
            oprot.WriteI32(_iter326);
            {
              oprot.WriteMapBegin(new TMap(TType.I32, TType.Struct, CadPlayerAttrConfigMap[_iter326].Count));
              foreach (int _iter327 in CadPlayerAttrConfigMap[_iter326].Keys)
              {
                oprot.WriteI32(_iter327);
                CadPlayerAttrConfigMap[_iter326][_iter327].Write(oprot);
              }
              oprot.WriteMapEnd();
            }
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("CadPlayerAttrConfigTable(");
      sb.Append("CadPlayerAttrConfigMap: ");
      sb.Append(CadPlayerAttrConfigMap);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
