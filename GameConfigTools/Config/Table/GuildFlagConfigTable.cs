/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Config.Table
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class GuildFlagConfigTable : TBase
  {
    private Dictionary<int, Config.GuildFlagConfig> _iconConfigMap;
    private Dictionary<int, Config.GuildFlagConfig> _bgConfigMap;

    public Dictionary<int, Config.GuildFlagConfig> IconConfigMap
    {
      get
      {
        return _iconConfigMap;
      }
      set
      {
        __isset.iconConfigMap = true;
        this._iconConfigMap = value;
      }
    }

    public Dictionary<int, Config.GuildFlagConfig> BgConfigMap
    {
      get
      {
        return _bgConfigMap;
      }
      set
      {
        __isset.bgConfigMap = true;
        this._bgConfigMap = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool iconConfigMap;
      public bool bgConfigMap;
    }

    public GuildFlagConfigTable() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Map) {
              {
                IconConfigMap = new Dictionary<int, Config.GuildFlagConfig>();
                TMap _map417 = iprot.ReadMapBegin();
                for( int _i418 = 0; _i418 < _map417.Count; ++_i418)
                {
                  int _key419;
                  Config.GuildFlagConfig _val420;
                  _key419 = iprot.ReadI32();
                  _val420 = new Config.GuildFlagConfig();
                  _val420.Read(iprot);
                  IconConfigMap[_key419] = _val420;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Map) {
              {
                BgConfigMap = new Dictionary<int, Config.GuildFlagConfig>();
                TMap _map421 = iprot.ReadMapBegin();
                for( int _i422 = 0; _i422 < _map421.Count; ++_i422)
                {
                  int _key423;
                  Config.GuildFlagConfig _val424;
                  _key423 = iprot.ReadI32();
                  _val424 = new Config.GuildFlagConfig();
                  _val424.Read(iprot);
                  BgConfigMap[_key423] = _val424;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("GuildFlagConfigTable");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (IconConfigMap != null && __isset.iconConfigMap) {
        field.Name = "iconConfigMap";
        field.Type = TType.Map;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I32, TType.Struct, IconConfigMap.Count));
          foreach (int _iter425 in IconConfigMap.Keys)
          {
            oprot.WriteI32(_iter425);
            IconConfigMap[_iter425].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (BgConfigMap != null && __isset.bgConfigMap) {
        field.Name = "bgConfigMap";
        field.Type = TType.Map;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I32, TType.Struct, BgConfigMap.Count));
          foreach (int _iter426 in BgConfigMap.Keys)
          {
            oprot.WriteI32(_iter426);
            BgConfigMap[_iter426].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("GuildFlagConfigTable(");
      sb.Append("IconConfigMap: ");
      sb.Append(IconConfigMap);
      sb.Append(",BgConfigMap: ");
      sb.Append(BgConfigMap);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
