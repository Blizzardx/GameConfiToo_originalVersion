/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Config.Table
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SpellCardLevelupConfigTable : TBase
  {
    private Dictionary<int, List<Config.SpellCardLevelupConfig>> _spellcardLevelupConfigMap;

    public Dictionary<int, List<Config.SpellCardLevelupConfig>> SpellcardLevelupConfigMap
    {
      get
      {
        return _spellcardLevelupConfigMap;
      }
      set
      {
        __isset.spellcardLevelupConfigMap = true;
        this._spellcardLevelupConfigMap = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool spellcardLevelupConfigMap;
    }

    public SpellCardLevelupConfigTable() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Map) {
              {
                SpellcardLevelupConfigMap = new Dictionary<int, List<Config.SpellCardLevelupConfig>>();
                TMap _map250 = iprot.ReadMapBegin();
                for( int _i251 = 0; _i251 < _map250.Count; ++_i251)
                {
                  int _key252;
                  List<Config.SpellCardLevelupConfig> _val253;
                  _key252 = iprot.ReadI32();
                  {
                    _val253 = new List<Config.SpellCardLevelupConfig>();
                    TList _list254 = iprot.ReadListBegin();
                    for( int _i255 = 0; _i255 < _list254.Count; ++_i255)
                    {
                      Config.SpellCardLevelupConfig _elem256 = new Config.SpellCardLevelupConfig();
                      _elem256 = new Config.SpellCardLevelupConfig();
                      _elem256.Read(iprot);
                      _val253.Add(_elem256);
                    }
                    iprot.ReadListEnd();
                  }
                  SpellcardLevelupConfigMap[_key252] = _val253;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("SpellCardLevelupConfigTable");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (SpellcardLevelupConfigMap != null && __isset.spellcardLevelupConfigMap) {
        field.Name = "spellcardLevelupConfigMap";
        field.Type = TType.Map;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I32, TType.List, SpellcardLevelupConfigMap.Count));
          foreach (int _iter257 in SpellcardLevelupConfigMap.Keys)
          {
            oprot.WriteI32(_iter257);
            {
              oprot.WriteListBegin(new TList(TType.Struct, SpellcardLevelupConfigMap[_iter257].Count));
              foreach (Config.SpellCardLevelupConfig _iter258 in SpellcardLevelupConfigMap[_iter257])
              {
                _iter258.Write(oprot);
              }
              oprot.WriteListEnd();
            }
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("SpellCardLevelupConfigTable(");
      sb.Append("SpellcardLevelupConfigMap: ");
      sb.Append(SpellcardLevelupConfigMap);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
