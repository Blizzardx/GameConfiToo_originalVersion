/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Config.Table
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class AeroLevelUpConfigTable : TBase
  {
    private Dictionary<int, Dictionary<int, Config.AeroLevelUpConfig>> _aeroLevelUpConfigMap;

    public Dictionary<int, Dictionary<int, Config.AeroLevelUpConfig>> AeroLevelUpConfigMap
    {
      get
      {
        return _aeroLevelUpConfigMap;
      }
      set
      {
        __isset.aeroLevelUpConfigMap = true;
        this._aeroLevelUpConfigMap = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool aeroLevelUpConfigMap;
    }

    public AeroLevelUpConfigTable() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Map) {
              {
                AeroLevelUpConfigMap = new Dictionary<int, Dictionary<int, Config.AeroLevelUpConfig>>();
                TMap _map283 = iprot.ReadMapBegin();
                for( int _i284 = 0; _i284 < _map283.Count; ++_i284)
                {
                  int _key285;
                  Dictionary<int, Config.AeroLevelUpConfig> _val286;
                  _key285 = iprot.ReadI32();
                  {
                    _val286 = new Dictionary<int, Config.AeroLevelUpConfig>();
                    TMap _map287 = iprot.ReadMapBegin();
                    for( int _i288 = 0; _i288 < _map287.Count; ++_i288)
                    {
                      int _key289;
                      Config.AeroLevelUpConfig _val290;
                      _key289 = iprot.ReadI32();
                      _val290 = new Config.AeroLevelUpConfig();
                      _val290.Read(iprot);
                      _val286[_key289] = _val290;
                    }
                    iprot.ReadMapEnd();
                  }
                  AeroLevelUpConfigMap[_key285] = _val286;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("AeroLevelUpConfigTable");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (AeroLevelUpConfigMap != null && __isset.aeroLevelUpConfigMap) {
        field.Name = "aeroLevelUpConfigMap";
        field.Type = TType.Map;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I32, TType.Map, AeroLevelUpConfigMap.Count));
          foreach (int _iter291 in AeroLevelUpConfigMap.Keys)
          {
            oprot.WriteI32(_iter291);
            {
              oprot.WriteMapBegin(new TMap(TType.I32, TType.Struct, AeroLevelUpConfigMap[_iter291].Count));
              foreach (int _iter292 in AeroLevelUpConfigMap[_iter291].Keys)
              {
                oprot.WriteI32(_iter292);
                AeroLevelUpConfigMap[_iter291][_iter292].Write(oprot);
              }
              oprot.WriteMapEnd();
            }
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("AeroLevelUpConfigTable(");
      sb.Append("AeroLevelUpConfigMap: ");
      sb.Append(AeroLevelUpConfigMap);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
