/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Config
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class WeaponAttributeConfig : TBase
  {
    private int _weaponId;
    private int _level;
    private int _normalSkill;
    private int _skill1;
    private int _skill2;
    private List<int> _passiveSkillList;
    private Dictionary<int, int> _attrMap;

    public int WeaponId
    {
      get
      {
        return _weaponId;
      }
      set
      {
        __isset.weaponId = true;
        this._weaponId = value;
      }
    }

    public int Level
    {
      get
      {
        return _level;
      }
      set
      {
        __isset.level = true;
        this._level = value;
      }
    }

    public int NormalSkill
    {
      get
      {
        return _normalSkill;
      }
      set
      {
        __isset.normalSkill = true;
        this._normalSkill = value;
      }
    }

    public int Skill1
    {
      get
      {
        return _skill1;
      }
      set
      {
        __isset.skill1 = true;
        this._skill1 = value;
      }
    }

    public int Skill2
    {
      get
      {
        return _skill2;
      }
      set
      {
        __isset.skill2 = true;
        this._skill2 = value;
      }
    }

    public List<int> PassiveSkillList
    {
      get
      {
        return _passiveSkillList;
      }
      set
      {
        __isset.passiveSkillList = true;
        this._passiveSkillList = value;
      }
    }

    public Dictionary<int, int> AttrMap
    {
      get
      {
        return _attrMap;
      }
      set
      {
        __isset.attrMap = true;
        this._attrMap = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool weaponId;
      public bool level;
      public bool normalSkill;
      public bool skill1;
      public bool skill2;
      public bool passiveSkillList;
      public bool attrMap;
    }

    public WeaponAttributeConfig() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 10:
            if (field.Type == TType.I32) {
              WeaponId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.I32) {
              Level = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.I32) {
              NormalSkill = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 40:
            if (field.Type == TType.I32) {
              Skill1 = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 50:
            if (field.Type == TType.I32) {
              Skill2 = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 60:
            if (field.Type == TType.List) {
              {
                PassiveSkillList = new List<int>();
                TList _list234 = iprot.ReadListBegin();
                for( int _i235 = 0; _i235 < _list234.Count; ++_i235)
                {
                  int _elem236 = 0;
                  _elem236 = iprot.ReadI32();
                  PassiveSkillList.Add(_elem236);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 70:
            if (field.Type == TType.Map) {
              {
                AttrMap = new Dictionary<int, int>();
                TMap _map237 = iprot.ReadMapBegin();
                for( int _i238 = 0; _i238 < _map237.Count; ++_i238)
                {
                  int _key239;
                  int _val240;
                  _key239 = iprot.ReadI32();
                  _val240 = iprot.ReadI32();
                  AttrMap[_key239] = _val240;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("WeaponAttributeConfig");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.weaponId) {
        field.Name = "weaponId";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(WeaponId);
        oprot.WriteFieldEnd();
      }
      if (__isset.level) {
        field.Name = "level";
        field.Type = TType.I32;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Level);
        oprot.WriteFieldEnd();
      }
      if (__isset.normalSkill) {
        field.Name = "normalSkill";
        field.Type = TType.I32;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NormalSkill);
        oprot.WriteFieldEnd();
      }
      if (__isset.skill1) {
        field.Name = "skill1";
        field.Type = TType.I32;
        field.ID = 40;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Skill1);
        oprot.WriteFieldEnd();
      }
      if (__isset.skill2) {
        field.Name = "skill2";
        field.Type = TType.I32;
        field.ID = 50;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Skill2);
        oprot.WriteFieldEnd();
      }
      if (PassiveSkillList != null && __isset.passiveSkillList) {
        field.Name = "passiveSkillList";
        field.Type = TType.List;
        field.ID = 60;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, PassiveSkillList.Count));
          foreach (int _iter241 in PassiveSkillList)
          {
            oprot.WriteI32(_iter241);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (AttrMap != null && __isset.attrMap) {
        field.Name = "attrMap";
        field.Type = TType.Map;
        field.ID = 70;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I32, TType.I32, AttrMap.Count));
          foreach (int _iter242 in AttrMap.Keys)
          {
            oprot.WriteI32(_iter242);
            oprot.WriteI32(AttrMap[_iter242]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("WeaponAttributeConfig(");
      sb.Append("WeaponId: ");
      sb.Append(WeaponId);
      sb.Append(",Level: ");
      sb.Append(Level);
      sb.Append(",NormalSkill: ");
      sb.Append(NormalSkill);
      sb.Append(",Skill1: ");
      sb.Append(Skill1);
      sb.Append(",Skill2: ");
      sb.Append(Skill2);
      sb.Append(",PassiveSkillList: ");
      sb.Append(PassiveSkillList);
      sb.Append(",AttrMap: ");
      sb.Append(AttrMap);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
