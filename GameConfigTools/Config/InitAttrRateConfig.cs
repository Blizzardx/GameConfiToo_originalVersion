/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Config
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class InitAttrRateConfig : TBase
  {
    private sbyte _starLevel;
    private sbyte _quality;
    private int _initHp;
    private int _initPhyAtk;
    private int _initPhyDef;
    private int _initMagicAtk;
    private int _initMagicDef;
    private int _initAvo;
    private int _initCri;
    private int _initCriDamage;

    public sbyte StarLevel
    {
      get
      {
        return _starLevel;
      }
      set
      {
        __isset.starLevel = true;
        this._starLevel = value;
      }
    }

    public sbyte Quality
    {
      get
      {
        return _quality;
      }
      set
      {
        __isset.quality = true;
        this._quality = value;
      }
    }

    public int InitHp
    {
      get
      {
        return _initHp;
      }
      set
      {
        __isset.initHp = true;
        this._initHp = value;
      }
    }

    public int InitPhyAtk
    {
      get
      {
        return _initPhyAtk;
      }
      set
      {
        __isset.initPhyAtk = true;
        this._initPhyAtk = value;
      }
    }

    public int InitPhyDef
    {
      get
      {
        return _initPhyDef;
      }
      set
      {
        __isset.initPhyDef = true;
        this._initPhyDef = value;
      }
    }

    public int InitMagicAtk
    {
      get
      {
        return _initMagicAtk;
      }
      set
      {
        __isset.initMagicAtk = true;
        this._initMagicAtk = value;
      }
    }

    public int InitMagicDef
    {
      get
      {
        return _initMagicDef;
      }
      set
      {
        __isset.initMagicDef = true;
        this._initMagicDef = value;
      }
    }

    public int InitAvo
    {
      get
      {
        return _initAvo;
      }
      set
      {
        __isset.initAvo = true;
        this._initAvo = value;
      }
    }

    public int InitCri
    {
      get
      {
        return _initCri;
      }
      set
      {
        __isset.initCri = true;
        this._initCri = value;
      }
    }

    public int InitCriDamage
    {
      get
      {
        return _initCriDamage;
      }
      set
      {
        __isset.initCriDamage = true;
        this._initCriDamage = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool starLevel;
      public bool quality;
      public bool initHp;
      public bool initPhyAtk;
      public bool initPhyDef;
      public bool initMagicAtk;
      public bool initMagicDef;
      public bool initAvo;
      public bool initCri;
      public bool initCriDamage;
    }

    public InitAttrRateConfig() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 10:
            if (field.Type == TType.Byte) {
              StarLevel = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.Byte) {
              Quality = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.I32) {
              InitHp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 40:
            if (field.Type == TType.I32) {
              InitPhyAtk = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 50:
            if (field.Type == TType.I32) {
              InitPhyDef = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 60:
            if (field.Type == TType.I32) {
              InitMagicAtk = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 70:
            if (field.Type == TType.I32) {
              InitMagicDef = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 80:
            if (field.Type == TType.I32) {
              InitAvo = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 90:
            if (field.Type == TType.I32) {
              InitCri = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 100:
            if (field.Type == TType.I32) {
              InitCriDamage = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("InitAttrRateConfig");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.starLevel) {
        field.Name = "starLevel";
        field.Type = TType.Byte;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(StarLevel);
        oprot.WriteFieldEnd();
      }
      if (__isset.quality) {
        field.Name = "quality";
        field.Type = TType.Byte;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Quality);
        oprot.WriteFieldEnd();
      }
      if (__isset.initHp) {
        field.Name = "initHp";
        field.Type = TType.I32;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(InitHp);
        oprot.WriteFieldEnd();
      }
      if (__isset.initPhyAtk) {
        field.Name = "initPhyAtk";
        field.Type = TType.I32;
        field.ID = 40;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(InitPhyAtk);
        oprot.WriteFieldEnd();
      }
      if (__isset.initPhyDef) {
        field.Name = "initPhyDef";
        field.Type = TType.I32;
        field.ID = 50;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(InitPhyDef);
        oprot.WriteFieldEnd();
      }
      if (__isset.initMagicAtk) {
        field.Name = "initMagicAtk";
        field.Type = TType.I32;
        field.ID = 60;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(InitMagicAtk);
        oprot.WriteFieldEnd();
      }
      if (__isset.initMagicDef) {
        field.Name = "initMagicDef";
        field.Type = TType.I32;
        field.ID = 70;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(InitMagicDef);
        oprot.WriteFieldEnd();
      }
      if (__isset.initAvo) {
        field.Name = "initAvo";
        field.Type = TType.I32;
        field.ID = 80;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(InitAvo);
        oprot.WriteFieldEnd();
      }
      if (__isset.initCri) {
        field.Name = "initCri";
        field.Type = TType.I32;
        field.ID = 90;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(InitCri);
        oprot.WriteFieldEnd();
      }
      if (__isset.initCriDamage) {
        field.Name = "initCriDamage";
        field.Type = TType.I32;
        field.ID = 100;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(InitCriDamage);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("InitAttrRateConfig(");
      sb.Append("StarLevel: ");
      sb.Append(StarLevel);
      sb.Append(",Quality: ");
      sb.Append(Quality);
      sb.Append(",InitHp: ");
      sb.Append(InitHp);
      sb.Append(",InitPhyAtk: ");
      sb.Append(InitPhyAtk);
      sb.Append(",InitPhyDef: ");
      sb.Append(InitPhyDef);
      sb.Append(",InitMagicAtk: ");
      sb.Append(InitMagicAtk);
      sb.Append(",InitMagicDef: ");
      sb.Append(InitMagicDef);
      sb.Append(",InitAvo: ");
      sb.Append(InitAvo);
      sb.Append(",InitCri: ");
      sb.Append(InitCri);
      sb.Append(",InitCriDamage: ");
      sb.Append(InitCriDamage);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
