/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Config
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class DarkCloudConfig : TBase
  {
    private int _id;
    private int _beginTimeMin;
    private int _beginTimeMax;
    private int _duringTimeMin;
    private int _duringTimeMax;
    private int _firstTaskFuncId;
    private int _secondTaskFuncId;
    private int _secondTaskWaitingTime;
    private int _positionId;
    private string _beginAction;
    private string _thunderAction;
    private string _endAction;
    private int _tickTimeMin;
    private int _ticktimeMax;
    private int _maxCount;

    public int Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public int BeginTimeMin
    {
      get
      {
        return _beginTimeMin;
      }
      set
      {
        __isset.beginTimeMin = true;
        this._beginTimeMin = value;
      }
    }

    public int BeginTimeMax
    {
      get
      {
        return _beginTimeMax;
      }
      set
      {
        __isset.beginTimeMax = true;
        this._beginTimeMax = value;
      }
    }

    public int DuringTimeMin
    {
      get
      {
        return _duringTimeMin;
      }
      set
      {
        __isset.duringTimeMin = true;
        this._duringTimeMin = value;
      }
    }

    public int DuringTimeMax
    {
      get
      {
        return _duringTimeMax;
      }
      set
      {
        __isset.duringTimeMax = true;
        this._duringTimeMax = value;
      }
    }

    public int FirstTaskFuncId
    {
      get
      {
        return _firstTaskFuncId;
      }
      set
      {
        __isset.firstTaskFuncId = true;
        this._firstTaskFuncId = value;
      }
    }

    public int SecondTaskFuncId
    {
      get
      {
        return _secondTaskFuncId;
      }
      set
      {
        __isset.secondTaskFuncId = true;
        this._secondTaskFuncId = value;
      }
    }

    public int SecondTaskWaitingTime
    {
      get
      {
        return _secondTaskWaitingTime;
      }
      set
      {
        __isset.secondTaskWaitingTime = true;
        this._secondTaskWaitingTime = value;
      }
    }

    public int PositionId
    {
      get
      {
        return _positionId;
      }
      set
      {
        __isset.positionId = true;
        this._positionId = value;
      }
    }

    public string BeginAction
    {
      get
      {
        return _beginAction;
      }
      set
      {
        __isset.beginAction = true;
        this._beginAction = value;
      }
    }

    public string ThunderAction
    {
      get
      {
        return _thunderAction;
      }
      set
      {
        __isset.thunderAction = true;
        this._thunderAction = value;
      }
    }

    public string EndAction
    {
      get
      {
        return _endAction;
      }
      set
      {
        __isset.endAction = true;
        this._endAction = value;
      }
    }

    public int TickTimeMin
    {
      get
      {
        return _tickTimeMin;
      }
      set
      {
        __isset.tickTimeMin = true;
        this._tickTimeMin = value;
      }
    }

    public int TicktimeMax
    {
      get
      {
        return _ticktimeMax;
      }
      set
      {
        __isset.ticktimeMax = true;
        this._ticktimeMax = value;
      }
    }

    public int MaxCount
    {
      get
      {
        return _maxCount;
      }
      set
      {
        __isset.maxCount = true;
        this._maxCount = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool beginTimeMin;
      public bool beginTimeMax;
      public bool duringTimeMin;
      public bool duringTimeMax;
      public bool firstTaskFuncId;
      public bool secondTaskFuncId;
      public bool secondTaskWaitingTime;
      public bool positionId;
      public bool beginAction;
      public bool thunderAction;
      public bool endAction;
      public bool tickTimeMin;
      public bool ticktimeMax;
      public bool maxCount;
    }

    public DarkCloudConfig() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 10:
            if (field.Type == TType.I32) {
              Id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.I32) {
              BeginTimeMin = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 21:
            if (field.Type == TType.I32) {
              BeginTimeMax = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.I32) {
              DuringTimeMin = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 31:
            if (field.Type == TType.I32) {
              DuringTimeMax = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 40:
            if (field.Type == TType.I32) {
              FirstTaskFuncId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 41:
            if (field.Type == TType.I32) {
              SecondTaskFuncId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 42:
            if (field.Type == TType.I32) {
              SecondTaskWaitingTime = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 50:
            if (field.Type == TType.I32) {
              PositionId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 60:
            if (field.Type == TType.String) {
              BeginAction = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 70:
            if (field.Type == TType.String) {
              ThunderAction = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 80:
            if (field.Type == TType.String) {
              EndAction = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 90:
            if (field.Type == TType.I32) {
              TickTimeMin = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 100:
            if (field.Type == TType.I32) {
              TicktimeMax = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 110:
            if (field.Type == TType.I32) {
              MaxCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("DarkCloudConfig");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.id) {
        field.Name = "id";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Id);
        oprot.WriteFieldEnd();
      }
      if (__isset.beginTimeMin) {
        field.Name = "beginTimeMin";
        field.Type = TType.I32;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(BeginTimeMin);
        oprot.WriteFieldEnd();
      }
      if (__isset.beginTimeMax) {
        field.Name = "beginTimeMax";
        field.Type = TType.I32;
        field.ID = 21;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(BeginTimeMax);
        oprot.WriteFieldEnd();
      }
      if (__isset.duringTimeMin) {
        field.Name = "duringTimeMin";
        field.Type = TType.I32;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DuringTimeMin);
        oprot.WriteFieldEnd();
      }
      if (__isset.duringTimeMax) {
        field.Name = "duringTimeMax";
        field.Type = TType.I32;
        field.ID = 31;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DuringTimeMax);
        oprot.WriteFieldEnd();
      }
      if (__isset.firstTaskFuncId) {
        field.Name = "firstTaskFuncId";
        field.Type = TType.I32;
        field.ID = 40;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(FirstTaskFuncId);
        oprot.WriteFieldEnd();
      }
      if (__isset.secondTaskFuncId) {
        field.Name = "secondTaskFuncId";
        field.Type = TType.I32;
        field.ID = 41;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SecondTaskFuncId);
        oprot.WriteFieldEnd();
      }
      if (__isset.secondTaskWaitingTime) {
        field.Name = "secondTaskWaitingTime";
        field.Type = TType.I32;
        field.ID = 42;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SecondTaskWaitingTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.positionId) {
        field.Name = "positionId";
        field.Type = TType.I32;
        field.ID = 50;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PositionId);
        oprot.WriteFieldEnd();
      }
      if (BeginAction != null && __isset.beginAction) {
        field.Name = "beginAction";
        field.Type = TType.String;
        field.ID = 60;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(BeginAction);
        oprot.WriteFieldEnd();
      }
      if (ThunderAction != null && __isset.thunderAction) {
        field.Name = "thunderAction";
        field.Type = TType.String;
        field.ID = 70;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ThunderAction);
        oprot.WriteFieldEnd();
      }
      if (EndAction != null && __isset.endAction) {
        field.Name = "endAction";
        field.Type = TType.String;
        field.ID = 80;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(EndAction);
        oprot.WriteFieldEnd();
      }
      if (__isset.tickTimeMin) {
        field.Name = "tickTimeMin";
        field.Type = TType.I32;
        field.ID = 90;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TickTimeMin);
        oprot.WriteFieldEnd();
      }
      if (__isset.ticktimeMax) {
        field.Name = "ticktimeMax";
        field.Type = TType.I32;
        field.ID = 100;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TicktimeMax);
        oprot.WriteFieldEnd();
      }
      if (__isset.maxCount) {
        field.Name = "maxCount";
        field.Type = TType.I32;
        field.ID = 110;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MaxCount);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("DarkCloudConfig(");
      sb.Append("Id: ");
      sb.Append(Id);
      sb.Append(",BeginTimeMin: ");
      sb.Append(BeginTimeMin);
      sb.Append(",BeginTimeMax: ");
      sb.Append(BeginTimeMax);
      sb.Append(",DuringTimeMin: ");
      sb.Append(DuringTimeMin);
      sb.Append(",DuringTimeMax: ");
      sb.Append(DuringTimeMax);
      sb.Append(",FirstTaskFuncId: ");
      sb.Append(FirstTaskFuncId);
      sb.Append(",SecondTaskFuncId: ");
      sb.Append(SecondTaskFuncId);
      sb.Append(",SecondTaskWaitingTime: ");
      sb.Append(SecondTaskWaitingTime);
      sb.Append(",PositionId: ");
      sb.Append(PositionId);
      sb.Append(",BeginAction: ");
      sb.Append(BeginAction);
      sb.Append(",ThunderAction: ");
      sb.Append(ThunderAction);
      sb.Append(",EndAction: ");
      sb.Append(EndAction);
      sb.Append(",TickTimeMin: ");
      sb.Append(TickTimeMin);
      sb.Append(",TicktimeMax: ");
      sb.Append(TicktimeMax);
      sb.Append(",MaxCount: ");
      sb.Append(MaxCount);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
