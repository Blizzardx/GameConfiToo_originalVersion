/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Config
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class FashionConfig : TBase
  {
    private int _id;
    private int _nameId;
    private int _descId;
    private string _icon;
    private int _firstType;
    private string _resource;
    private int _activeCostId;
    private int _activeLimitId;
    private string _animation;
    private int _dyeingCostId;
    private List<int> _dyeingList;
    private List<int> _CustomizedList;
    private int _displayLimitId;
    private int _displayTipType;
    private int _activeTipType;
    private int _activeLimitDescMessageId;
    private string _bigIcon;

    public int Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public int NameId
    {
      get
      {
        return _nameId;
      }
      set
      {
        __isset.nameId = true;
        this._nameId = value;
      }
    }

    public int DescId
    {
      get
      {
        return _descId;
      }
      set
      {
        __isset.descId = true;
        this._descId = value;
      }
    }

    public string Icon
    {
      get
      {
        return _icon;
      }
      set
      {
        __isset.icon = true;
        this._icon = value;
      }
    }

    public int FirstType
    {
      get
      {
        return _firstType;
      }
      set
      {
        __isset.firstType = true;
        this._firstType = value;
      }
    }

    public string Resource
    {
      get
      {
        return _resource;
      }
      set
      {
        __isset.resource = true;
        this._resource = value;
      }
    }

    public int ActiveCostId
    {
      get
      {
        return _activeCostId;
      }
      set
      {
        __isset.activeCostId = true;
        this._activeCostId = value;
      }
    }

    public int ActiveLimitId
    {
      get
      {
        return _activeLimitId;
      }
      set
      {
        __isset.activeLimitId = true;
        this._activeLimitId = value;
      }
    }

    public string Animation
    {
      get
      {
        return _animation;
      }
      set
      {
        __isset.animation = true;
        this._animation = value;
      }
    }

    public int DyeingCostId
    {
      get
      {
        return _dyeingCostId;
      }
      set
      {
        __isset.dyeingCostId = true;
        this._dyeingCostId = value;
      }
    }

    public List<int> DyeingList
    {
      get
      {
        return _dyeingList;
      }
      set
      {
        __isset.dyeingList = true;
        this._dyeingList = value;
      }
    }

    public List<int> CustomizedList
    {
      get
      {
        return _CustomizedList;
      }
      set
      {
        __isset.CustomizedList = true;
        this._CustomizedList = value;
      }
    }

    public int DisplayLimitId
    {
      get
      {
        return _displayLimitId;
      }
      set
      {
        __isset.displayLimitId = true;
        this._displayLimitId = value;
      }
    }

    public int DisplayTipType
    {
      get
      {
        return _displayTipType;
      }
      set
      {
        __isset.displayTipType = true;
        this._displayTipType = value;
      }
    }

    public int ActiveTipType
    {
      get
      {
        return _activeTipType;
      }
      set
      {
        __isset.activeTipType = true;
        this._activeTipType = value;
      }
    }

    public int ActiveLimitDescMessageId
    {
      get
      {
        return _activeLimitDescMessageId;
      }
      set
      {
        __isset.activeLimitDescMessageId = true;
        this._activeLimitDescMessageId = value;
      }
    }

    public string BigIcon
    {
      get
      {
        return _bigIcon;
      }
      set
      {
        __isset.bigIcon = true;
        this._bigIcon = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool nameId;
      public bool descId;
      public bool icon;
      public bool firstType;
      public bool resource;
      public bool activeCostId;
      public bool activeLimitId;
      public bool animation;
      public bool dyeingCostId;
      public bool dyeingList;
      public bool CustomizedList;
      public bool displayLimitId;
      public bool displayTipType;
      public bool activeTipType;
      public bool activeLimitDescMessageId;
      public bool bigIcon;
    }

    public FashionConfig() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 10:
            if (field.Type == TType.I32) {
              Id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.I32) {
              NameId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.I32) {
              DescId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 40:
            if (field.Type == TType.String) {
              Icon = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 50:
            if (field.Type == TType.I32) {
              FirstType = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 60:
            if (field.Type == TType.String) {
              Resource = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 70:
            if (field.Type == TType.I32) {
              ActiveCostId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 80:
            if (field.Type == TType.I32) {
              ActiveLimitId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 90:
            if (field.Type == TType.String) {
              Animation = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 91:
            if (field.Type == TType.I32) {
              DyeingCostId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 100:
            if (field.Type == TType.List) {
              {
                DyeingList = new List<int>();
                TList _list174 = iprot.ReadListBegin();
                for( int _i175 = 0; _i175 < _list174.Count; ++_i175)
                {
                  int _elem176 = 0;
                  _elem176 = iprot.ReadI32();
                  DyeingList.Add(_elem176);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 110:
            if (field.Type == TType.List) {
              {
                CustomizedList = new List<int>();
                TList _list177 = iprot.ReadListBegin();
                for( int _i178 = 0; _i178 < _list177.Count; ++_i178)
                {
                  int _elem179 = 0;
                  _elem179 = iprot.ReadI32();
                  CustomizedList.Add(_elem179);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 120:
            if (field.Type == TType.I32) {
              DisplayLimitId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 130:
            if (field.Type == TType.I32) {
              DisplayTipType = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 140:
            if (field.Type == TType.I32) {
              ActiveTipType = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 160:
            if (field.Type == TType.I32) {
              ActiveLimitDescMessageId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 170:
            if (field.Type == TType.String) {
              BigIcon = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("FashionConfig");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.id) {
        field.Name = "id";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Id);
        oprot.WriteFieldEnd();
      }
      if (__isset.nameId) {
        field.Name = "nameId";
        field.Type = TType.I32;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NameId);
        oprot.WriteFieldEnd();
      }
      if (__isset.descId) {
        field.Name = "descId";
        field.Type = TType.I32;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DescId);
        oprot.WriteFieldEnd();
      }
      if (Icon != null && __isset.icon) {
        field.Name = "icon";
        field.Type = TType.String;
        field.ID = 40;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Icon);
        oprot.WriteFieldEnd();
      }
      if (__isset.firstType) {
        field.Name = "firstType";
        field.Type = TType.I32;
        field.ID = 50;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(FirstType);
        oprot.WriteFieldEnd();
      }
      if (Resource != null && __isset.resource) {
        field.Name = "resource";
        field.Type = TType.String;
        field.ID = 60;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Resource);
        oprot.WriteFieldEnd();
      }
      if (__isset.activeCostId) {
        field.Name = "activeCostId";
        field.Type = TType.I32;
        field.ID = 70;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ActiveCostId);
        oprot.WriteFieldEnd();
      }
      if (__isset.activeLimitId) {
        field.Name = "activeLimitId";
        field.Type = TType.I32;
        field.ID = 80;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ActiveLimitId);
        oprot.WriteFieldEnd();
      }
      if (Animation != null && __isset.animation) {
        field.Name = "animation";
        field.Type = TType.String;
        field.ID = 90;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Animation);
        oprot.WriteFieldEnd();
      }
      if (__isset.dyeingCostId) {
        field.Name = "dyeingCostId";
        field.Type = TType.I32;
        field.ID = 91;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DyeingCostId);
        oprot.WriteFieldEnd();
      }
      if (DyeingList != null && __isset.dyeingList) {
        field.Name = "dyeingList";
        field.Type = TType.List;
        field.ID = 100;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, DyeingList.Count));
          foreach (int _iter180 in DyeingList)
          {
            oprot.WriteI32(_iter180);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (CustomizedList != null && __isset.CustomizedList) {
        field.Name = "CustomizedList";
        field.Type = TType.List;
        field.ID = 110;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, CustomizedList.Count));
          foreach (int _iter181 in CustomizedList)
          {
            oprot.WriteI32(_iter181);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.displayLimitId) {
        field.Name = "displayLimitId";
        field.Type = TType.I32;
        field.ID = 120;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DisplayLimitId);
        oprot.WriteFieldEnd();
      }
      if (__isset.displayTipType) {
        field.Name = "displayTipType";
        field.Type = TType.I32;
        field.ID = 130;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DisplayTipType);
        oprot.WriteFieldEnd();
      }
      if (__isset.activeTipType) {
        field.Name = "activeTipType";
        field.Type = TType.I32;
        field.ID = 140;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ActiveTipType);
        oprot.WriteFieldEnd();
      }
      if (__isset.activeLimitDescMessageId) {
        field.Name = "activeLimitDescMessageId";
        field.Type = TType.I32;
        field.ID = 160;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ActiveLimitDescMessageId);
        oprot.WriteFieldEnd();
      }
      if (BigIcon != null && __isset.bigIcon) {
        field.Name = "bigIcon";
        field.Type = TType.String;
        field.ID = 170;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(BigIcon);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("FashionConfig(");
      sb.Append("Id: ");
      sb.Append(Id);
      sb.Append(",NameId: ");
      sb.Append(NameId);
      sb.Append(",DescId: ");
      sb.Append(DescId);
      sb.Append(",Icon: ");
      sb.Append(Icon);
      sb.Append(",FirstType: ");
      sb.Append(FirstType);
      sb.Append(",Resource: ");
      sb.Append(Resource);
      sb.Append(",ActiveCostId: ");
      sb.Append(ActiveCostId);
      sb.Append(",ActiveLimitId: ");
      sb.Append(ActiveLimitId);
      sb.Append(",Animation: ");
      sb.Append(Animation);
      sb.Append(",DyeingCostId: ");
      sb.Append(DyeingCostId);
      sb.Append(",DyeingList: ");
      sb.Append(DyeingList);
      sb.Append(",CustomizedList: ");
      sb.Append(CustomizedList);
      sb.Append(",DisplayLimitId: ");
      sb.Append(DisplayLimitId);
      sb.Append(",DisplayTipType: ");
      sb.Append(DisplayTipType);
      sb.Append(",ActiveTipType: ");
      sb.Append(ActiveTipType);
      sb.Append(",ActiveLimitDescMessageId: ");
      sb.Append(ActiveLimitDescMessageId);
      sb.Append(",BigIcon: ");
      sb.Append(BigIcon);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
