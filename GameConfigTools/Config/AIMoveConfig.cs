/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Config
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class AIMoveConfig : TBase
  {
    private int _id;
    private bool _canMove;
    private bool _canFollowLeader;
    private sbyte _retreatType;
    private sbyte _chaseType;
    private bool _canPatrol;
    private sbyte _patrolType;
    private int _seekRange;

    public int Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public bool CanMove
    {
      get
      {
        return _canMove;
      }
      set
      {
        __isset.canMove = true;
        this._canMove = value;
      }
    }

    public bool CanFollowLeader
    {
      get
      {
        return _canFollowLeader;
      }
      set
      {
        __isset.canFollowLeader = true;
        this._canFollowLeader = value;
      }
    }

    public sbyte RetreatType
    {
      get
      {
        return _retreatType;
      }
      set
      {
        __isset.retreatType = true;
        this._retreatType = value;
      }
    }

    public sbyte ChaseType
    {
      get
      {
        return _chaseType;
      }
      set
      {
        __isset.chaseType = true;
        this._chaseType = value;
      }
    }

    public bool CanPatrol
    {
      get
      {
        return _canPatrol;
      }
      set
      {
        __isset.canPatrol = true;
        this._canPatrol = value;
      }
    }

    public sbyte PatrolType
    {
      get
      {
        return _patrolType;
      }
      set
      {
        __isset.patrolType = true;
        this._patrolType = value;
      }
    }

    public int SeekRange
    {
      get
      {
        return _seekRange;
      }
      set
      {
        __isset.seekRange = true;
        this._seekRange = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool canMove;
      public bool canFollowLeader;
      public bool retreatType;
      public bool chaseType;
      public bool canPatrol;
      public bool patrolType;
      public bool seekRange;
    }

    public AIMoveConfig() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 10:
            if (field.Type == TType.I32) {
              Id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.Bool) {
              CanMove = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.Bool) {
              CanFollowLeader = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 40:
            if (field.Type == TType.Byte) {
              RetreatType = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 50:
            if (field.Type == TType.Byte) {
              ChaseType = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 60:
            if (field.Type == TType.Bool) {
              CanPatrol = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 70:
            if (field.Type == TType.Byte) {
              PatrolType = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 80:
            if (field.Type == TType.I32) {
              SeekRange = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("AIMoveConfig");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.id) {
        field.Name = "id";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Id);
        oprot.WriteFieldEnd();
      }
      if (__isset.canMove) {
        field.Name = "canMove";
        field.Type = TType.Bool;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(CanMove);
        oprot.WriteFieldEnd();
      }
      if (__isset.canFollowLeader) {
        field.Name = "canFollowLeader";
        field.Type = TType.Bool;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(CanFollowLeader);
        oprot.WriteFieldEnd();
      }
      if (__isset.retreatType) {
        field.Name = "retreatType";
        field.Type = TType.Byte;
        field.ID = 40;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(RetreatType);
        oprot.WriteFieldEnd();
      }
      if (__isset.chaseType) {
        field.Name = "chaseType";
        field.Type = TType.Byte;
        field.ID = 50;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(ChaseType);
        oprot.WriteFieldEnd();
      }
      if (__isset.canPatrol) {
        field.Name = "canPatrol";
        field.Type = TType.Bool;
        field.ID = 60;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(CanPatrol);
        oprot.WriteFieldEnd();
      }
      if (__isset.patrolType) {
        field.Name = "patrolType";
        field.Type = TType.Byte;
        field.ID = 70;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(PatrolType);
        oprot.WriteFieldEnd();
      }
      if (__isset.seekRange) {
        field.Name = "seekRange";
        field.Type = TType.I32;
        field.ID = 80;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SeekRange);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("AIMoveConfig(");
      sb.Append("Id: ");
      sb.Append(Id);
      sb.Append(",CanMove: ");
      sb.Append(CanMove);
      sb.Append(",CanFollowLeader: ");
      sb.Append(CanFollowLeader);
      sb.Append(",RetreatType: ");
      sb.Append(RetreatType);
      sb.Append(",ChaseType: ");
      sb.Append(ChaseType);
      sb.Append(",CanPatrol: ");
      sb.Append(CanPatrol);
      sb.Append(",PatrolType: ");
      sb.Append(PatrolType);
      sb.Append(",SeekRange: ");
      sb.Append(SeekRange);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
