/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Config
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SpellCardLevelupConfig : TBase
  {
    private int _id;
    private int _level;
    private int _quality;
    private int _disAttachFuncId;
    private int _attachFuncId;
    private int _levelupFuncId;
    private int _levelupLimitId;

    public int Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public int Level
    {
      get
      {
        return _level;
      }
      set
      {
        __isset.level = true;
        this._level = value;
      }
    }

    public int Quality
    {
      get
      {
        return _quality;
      }
      set
      {
        __isset.quality = true;
        this._quality = value;
      }
    }

    public int DisAttachFuncId
    {
      get
      {
        return _disAttachFuncId;
      }
      set
      {
        __isset.disAttachFuncId = true;
        this._disAttachFuncId = value;
      }
    }

    public int AttachFuncId
    {
      get
      {
        return _attachFuncId;
      }
      set
      {
        __isset.attachFuncId = true;
        this._attachFuncId = value;
      }
    }

    public int LevelupFuncId
    {
      get
      {
        return _levelupFuncId;
      }
      set
      {
        __isset.levelupFuncId = true;
        this._levelupFuncId = value;
      }
    }

    public int LevelupLimitId
    {
      get
      {
        return _levelupLimitId;
      }
      set
      {
        __isset.levelupLimitId = true;
        this._levelupLimitId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool level;
      public bool quality;
      public bool disAttachFuncId;
      public bool attachFuncId;
      public bool levelupFuncId;
      public bool levelupLimitId;
    }

    public SpellCardLevelupConfig() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 10:
            if (field.Type == TType.I32) {
              Id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.I32) {
              Level = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.I32) {
              Quality = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 40:
            if (field.Type == TType.I32) {
              DisAttachFuncId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 50:
            if (field.Type == TType.I32) {
              AttachFuncId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 60:
            if (field.Type == TType.I32) {
              LevelupFuncId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 70:
            if (field.Type == TType.I32) {
              LevelupLimitId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("SpellCardLevelupConfig");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.id) {
        field.Name = "id";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Id);
        oprot.WriteFieldEnd();
      }
      if (__isset.level) {
        field.Name = "level";
        field.Type = TType.I32;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Level);
        oprot.WriteFieldEnd();
      }
      if (__isset.quality) {
        field.Name = "quality";
        field.Type = TType.I32;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Quality);
        oprot.WriteFieldEnd();
      }
      if (__isset.disAttachFuncId) {
        field.Name = "disAttachFuncId";
        field.Type = TType.I32;
        field.ID = 40;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DisAttachFuncId);
        oprot.WriteFieldEnd();
      }
      if (__isset.attachFuncId) {
        field.Name = "attachFuncId";
        field.Type = TType.I32;
        field.ID = 50;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(AttachFuncId);
        oprot.WriteFieldEnd();
      }
      if (__isset.levelupFuncId) {
        field.Name = "levelupFuncId";
        field.Type = TType.I32;
        field.ID = 60;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(LevelupFuncId);
        oprot.WriteFieldEnd();
      }
      if (__isset.levelupLimitId) {
        field.Name = "levelupLimitId";
        field.Type = TType.I32;
        field.ID = 70;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(LevelupLimitId);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("SpellCardLevelupConfig(");
      sb.Append("Id: ");
      sb.Append(Id);
      sb.Append(",Level: ");
      sb.Append(Level);
      sb.Append(",Quality: ");
      sb.Append(Quality);
      sb.Append(",DisAttachFuncId: ");
      sb.Append(DisAttachFuncId);
      sb.Append(",AttachFuncId: ");
      sb.Append(AttachFuncId);
      sb.Append(",LevelupFuncId: ");
      sb.Append(LevelupFuncId);
      sb.Append(",LevelupLimitId: ");
      sb.Append(LevelupLimitId);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
