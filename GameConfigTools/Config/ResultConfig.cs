/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Config
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ResultConfig : TBase
  {
    private int _id;
    private int _type;
    private int _expBase;
    private int _expModeRatio;
    private int _expOtherRatio;

    public int Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public int Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public int ExpBase
    {
      get
      {
        return _expBase;
      }
      set
      {
        __isset.expBase = true;
        this._expBase = value;
      }
    }

    public int ExpModeRatio
    {
      get
      {
        return _expModeRatio;
      }
      set
      {
        __isset.expModeRatio = true;
        this._expModeRatio = value;
      }
    }

    public int ExpOtherRatio
    {
      get
      {
        return _expOtherRatio;
      }
      set
      {
        __isset.expOtherRatio = true;
        this._expOtherRatio = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool type;
      public bool expBase;
      public bool expModeRatio;
      public bool expOtherRatio;
    }

    public ResultConfig() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 10:
            if (field.Type == TType.I32) {
              Id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.I32) {
              Type = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.I32) {
              ExpBase = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 40:
            if (field.Type == TType.I32) {
              ExpModeRatio = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 50:
            if (field.Type == TType.I32) {
              ExpOtherRatio = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ResultConfig");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.id) {
        field.Name = "id";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Id);
        oprot.WriteFieldEnd();
      }
      if (__isset.type) {
        field.Name = "type";
        field.Type = TType.I32;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Type);
        oprot.WriteFieldEnd();
      }
      if (__isset.expBase) {
        field.Name = "expBase";
        field.Type = TType.I32;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ExpBase);
        oprot.WriteFieldEnd();
      }
      if (__isset.expModeRatio) {
        field.Name = "expModeRatio";
        field.Type = TType.I32;
        field.ID = 40;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ExpModeRatio);
        oprot.WriteFieldEnd();
      }
      if (__isset.expOtherRatio) {
        field.Name = "expOtherRatio";
        field.Type = TType.I32;
        field.ID = 50;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ExpOtherRatio);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ResultConfig(");
      sb.Append("Id: ");
      sb.Append(Id);
      sb.Append(",Type: ");
      sb.Append(Type);
      sb.Append(",ExpBase: ");
      sb.Append(ExpBase);
      sb.Append(",ExpModeRatio: ");
      sb.Append(ExpModeRatio);
      sb.Append(",ExpOtherRatio: ");
      sb.Append(ExpOtherRatio);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
