/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Config
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class AeroAttributeConfig : TBase
  {
    private int _id;
    private int _level;
    private int _normalSkill;
    private int _skill1;
    private int _skill2;
    private List<int> _passiveSkillList;
    private int _maxHp;
    private int _maxMp;
    private int _recoveryFrame;
    private int _recoverHp;
    private int _moveAdd;
    private int _moveMax;
    private int _flyAdd;
    private int _flyMax;
    private int _dropAdd;
    private int _dropMax;
    private int _resistAdd;
    private int _friction;
    private int _defineMap;
    private int _attk;

    public int Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public int Level
    {
      get
      {
        return _level;
      }
      set
      {
        __isset.level = true;
        this._level = value;
      }
    }

    public int NormalSkill
    {
      get
      {
        return _normalSkill;
      }
      set
      {
        __isset.normalSkill = true;
        this._normalSkill = value;
      }
    }

    public int Skill1
    {
      get
      {
        return _skill1;
      }
      set
      {
        __isset.skill1 = true;
        this._skill1 = value;
      }
    }

    public int Skill2
    {
      get
      {
        return _skill2;
      }
      set
      {
        __isset.skill2 = true;
        this._skill2 = value;
      }
    }

    public List<int> PassiveSkillList
    {
      get
      {
        return _passiveSkillList;
      }
      set
      {
        __isset.passiveSkillList = true;
        this._passiveSkillList = value;
      }
    }

    public int MaxHp
    {
      get
      {
        return _maxHp;
      }
      set
      {
        __isset.maxHp = true;
        this._maxHp = value;
      }
    }

    public int MaxMp
    {
      get
      {
        return _maxMp;
      }
      set
      {
        __isset.maxMp = true;
        this._maxMp = value;
      }
    }

    public int RecoveryFrame
    {
      get
      {
        return _recoveryFrame;
      }
      set
      {
        __isset.recoveryFrame = true;
        this._recoveryFrame = value;
      }
    }

    public int RecoverHp
    {
      get
      {
        return _recoverHp;
      }
      set
      {
        __isset.recoverHp = true;
        this._recoverHp = value;
      }
    }

    public int MoveAdd
    {
      get
      {
        return _moveAdd;
      }
      set
      {
        __isset.moveAdd = true;
        this._moveAdd = value;
      }
    }

    public int MoveMax
    {
      get
      {
        return _moveMax;
      }
      set
      {
        __isset.moveMax = true;
        this._moveMax = value;
      }
    }

    public int FlyAdd
    {
      get
      {
        return _flyAdd;
      }
      set
      {
        __isset.flyAdd = true;
        this._flyAdd = value;
      }
    }

    public int FlyMax
    {
      get
      {
        return _flyMax;
      }
      set
      {
        __isset.flyMax = true;
        this._flyMax = value;
      }
    }

    public int DropAdd
    {
      get
      {
        return _dropAdd;
      }
      set
      {
        __isset.dropAdd = true;
        this._dropAdd = value;
      }
    }

    public int DropMax
    {
      get
      {
        return _dropMax;
      }
      set
      {
        __isset.dropMax = true;
        this._dropMax = value;
      }
    }

    public int ResistAdd
    {
      get
      {
        return _resistAdd;
      }
      set
      {
        __isset.resistAdd = true;
        this._resistAdd = value;
      }
    }

    public int Friction
    {
      get
      {
        return _friction;
      }
      set
      {
        __isset.friction = true;
        this._friction = value;
      }
    }

    public int DefineMap
    {
      get
      {
        return _defineMap;
      }
      set
      {
        __isset.defineMap = true;
        this._defineMap = value;
      }
    }

    public int Attk
    {
      get
      {
        return _attk;
      }
      set
      {
        __isset.attk = true;
        this._attk = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool level;
      public bool normalSkill;
      public bool skill1;
      public bool skill2;
      public bool passiveSkillList;
      public bool maxHp;
      public bool maxMp;
      public bool recoveryFrame;
      public bool recoverHp;
      public bool moveAdd;
      public bool moveMax;
      public bool flyAdd;
      public bool flyMax;
      public bool dropAdd;
      public bool dropMax;
      public bool resistAdd;
      public bool friction;
      public bool defineMap;
      public bool attk;
    }

    public AeroAttributeConfig() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 10:
            if (field.Type == TType.I32) {
              Id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.I32) {
              Level = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 29:
            if (field.Type == TType.I32) {
              NormalSkill = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.I32) {
              Skill1 = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 40:
            if (field.Type == TType.I32) {
              Skill2 = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 45:
            if (field.Type == TType.List) {
              {
                PassiveSkillList = new List<int>();
                TList _list122 = iprot.ReadListBegin();
                for( int _i123 = 0; _i123 < _list122.Count; ++_i123)
                {
                  int _elem124 = 0;
                  _elem124 = iprot.ReadI32();
                  PassiveSkillList.Add(_elem124);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 50:
            if (field.Type == TType.I32) {
              MaxHp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 60:
            if (field.Type == TType.I32) {
              MaxMp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 70:
            if (field.Type == TType.I32) {
              RecoveryFrame = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 80:
            if (field.Type == TType.I32) {
              RecoverHp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 90:
            if (field.Type == TType.I32) {
              MoveAdd = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 100:
            if (field.Type == TType.I32) {
              MoveMax = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 110:
            if (field.Type == TType.I32) {
              FlyAdd = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 120:
            if (field.Type == TType.I32) {
              FlyMax = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 130:
            if (field.Type == TType.I32) {
              DropAdd = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 140:
            if (field.Type == TType.I32) {
              DropMax = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 150:
            if (field.Type == TType.I32) {
              ResistAdd = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 160:
            if (field.Type == TType.I32) {
              Friction = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 170:
            if (field.Type == TType.I32) {
              DefineMap = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 180:
            if (field.Type == TType.I32) {
              Attk = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("AeroAttributeConfig");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.id) {
        field.Name = "id";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Id);
        oprot.WriteFieldEnd();
      }
      if (__isset.level) {
        field.Name = "level";
        field.Type = TType.I32;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Level);
        oprot.WriteFieldEnd();
      }
      if (__isset.normalSkill) {
        field.Name = "normalSkill";
        field.Type = TType.I32;
        field.ID = 29;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NormalSkill);
        oprot.WriteFieldEnd();
      }
      if (__isset.skill1) {
        field.Name = "skill1";
        field.Type = TType.I32;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Skill1);
        oprot.WriteFieldEnd();
      }
      if (__isset.skill2) {
        field.Name = "skill2";
        field.Type = TType.I32;
        field.ID = 40;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Skill2);
        oprot.WriteFieldEnd();
      }
      if (PassiveSkillList != null && __isset.passiveSkillList) {
        field.Name = "passiveSkillList";
        field.Type = TType.List;
        field.ID = 45;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, PassiveSkillList.Count));
          foreach (int _iter125 in PassiveSkillList)
          {
            oprot.WriteI32(_iter125);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.maxHp) {
        field.Name = "maxHp";
        field.Type = TType.I32;
        field.ID = 50;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MaxHp);
        oprot.WriteFieldEnd();
      }
      if (__isset.maxMp) {
        field.Name = "maxMp";
        field.Type = TType.I32;
        field.ID = 60;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MaxMp);
        oprot.WriteFieldEnd();
      }
      if (__isset.recoveryFrame) {
        field.Name = "recoveryFrame";
        field.Type = TType.I32;
        field.ID = 70;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(RecoveryFrame);
        oprot.WriteFieldEnd();
      }
      if (__isset.recoverHp) {
        field.Name = "recoverHp";
        field.Type = TType.I32;
        field.ID = 80;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(RecoverHp);
        oprot.WriteFieldEnd();
      }
      if (__isset.moveAdd) {
        field.Name = "moveAdd";
        field.Type = TType.I32;
        field.ID = 90;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MoveAdd);
        oprot.WriteFieldEnd();
      }
      if (__isset.moveMax) {
        field.Name = "moveMax";
        field.Type = TType.I32;
        field.ID = 100;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MoveMax);
        oprot.WriteFieldEnd();
      }
      if (__isset.flyAdd) {
        field.Name = "flyAdd";
        field.Type = TType.I32;
        field.ID = 110;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(FlyAdd);
        oprot.WriteFieldEnd();
      }
      if (__isset.flyMax) {
        field.Name = "flyMax";
        field.Type = TType.I32;
        field.ID = 120;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(FlyMax);
        oprot.WriteFieldEnd();
      }
      if (__isset.dropAdd) {
        field.Name = "dropAdd";
        field.Type = TType.I32;
        field.ID = 130;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DropAdd);
        oprot.WriteFieldEnd();
      }
      if (__isset.dropMax) {
        field.Name = "dropMax";
        field.Type = TType.I32;
        field.ID = 140;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DropMax);
        oprot.WriteFieldEnd();
      }
      if (__isset.resistAdd) {
        field.Name = "resistAdd";
        field.Type = TType.I32;
        field.ID = 150;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ResistAdd);
        oprot.WriteFieldEnd();
      }
      if (__isset.friction) {
        field.Name = "friction";
        field.Type = TType.I32;
        field.ID = 160;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Friction);
        oprot.WriteFieldEnd();
      }
      if (__isset.defineMap) {
        field.Name = "defineMap";
        field.Type = TType.I32;
        field.ID = 170;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DefineMap);
        oprot.WriteFieldEnd();
      }
      if (__isset.attk) {
        field.Name = "attk";
        field.Type = TType.I32;
        field.ID = 180;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Attk);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("AeroAttributeConfig(");
      sb.Append("Id: ");
      sb.Append(Id);
      sb.Append(",Level: ");
      sb.Append(Level);
      sb.Append(",NormalSkill: ");
      sb.Append(NormalSkill);
      sb.Append(",Skill1: ");
      sb.Append(Skill1);
      sb.Append(",Skill2: ");
      sb.Append(Skill2);
      sb.Append(",PassiveSkillList: ");
      sb.Append(PassiveSkillList);
      sb.Append(",MaxHp: ");
      sb.Append(MaxHp);
      sb.Append(",MaxMp: ");
      sb.Append(MaxMp);
      sb.Append(",RecoveryFrame: ");
      sb.Append(RecoveryFrame);
      sb.Append(",RecoverHp: ");
      sb.Append(RecoverHp);
      sb.Append(",MoveAdd: ");
      sb.Append(MoveAdd);
      sb.Append(",MoveMax: ");
      sb.Append(MoveMax);
      sb.Append(",FlyAdd: ");
      sb.Append(FlyAdd);
      sb.Append(",FlyMax: ");
      sb.Append(FlyMax);
      sb.Append(",DropAdd: ");
      sb.Append(DropAdd);
      sb.Append(",DropMax: ");
      sb.Append(DropMax);
      sb.Append(",ResistAdd: ");
      sb.Append(ResistAdd);
      sb.Append(",Friction: ");
      sb.Append(Friction);
      sb.Append(",DefineMap: ");
      sb.Append(DefineMap);
      sb.Append(",Attk: ");
      sb.Append(Attk);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
