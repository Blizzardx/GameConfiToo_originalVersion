/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Config
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class DropItem : TBase
  {
    private int _itemId;
    private sbyte _minDropCount;
    private sbyte _maxDropCount;
    private int _weight;

    public int ItemId
    {
      get
      {
        return _itemId;
      }
      set
      {
        __isset.itemId = true;
        this._itemId = value;
      }
    }

    public sbyte MinDropCount
    {
      get
      {
        return _minDropCount;
      }
      set
      {
        __isset.minDropCount = true;
        this._minDropCount = value;
      }
    }

    public sbyte MaxDropCount
    {
      get
      {
        return _maxDropCount;
      }
      set
      {
        __isset.maxDropCount = true;
        this._maxDropCount = value;
      }
    }

    public int Weight
    {
      get
      {
        return _weight;
      }
      set
      {
        __isset.weight = true;
        this._weight = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool itemId;
      public bool minDropCount;
      public bool maxDropCount;
      public bool weight;
    }

    public DropItem() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 10:
            if (field.Type == TType.I32) {
              ItemId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.Byte) {
              MinDropCount = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.Byte) {
              MaxDropCount = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 40:
            if (field.Type == TType.I32) {
              Weight = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("DropItem");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.itemId) {
        field.Name = "itemId";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ItemId);
        oprot.WriteFieldEnd();
      }
      if (__isset.minDropCount) {
        field.Name = "minDropCount";
        field.Type = TType.Byte;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(MinDropCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.maxDropCount) {
        field.Name = "maxDropCount";
        field.Type = TType.Byte;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(MaxDropCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.weight) {
        field.Name = "weight";
        field.Type = TType.I32;
        field.ID = 40;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Weight);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("DropItem(");
      sb.Append("ItemId: ");
      sb.Append(ItemId);
      sb.Append(",MinDropCount: ");
      sb.Append(MinDropCount);
      sb.Append(",MaxDropCount: ");
      sb.Append(MaxDropCount);
      sb.Append(",Weight: ");
      sb.Append(Weight);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
