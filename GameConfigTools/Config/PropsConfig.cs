/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Config
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class PropsConfig : TBase
  {
    private int _id;
    private int _nameMessageId;
    private int _funcDescMessageId;
    private int _descMessageId;
    private string _icon;
    private int _firstType;
    private int _secondType;
    private int _quality;
    private bool _canUse;
    private int _useLimitId;
    private int _useFuncId;
    private bool _canSell;
    private int _sellCurrencyType;
    private int _sellPrice;
    private bool _canGive;
    private bool _canAuction;

    public int Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public int NameMessageId
    {
      get
      {
        return _nameMessageId;
      }
      set
      {
        __isset.nameMessageId = true;
        this._nameMessageId = value;
      }
    }

    public int FuncDescMessageId
    {
      get
      {
        return _funcDescMessageId;
      }
      set
      {
        __isset.funcDescMessageId = true;
        this._funcDescMessageId = value;
      }
    }

    public int DescMessageId
    {
      get
      {
        return _descMessageId;
      }
      set
      {
        __isset.descMessageId = true;
        this._descMessageId = value;
      }
    }

    public string Icon
    {
      get
      {
        return _icon;
      }
      set
      {
        __isset.icon = true;
        this._icon = value;
      }
    }

    public int FirstType
    {
      get
      {
        return _firstType;
      }
      set
      {
        __isset.firstType = true;
        this._firstType = value;
      }
    }

    public int SecondType
    {
      get
      {
        return _secondType;
      }
      set
      {
        __isset.secondType = true;
        this._secondType = value;
      }
    }

    public int Quality
    {
      get
      {
        return _quality;
      }
      set
      {
        __isset.quality = true;
        this._quality = value;
      }
    }

    public bool CanUse
    {
      get
      {
        return _canUse;
      }
      set
      {
        __isset.canUse = true;
        this._canUse = value;
      }
    }

    public int UseLimitId
    {
      get
      {
        return _useLimitId;
      }
      set
      {
        __isset.useLimitId = true;
        this._useLimitId = value;
      }
    }

    public int UseFuncId
    {
      get
      {
        return _useFuncId;
      }
      set
      {
        __isset.useFuncId = true;
        this._useFuncId = value;
      }
    }

    public bool CanSell
    {
      get
      {
        return _canSell;
      }
      set
      {
        __isset.canSell = true;
        this._canSell = value;
      }
    }

    public int SellCurrencyType
    {
      get
      {
        return _sellCurrencyType;
      }
      set
      {
        __isset.sellCurrencyType = true;
        this._sellCurrencyType = value;
      }
    }

    public int SellPrice
    {
      get
      {
        return _sellPrice;
      }
      set
      {
        __isset.sellPrice = true;
        this._sellPrice = value;
      }
    }

    public bool CanGive
    {
      get
      {
        return _canGive;
      }
      set
      {
        __isset.canGive = true;
        this._canGive = value;
      }
    }

    public bool CanAuction
    {
      get
      {
        return _canAuction;
      }
      set
      {
        __isset.canAuction = true;
        this._canAuction = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool nameMessageId;
      public bool funcDescMessageId;
      public bool descMessageId;
      public bool icon;
      public bool firstType;
      public bool secondType;
      public bool quality;
      public bool canUse;
      public bool useLimitId;
      public bool useFuncId;
      public bool canSell;
      public bool sellCurrencyType;
      public bool sellPrice;
      public bool canGive;
      public bool canAuction;
    }

    public PropsConfig() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 10:
            if (field.Type == TType.I32) {
              Id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.I32) {
              NameMessageId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 29:
            if (field.Type == TType.I32) {
              FuncDescMessageId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.I32) {
              DescMessageId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 40:
            if (field.Type == TType.String) {
              Icon = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 50:
            if (field.Type == TType.I32) {
              FirstType = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 60:
            if (field.Type == TType.I32) {
              SecondType = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 70:
            if (field.Type == TType.I32) {
              Quality = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 80:
            if (field.Type == TType.Bool) {
              CanUse = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 90:
            if (field.Type == TType.I32) {
              UseLimitId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 100:
            if (field.Type == TType.I32) {
              UseFuncId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 110:
            if (field.Type == TType.Bool) {
              CanSell = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 120:
            if (field.Type == TType.I32) {
              SellCurrencyType = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 130:
            if (field.Type == TType.I32) {
              SellPrice = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 140:
            if (field.Type == TType.Bool) {
              CanGive = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 150:
            if (field.Type == TType.Bool) {
              CanAuction = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("PropsConfig");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.id) {
        field.Name = "id";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Id);
        oprot.WriteFieldEnd();
      }
      if (__isset.nameMessageId) {
        field.Name = "nameMessageId";
        field.Type = TType.I32;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NameMessageId);
        oprot.WriteFieldEnd();
      }
      if (__isset.funcDescMessageId) {
        field.Name = "funcDescMessageId";
        field.Type = TType.I32;
        field.ID = 29;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(FuncDescMessageId);
        oprot.WriteFieldEnd();
      }
      if (__isset.descMessageId) {
        field.Name = "descMessageId";
        field.Type = TType.I32;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DescMessageId);
        oprot.WriteFieldEnd();
      }
      if (Icon != null && __isset.icon) {
        field.Name = "icon";
        field.Type = TType.String;
        field.ID = 40;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Icon);
        oprot.WriteFieldEnd();
      }
      if (__isset.firstType) {
        field.Name = "firstType";
        field.Type = TType.I32;
        field.ID = 50;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(FirstType);
        oprot.WriteFieldEnd();
      }
      if (__isset.secondType) {
        field.Name = "secondType";
        field.Type = TType.I32;
        field.ID = 60;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SecondType);
        oprot.WriteFieldEnd();
      }
      if (__isset.quality) {
        field.Name = "quality";
        field.Type = TType.I32;
        field.ID = 70;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Quality);
        oprot.WriteFieldEnd();
      }
      if (__isset.canUse) {
        field.Name = "canUse";
        field.Type = TType.Bool;
        field.ID = 80;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(CanUse);
        oprot.WriteFieldEnd();
      }
      if (__isset.useLimitId) {
        field.Name = "useLimitId";
        field.Type = TType.I32;
        field.ID = 90;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(UseLimitId);
        oprot.WriteFieldEnd();
      }
      if (__isset.useFuncId) {
        field.Name = "useFuncId";
        field.Type = TType.I32;
        field.ID = 100;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(UseFuncId);
        oprot.WriteFieldEnd();
      }
      if (__isset.canSell) {
        field.Name = "canSell";
        field.Type = TType.Bool;
        field.ID = 110;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(CanSell);
        oprot.WriteFieldEnd();
      }
      if (__isset.sellCurrencyType) {
        field.Name = "sellCurrencyType";
        field.Type = TType.I32;
        field.ID = 120;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SellCurrencyType);
        oprot.WriteFieldEnd();
      }
      if (__isset.sellPrice) {
        field.Name = "sellPrice";
        field.Type = TType.I32;
        field.ID = 130;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SellPrice);
        oprot.WriteFieldEnd();
      }
      if (__isset.canGive) {
        field.Name = "canGive";
        field.Type = TType.Bool;
        field.ID = 140;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(CanGive);
        oprot.WriteFieldEnd();
      }
      if (__isset.canAuction) {
        field.Name = "canAuction";
        field.Type = TType.Bool;
        field.ID = 150;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(CanAuction);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("PropsConfig(");
      sb.Append("Id: ");
      sb.Append(Id);
      sb.Append(",NameMessageId: ");
      sb.Append(NameMessageId);
      sb.Append(",FuncDescMessageId: ");
      sb.Append(FuncDescMessageId);
      sb.Append(",DescMessageId: ");
      sb.Append(DescMessageId);
      sb.Append(",Icon: ");
      sb.Append(Icon);
      sb.Append(",FirstType: ");
      sb.Append(FirstType);
      sb.Append(",SecondType: ");
      sb.Append(SecondType);
      sb.Append(",Quality: ");
      sb.Append(Quality);
      sb.Append(",CanUse: ");
      sb.Append(CanUse);
      sb.Append(",UseLimitId: ");
      sb.Append(UseLimitId);
      sb.Append(",UseFuncId: ");
      sb.Append(UseFuncId);
      sb.Append(",CanSell: ");
      sb.Append(CanSell);
      sb.Append(",SellCurrencyType: ");
      sb.Append(SellCurrencyType);
      sb.Append(",SellPrice: ");
      sb.Append(SellPrice);
      sb.Append(",CanGive: ");
      sb.Append(CanGive);
      sb.Append(",CanAuction: ");
      sb.Append(CanAuction);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
