/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Config
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SystemMissionConfig : TBase
  {
    private int _daliyMissionCycleId;
    private int _activeValueCycleCounterId;
    private List<ActiveAwardConfig> _activeAwardConfigList;

    public int DaliyMissionCycleId
    {
      get
      {
        return _daliyMissionCycleId;
      }
      set
      {
        __isset.daliyMissionCycleId = true;
        this._daliyMissionCycleId = value;
      }
    }

    public int ActiveValueCycleCounterId
    {
      get
      {
        return _activeValueCycleCounterId;
      }
      set
      {
        __isset.activeValueCycleCounterId = true;
        this._activeValueCycleCounterId = value;
      }
    }

    public List<ActiveAwardConfig> ActiveAwardConfigList
    {
      get
      {
        return _activeAwardConfigList;
      }
      set
      {
        __isset.activeAwardConfigList = true;
        this._activeAwardConfigList = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool daliyMissionCycleId;
      public bool activeValueCycleCounterId;
      public bool activeAwardConfigList;
    }

    public SystemMissionConfig() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 10:
            if (field.Type == TType.I32) {
              DaliyMissionCycleId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.I32) {
              ActiveValueCycleCounterId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.List) {
              {
                ActiveAwardConfigList = new List<ActiveAwardConfig>();
                TList _list16 = iprot.ReadListBegin();
                for( int _i17 = 0; _i17 < _list16.Count; ++_i17)
                {
                  ActiveAwardConfig _elem18 = new ActiveAwardConfig();
                  _elem18 = new ActiveAwardConfig();
                  _elem18.Read(iprot);
                  ActiveAwardConfigList.Add(_elem18);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("SystemMissionConfig");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.daliyMissionCycleId) {
        field.Name = "daliyMissionCycleId";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DaliyMissionCycleId);
        oprot.WriteFieldEnd();
      }
      if (__isset.activeValueCycleCounterId) {
        field.Name = "activeValueCycleCounterId";
        field.Type = TType.I32;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ActiveValueCycleCounterId);
        oprot.WriteFieldEnd();
      }
      if (ActiveAwardConfigList != null && __isset.activeAwardConfigList) {
        field.Name = "activeAwardConfigList";
        field.Type = TType.List;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, ActiveAwardConfigList.Count));
          foreach (ActiveAwardConfig _iter19 in ActiveAwardConfigList)
          {
            _iter19.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("SystemMissionConfig(");
      sb.Append("DaliyMissionCycleId: ");
      sb.Append(DaliyMissionCycleId);
      sb.Append(",ActiveValueCycleCounterId: ");
      sb.Append(ActiveValueCycleCounterId);
      sb.Append(",ActiveAwardConfigList: ");
      sb.Append(ActiveAwardConfigList);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
