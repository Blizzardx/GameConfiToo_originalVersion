/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Config
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ItemGeneratorConfig : TBase
  {
    private int _id;
    private int _beginTimeMin;
    private int _beginTimeMax;
    private int _tickTimeMin;
    private int _tickTimeMax;
    private int _beginFuncId;
    private bool _isReplace;
    private int _randomCountMin;
    private int _randomCountMax;
    private List<int> _optionList;
    private string _itemPrefab;

    public int Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public int BeginTimeMin
    {
      get
      {
        return _beginTimeMin;
      }
      set
      {
        __isset.beginTimeMin = true;
        this._beginTimeMin = value;
      }
    }

    public int BeginTimeMax
    {
      get
      {
        return _beginTimeMax;
      }
      set
      {
        __isset.beginTimeMax = true;
        this._beginTimeMax = value;
      }
    }

    public int TickTimeMin
    {
      get
      {
        return _tickTimeMin;
      }
      set
      {
        __isset.tickTimeMin = true;
        this._tickTimeMin = value;
      }
    }

    public int TickTimeMax
    {
      get
      {
        return _tickTimeMax;
      }
      set
      {
        __isset.tickTimeMax = true;
        this._tickTimeMax = value;
      }
    }

    public int BeginFuncId
    {
      get
      {
        return _beginFuncId;
      }
      set
      {
        __isset.beginFuncId = true;
        this._beginFuncId = value;
      }
    }

    public bool IsReplace
    {
      get
      {
        return _isReplace;
      }
      set
      {
        __isset.isReplace = true;
        this._isReplace = value;
      }
    }

    public int RandomCountMin
    {
      get
      {
        return _randomCountMin;
      }
      set
      {
        __isset.randomCountMin = true;
        this._randomCountMin = value;
      }
    }

    public int RandomCountMax
    {
      get
      {
        return _randomCountMax;
      }
      set
      {
        __isset.randomCountMax = true;
        this._randomCountMax = value;
      }
    }

    public List<int> OptionList
    {
      get
      {
        return _optionList;
      }
      set
      {
        __isset.optionList = true;
        this._optionList = value;
      }
    }

    public string ItemPrefab
    {
      get
      {
        return _itemPrefab;
      }
      set
      {
        __isset.itemPrefab = true;
        this._itemPrefab = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool beginTimeMin;
      public bool beginTimeMax;
      public bool tickTimeMin;
      public bool tickTimeMax;
      public bool beginFuncId;
      public bool isReplace;
      public bool randomCountMin;
      public bool randomCountMax;
      public bool optionList;
      public bool itemPrefab;
    }

    public ItemGeneratorConfig() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 10:
            if (field.Type == TType.I32) {
              Id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.I32) {
              BeginTimeMin = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 21:
            if (field.Type == TType.I32) {
              BeginTimeMax = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.I32) {
              TickTimeMin = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 31:
            if (field.Type == TType.I32) {
              TickTimeMax = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 40:
            if (field.Type == TType.I32) {
              BeginFuncId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 50:
            if (field.Type == TType.Bool) {
              IsReplace = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 60:
            if (field.Type == TType.I32) {
              RandomCountMin = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 70:
            if (field.Type == TType.I32) {
              RandomCountMax = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 80:
            if (field.Type == TType.List) {
              {
                OptionList = new List<int>();
                TList _list163 = iprot.ReadListBegin();
                for( int _i164 = 0; _i164 < _list163.Count; ++_i164)
                {
                  int _elem165 = 0;
                  _elem165 = iprot.ReadI32();
                  OptionList.Add(_elem165);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 90:
            if (field.Type == TType.String) {
              ItemPrefab = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ItemGeneratorConfig");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.id) {
        field.Name = "id";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Id);
        oprot.WriteFieldEnd();
      }
      if (__isset.beginTimeMin) {
        field.Name = "beginTimeMin";
        field.Type = TType.I32;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(BeginTimeMin);
        oprot.WriteFieldEnd();
      }
      if (__isset.beginTimeMax) {
        field.Name = "beginTimeMax";
        field.Type = TType.I32;
        field.ID = 21;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(BeginTimeMax);
        oprot.WriteFieldEnd();
      }
      if (__isset.tickTimeMin) {
        field.Name = "tickTimeMin";
        field.Type = TType.I32;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TickTimeMin);
        oprot.WriteFieldEnd();
      }
      if (__isset.tickTimeMax) {
        field.Name = "tickTimeMax";
        field.Type = TType.I32;
        field.ID = 31;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TickTimeMax);
        oprot.WriteFieldEnd();
      }
      if (__isset.beginFuncId) {
        field.Name = "beginFuncId";
        field.Type = TType.I32;
        field.ID = 40;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(BeginFuncId);
        oprot.WriteFieldEnd();
      }
      if (__isset.isReplace) {
        field.Name = "isReplace";
        field.Type = TType.Bool;
        field.ID = 50;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsReplace);
        oprot.WriteFieldEnd();
      }
      if (__isset.randomCountMin) {
        field.Name = "randomCountMin";
        field.Type = TType.I32;
        field.ID = 60;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(RandomCountMin);
        oprot.WriteFieldEnd();
      }
      if (__isset.randomCountMax) {
        field.Name = "randomCountMax";
        field.Type = TType.I32;
        field.ID = 70;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(RandomCountMax);
        oprot.WriteFieldEnd();
      }
      if (OptionList != null && __isset.optionList) {
        field.Name = "optionList";
        field.Type = TType.List;
        field.ID = 80;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, OptionList.Count));
          foreach (int _iter166 in OptionList)
          {
            oprot.WriteI32(_iter166);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (ItemPrefab != null && __isset.itemPrefab) {
        field.Name = "itemPrefab";
        field.Type = TType.String;
        field.ID = 90;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ItemPrefab);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ItemGeneratorConfig(");
      sb.Append("Id: ");
      sb.Append(Id);
      sb.Append(",BeginTimeMin: ");
      sb.Append(BeginTimeMin);
      sb.Append(",BeginTimeMax: ");
      sb.Append(BeginTimeMax);
      sb.Append(",TickTimeMin: ");
      sb.Append(TickTimeMin);
      sb.Append(",TickTimeMax: ");
      sb.Append(TickTimeMax);
      sb.Append(",BeginFuncId: ");
      sb.Append(BeginFuncId);
      sb.Append(",IsReplace: ");
      sb.Append(IsReplace);
      sb.Append(",RandomCountMin: ");
      sb.Append(RandomCountMin);
      sb.Append(",RandomCountMax: ");
      sb.Append(RandomCountMax);
      sb.Append(",OptionList: ");
      sb.Append(OptionList);
      sb.Append(",ItemPrefab: ");
      sb.Append(ItemPrefab);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
