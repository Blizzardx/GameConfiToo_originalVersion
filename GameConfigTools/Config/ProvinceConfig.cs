/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Config
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ProvinceConfig : TBase
  {
    private int _code;
    private string _name;
    private Dictionary<int, CityConfig> _cityConfigMap;

    public int Code
    {
      get
      {
        return _code;
      }
      set
      {
        __isset.code = true;
        this._code = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public Dictionary<int, CityConfig> CityConfigMap
    {
      get
      {
        return _cityConfigMap;
      }
      set
      {
        __isset.cityConfigMap = true;
        this._cityConfigMap = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool code;
      public bool name;
      public bool cityConfigMap;
    }

    public ProvinceConfig() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 10:
            if (field.Type == TType.I32) {
              Code = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.Map) {
              {
                CityConfigMap = new Dictionary<int, CityConfig>();
                TMap _map228 = iprot.ReadMapBegin();
                for( int _i229 = 0; _i229 < _map228.Count; ++_i229)
                {
                  int _key230;
                  CityConfig _val231;
                  _key230 = iprot.ReadI32();
                  _val231 = new CityConfig();
                  _val231.Read(iprot);
                  CityConfigMap[_key230] = _val231;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ProvinceConfig");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.code) {
        field.Name = "code";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Code);
        oprot.WriteFieldEnd();
      }
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      if (CityConfigMap != null && __isset.cityConfigMap) {
        field.Name = "cityConfigMap";
        field.Type = TType.Map;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I32, TType.Struct, CityConfigMap.Count));
          foreach (int _iter232 in CityConfigMap.Keys)
          {
            oprot.WriteI32(_iter232);
            CityConfigMap[_iter232].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ProvinceConfig(");
      sb.Append("Code: ");
      sb.Append(Code);
      sb.Append(",Name: ");
      sb.Append(Name);
      sb.Append(",CityConfigMap: ");
      sb.Append(CityConfigMap);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
