/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Config
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ActiveAwardConfig : TBase
  {
    private int _value;
    private int _cycleCounterId;
    private int _funcId;

    public int Value
    {
      get
      {
        return _value;
      }
      set
      {
        __isset.value = true;
        this._value = value;
      }
    }

    public int CycleCounterId
    {
      get
      {
        return _cycleCounterId;
      }
      set
      {
        __isset.cycleCounterId = true;
        this._cycleCounterId = value;
      }
    }

    public int FuncId
    {
      get
      {
        return _funcId;
      }
      set
      {
        __isset.funcId = true;
        this._funcId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool value;
      public bool cycleCounterId;
      public bool funcId;
    }

    public ActiveAwardConfig() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 10:
            if (field.Type == TType.I32) {
              Value = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.I32) {
              CycleCounterId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.I32) {
              FuncId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ActiveAwardConfig");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.value) {
        field.Name = "value";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Value);
        oprot.WriteFieldEnd();
      }
      if (__isset.cycleCounterId) {
        field.Name = "cycleCounterId";
        field.Type = TType.I32;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(CycleCounterId);
        oprot.WriteFieldEnd();
      }
      if (__isset.funcId) {
        field.Name = "funcId";
        field.Type = TType.I32;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(FuncId);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ActiveAwardConfig(");
      sb.Append("Value: ");
      sb.Append(Value);
      sb.Append(",CycleCounterId: ");
      sb.Append(CycleCounterId);
      sb.Append(",FuncId: ");
      sb.Append(FuncId);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
