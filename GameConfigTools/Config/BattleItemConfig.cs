/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Config
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class BattleItemConfig : TBase
  {
    private int _id;
    private string _resource;
    private int _totalFrame;
    private int _maxFrame;
    private int _minSpeedX;
    private int _maxSpeedX;
    private int _minSpeedY;
    private int _maxSpeedY;
    private int _minInterval;
    private int _maxInterval;
    private int _collisionLimitId;
    private int _collisionFuncId;
    private string _dataPrefab;
    private string _dieEffect;
    private string _flyEffect;

    public int Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public string Resource
    {
      get
      {
        return _resource;
      }
      set
      {
        __isset.resource = true;
        this._resource = value;
      }
    }

    public int TotalFrame
    {
      get
      {
        return _totalFrame;
      }
      set
      {
        __isset.totalFrame = true;
        this._totalFrame = value;
      }
    }

    public int MaxFrame
    {
      get
      {
        return _maxFrame;
      }
      set
      {
        __isset.maxFrame = true;
        this._maxFrame = value;
      }
    }

    public int MinSpeedX
    {
      get
      {
        return _minSpeedX;
      }
      set
      {
        __isset.minSpeedX = true;
        this._minSpeedX = value;
      }
    }

    public int MaxSpeedX
    {
      get
      {
        return _maxSpeedX;
      }
      set
      {
        __isset.maxSpeedX = true;
        this._maxSpeedX = value;
      }
    }

    public int MinSpeedY
    {
      get
      {
        return _minSpeedY;
      }
      set
      {
        __isset.minSpeedY = true;
        this._minSpeedY = value;
      }
    }

    public int MaxSpeedY
    {
      get
      {
        return _maxSpeedY;
      }
      set
      {
        __isset.maxSpeedY = true;
        this._maxSpeedY = value;
      }
    }

    public int MinInterval
    {
      get
      {
        return _minInterval;
      }
      set
      {
        __isset.minInterval = true;
        this._minInterval = value;
      }
    }

    public int MaxInterval
    {
      get
      {
        return _maxInterval;
      }
      set
      {
        __isset.maxInterval = true;
        this._maxInterval = value;
      }
    }

    public int CollisionLimitId
    {
      get
      {
        return _collisionLimitId;
      }
      set
      {
        __isset.collisionLimitId = true;
        this._collisionLimitId = value;
      }
    }

    public int CollisionFuncId
    {
      get
      {
        return _collisionFuncId;
      }
      set
      {
        __isset.collisionFuncId = true;
        this._collisionFuncId = value;
      }
    }

    public string DataPrefab
    {
      get
      {
        return _dataPrefab;
      }
      set
      {
        __isset.dataPrefab = true;
        this._dataPrefab = value;
      }
    }

    public string DieEffect
    {
      get
      {
        return _dieEffect;
      }
      set
      {
        __isset.dieEffect = true;
        this._dieEffect = value;
      }
    }

    public string FlyEffect
    {
      get
      {
        return _flyEffect;
      }
      set
      {
        __isset.flyEffect = true;
        this._flyEffect = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool resource;
      public bool totalFrame;
      public bool maxFrame;
      public bool minSpeedX;
      public bool maxSpeedX;
      public bool minSpeedY;
      public bool maxSpeedY;
      public bool minInterval;
      public bool maxInterval;
      public bool collisionLimitId;
      public bool collisionFuncId;
      public bool dataPrefab;
      public bool dieEffect;
      public bool flyEffect;
    }

    public BattleItemConfig() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 10:
            if (field.Type == TType.I32) {
              Id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.String) {
              Resource = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.I32) {
              TotalFrame = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 40:
            if (field.Type == TType.I32) {
              MaxFrame = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 50:
            if (field.Type == TType.I32) {
              MinSpeedX = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 60:
            if (field.Type == TType.I32) {
              MaxSpeedX = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 70:
            if (field.Type == TType.I32) {
              MinSpeedY = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 80:
            if (field.Type == TType.I32) {
              MaxSpeedY = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 90:
            if (field.Type == TType.I32) {
              MinInterval = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 100:
            if (field.Type == TType.I32) {
              MaxInterval = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 110:
            if (field.Type == TType.I32) {
              CollisionLimitId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 120:
            if (field.Type == TType.I32) {
              CollisionFuncId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 130:
            if (field.Type == TType.String) {
              DataPrefab = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 140:
            if (field.Type == TType.String) {
              DieEffect = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 150:
            if (field.Type == TType.String) {
              FlyEffect = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("BattleItemConfig");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.id) {
        field.Name = "id";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Id);
        oprot.WriteFieldEnd();
      }
      if (Resource != null && __isset.resource) {
        field.Name = "resource";
        field.Type = TType.String;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Resource);
        oprot.WriteFieldEnd();
      }
      if (__isset.totalFrame) {
        field.Name = "totalFrame";
        field.Type = TType.I32;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TotalFrame);
        oprot.WriteFieldEnd();
      }
      if (__isset.maxFrame) {
        field.Name = "maxFrame";
        field.Type = TType.I32;
        field.ID = 40;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MaxFrame);
        oprot.WriteFieldEnd();
      }
      if (__isset.minSpeedX) {
        field.Name = "minSpeedX";
        field.Type = TType.I32;
        field.ID = 50;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MinSpeedX);
        oprot.WriteFieldEnd();
      }
      if (__isset.maxSpeedX) {
        field.Name = "maxSpeedX";
        field.Type = TType.I32;
        field.ID = 60;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MaxSpeedX);
        oprot.WriteFieldEnd();
      }
      if (__isset.minSpeedY) {
        field.Name = "minSpeedY";
        field.Type = TType.I32;
        field.ID = 70;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MinSpeedY);
        oprot.WriteFieldEnd();
      }
      if (__isset.maxSpeedY) {
        field.Name = "maxSpeedY";
        field.Type = TType.I32;
        field.ID = 80;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MaxSpeedY);
        oprot.WriteFieldEnd();
      }
      if (__isset.minInterval) {
        field.Name = "minInterval";
        field.Type = TType.I32;
        field.ID = 90;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MinInterval);
        oprot.WriteFieldEnd();
      }
      if (__isset.maxInterval) {
        field.Name = "maxInterval";
        field.Type = TType.I32;
        field.ID = 100;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MaxInterval);
        oprot.WriteFieldEnd();
      }
      if (__isset.collisionLimitId) {
        field.Name = "collisionLimitId";
        field.Type = TType.I32;
        field.ID = 110;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(CollisionLimitId);
        oprot.WriteFieldEnd();
      }
      if (__isset.collisionFuncId) {
        field.Name = "collisionFuncId";
        field.Type = TType.I32;
        field.ID = 120;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(CollisionFuncId);
        oprot.WriteFieldEnd();
      }
      if (DataPrefab != null && __isset.dataPrefab) {
        field.Name = "dataPrefab";
        field.Type = TType.String;
        field.ID = 130;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DataPrefab);
        oprot.WriteFieldEnd();
      }
      if (DieEffect != null && __isset.dieEffect) {
        field.Name = "dieEffect";
        field.Type = TType.String;
        field.ID = 140;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DieEffect);
        oprot.WriteFieldEnd();
      }
      if (FlyEffect != null && __isset.flyEffect) {
        field.Name = "flyEffect";
        field.Type = TType.String;
        field.ID = 150;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(FlyEffect);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("BattleItemConfig(");
      sb.Append("Id: ");
      sb.Append(Id);
      sb.Append(",Resource: ");
      sb.Append(Resource);
      sb.Append(",TotalFrame: ");
      sb.Append(TotalFrame);
      sb.Append(",MaxFrame: ");
      sb.Append(MaxFrame);
      sb.Append(",MinSpeedX: ");
      sb.Append(MinSpeedX);
      sb.Append(",MaxSpeedX: ");
      sb.Append(MaxSpeedX);
      sb.Append(",MinSpeedY: ");
      sb.Append(MinSpeedY);
      sb.Append(",MaxSpeedY: ");
      sb.Append(MaxSpeedY);
      sb.Append(",MinInterval: ");
      sb.Append(MinInterval);
      sb.Append(",MaxInterval: ");
      sb.Append(MaxInterval);
      sb.Append(",CollisionLimitId: ");
      sb.Append(CollisionLimitId);
      sb.Append(",CollisionFuncId: ");
      sb.Append(CollisionFuncId);
      sb.Append(",DataPrefab: ");
      sb.Append(DataPrefab);
      sb.Append(",DieEffect: ");
      sb.Append(DieEffect);
      sb.Append(",FlyEffect: ");
      sb.Append(FlyEffect);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
