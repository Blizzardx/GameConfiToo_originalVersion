/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Config
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class GrowAttrRateConfig : TBase
  {
    private int _id;
    private sbyte _starLevel;
    private sbyte _quality;
    private int _addHp;
    private int _addPhyAtk;
    private int _addPhyDef;
    private int _addMagicAtk;
    private int _addMagicDef;
    private int _addAvo;
    private int _addCri;
    private int _addCriDamage;

    public int Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public sbyte StarLevel
    {
      get
      {
        return _starLevel;
      }
      set
      {
        __isset.starLevel = true;
        this._starLevel = value;
      }
    }

    public sbyte Quality
    {
      get
      {
        return _quality;
      }
      set
      {
        __isset.quality = true;
        this._quality = value;
      }
    }

    public int AddHp
    {
      get
      {
        return _addHp;
      }
      set
      {
        __isset.addHp = true;
        this._addHp = value;
      }
    }

    public int AddPhyAtk
    {
      get
      {
        return _addPhyAtk;
      }
      set
      {
        __isset.addPhyAtk = true;
        this._addPhyAtk = value;
      }
    }

    public int AddPhyDef
    {
      get
      {
        return _addPhyDef;
      }
      set
      {
        __isset.addPhyDef = true;
        this._addPhyDef = value;
      }
    }

    public int AddMagicAtk
    {
      get
      {
        return _addMagicAtk;
      }
      set
      {
        __isset.addMagicAtk = true;
        this._addMagicAtk = value;
      }
    }

    public int AddMagicDef
    {
      get
      {
        return _addMagicDef;
      }
      set
      {
        __isset.addMagicDef = true;
        this._addMagicDef = value;
      }
    }

    public int AddAvo
    {
      get
      {
        return _addAvo;
      }
      set
      {
        __isset.addAvo = true;
        this._addAvo = value;
      }
    }

    public int AddCri
    {
      get
      {
        return _addCri;
      }
      set
      {
        __isset.addCri = true;
        this._addCri = value;
      }
    }

    public int AddCriDamage
    {
      get
      {
        return _addCriDamage;
      }
      set
      {
        __isset.addCriDamage = true;
        this._addCriDamage = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool starLevel;
      public bool quality;
      public bool addHp;
      public bool addPhyAtk;
      public bool addPhyDef;
      public bool addMagicAtk;
      public bool addMagicDef;
      public bool addAvo;
      public bool addCri;
      public bool addCriDamage;
    }

    public GrowAttrRateConfig() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 10:
            if (field.Type == TType.I32) {
              Id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.Byte) {
              StarLevel = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.Byte) {
              Quality = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 40:
            if (field.Type == TType.I32) {
              AddHp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 50:
            if (field.Type == TType.I32) {
              AddPhyAtk = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 60:
            if (field.Type == TType.I32) {
              AddPhyDef = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 70:
            if (field.Type == TType.I32) {
              AddMagicAtk = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 80:
            if (field.Type == TType.I32) {
              AddMagicDef = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 90:
            if (field.Type == TType.I32) {
              AddAvo = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 100:
            if (field.Type == TType.I32) {
              AddCri = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 110:
            if (field.Type == TType.I32) {
              AddCriDamage = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("GrowAttrRateConfig");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.id) {
        field.Name = "id";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Id);
        oprot.WriteFieldEnd();
      }
      if (__isset.starLevel) {
        field.Name = "starLevel";
        field.Type = TType.Byte;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(StarLevel);
        oprot.WriteFieldEnd();
      }
      if (__isset.quality) {
        field.Name = "quality";
        field.Type = TType.Byte;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Quality);
        oprot.WriteFieldEnd();
      }
      if (__isset.addHp) {
        field.Name = "addHp";
        field.Type = TType.I32;
        field.ID = 40;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(AddHp);
        oprot.WriteFieldEnd();
      }
      if (__isset.addPhyAtk) {
        field.Name = "addPhyAtk";
        field.Type = TType.I32;
        field.ID = 50;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(AddPhyAtk);
        oprot.WriteFieldEnd();
      }
      if (__isset.addPhyDef) {
        field.Name = "addPhyDef";
        field.Type = TType.I32;
        field.ID = 60;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(AddPhyDef);
        oprot.WriteFieldEnd();
      }
      if (__isset.addMagicAtk) {
        field.Name = "addMagicAtk";
        field.Type = TType.I32;
        field.ID = 70;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(AddMagicAtk);
        oprot.WriteFieldEnd();
      }
      if (__isset.addMagicDef) {
        field.Name = "addMagicDef";
        field.Type = TType.I32;
        field.ID = 80;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(AddMagicDef);
        oprot.WriteFieldEnd();
      }
      if (__isset.addAvo) {
        field.Name = "addAvo";
        field.Type = TType.I32;
        field.ID = 90;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(AddAvo);
        oprot.WriteFieldEnd();
      }
      if (__isset.addCri) {
        field.Name = "addCri";
        field.Type = TType.I32;
        field.ID = 100;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(AddCri);
        oprot.WriteFieldEnd();
      }
      if (__isset.addCriDamage) {
        field.Name = "addCriDamage";
        field.Type = TType.I32;
        field.ID = 110;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(AddCriDamage);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("GrowAttrRateConfig(");
      sb.Append("Id: ");
      sb.Append(Id);
      sb.Append(",StarLevel: ");
      sb.Append(StarLevel);
      sb.Append(",Quality: ");
      sb.Append(Quality);
      sb.Append(",AddHp: ");
      sb.Append(AddHp);
      sb.Append(",AddPhyAtk: ");
      sb.Append(AddPhyAtk);
      sb.Append(",AddPhyDef: ");
      sb.Append(AddPhyDef);
      sb.Append(",AddMagicAtk: ");
      sb.Append(AddMagicAtk);
      sb.Append(",AddMagicDef: ");
      sb.Append(AddMagicDef);
      sb.Append(",AddAvo: ");
      sb.Append(AddAvo);
      sb.Append(",AddCri: ");
      sb.Append(AddCri);
      sb.Append(",AddCriDamage: ");
      sb.Append(AddCriDamage);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
