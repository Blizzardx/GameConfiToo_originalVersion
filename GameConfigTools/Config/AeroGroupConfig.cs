/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Config
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class AeroGroupConfig : TBase
  {
    private int _groupId;
    private int _showLimitId;
    private int _activeMessageId;
    private int _activeLimitId;
    private int _activeConsumeId;
    private int _order;

    public int GroupId
    {
      get
      {
        return _groupId;
      }
      set
      {
        __isset.groupId = true;
        this._groupId = value;
      }
    }

    public int ShowLimitId
    {
      get
      {
        return _showLimitId;
      }
      set
      {
        __isset.showLimitId = true;
        this._showLimitId = value;
      }
    }

    public int ActiveMessageId
    {
      get
      {
        return _activeMessageId;
      }
      set
      {
        __isset.activeMessageId = true;
        this._activeMessageId = value;
      }
    }

    public int ActiveLimitId
    {
      get
      {
        return _activeLimitId;
      }
      set
      {
        __isset.activeLimitId = true;
        this._activeLimitId = value;
      }
    }

    public int ActiveConsumeId
    {
      get
      {
        return _activeConsumeId;
      }
      set
      {
        __isset.activeConsumeId = true;
        this._activeConsumeId = value;
      }
    }

    public int Order
    {
      get
      {
        return _order;
      }
      set
      {
        __isset.order = true;
        this._order = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool groupId;
      public bool showLimitId;
      public bool activeMessageId;
      public bool activeLimitId;
      public bool activeConsumeId;
      public bool order;
    }

    public AeroGroupConfig() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 10:
            if (field.Type == TType.I32) {
              GroupId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.I32) {
              ShowLimitId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 29:
            if (field.Type == TType.I32) {
              ActiveMessageId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.I32) {
              ActiveLimitId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 40:
            if (field.Type == TType.I32) {
              ActiveConsumeId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 50:
            if (field.Type == TType.I32) {
              Order = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("AeroGroupConfig");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.groupId) {
        field.Name = "groupId";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(GroupId);
        oprot.WriteFieldEnd();
      }
      if (__isset.showLimitId) {
        field.Name = "showLimitId";
        field.Type = TType.I32;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ShowLimitId);
        oprot.WriteFieldEnd();
      }
      if (__isset.activeMessageId) {
        field.Name = "activeMessageId";
        field.Type = TType.I32;
        field.ID = 29;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ActiveMessageId);
        oprot.WriteFieldEnd();
      }
      if (__isset.activeLimitId) {
        field.Name = "activeLimitId";
        field.Type = TType.I32;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ActiveLimitId);
        oprot.WriteFieldEnd();
      }
      if (__isset.activeConsumeId) {
        field.Name = "activeConsumeId";
        field.Type = TType.I32;
        field.ID = 40;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ActiveConsumeId);
        oprot.WriteFieldEnd();
      }
      if (__isset.order) {
        field.Name = "order";
        field.Type = TType.I32;
        field.ID = 50;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Order);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("AeroGroupConfig(");
      sb.Append("GroupId: ");
      sb.Append(GroupId);
      sb.Append(",ShowLimitId: ");
      sb.Append(ShowLimitId);
      sb.Append(",ActiveMessageId: ");
      sb.Append(ActiveMessageId);
      sb.Append(",ActiveLimitId: ");
      sb.Append(ActiveLimitId);
      sb.Append(",ActiveConsumeId: ");
      sb.Append(ActiveConsumeId);
      sb.Append(",Order: ");
      sb.Append(Order);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
