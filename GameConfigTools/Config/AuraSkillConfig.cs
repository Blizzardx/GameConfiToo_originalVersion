/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Config
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class AuraSkillConfig : TBase
  {
    private int _id;
    private string _effectResource;
    private int _tickTime;
    private bool _continueTick;
    private int _tickTargetId;
    private int _tickLimitId;
    private int _tickFuncId;
    private int _leaveAuraFuncId;

    public int Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public string EffectResource
    {
      get
      {
        return _effectResource;
      }
      set
      {
        __isset.effectResource = true;
        this._effectResource = value;
      }
    }

    public int TickTime
    {
      get
      {
        return _tickTime;
      }
      set
      {
        __isset.tickTime = true;
        this._tickTime = value;
      }
    }

    public bool ContinueTick
    {
      get
      {
        return _continueTick;
      }
      set
      {
        __isset.continueTick = true;
        this._continueTick = value;
      }
    }

    public int TickTargetId
    {
      get
      {
        return _tickTargetId;
      }
      set
      {
        __isset.tickTargetId = true;
        this._tickTargetId = value;
      }
    }

    public int TickLimitId
    {
      get
      {
        return _tickLimitId;
      }
      set
      {
        __isset.tickLimitId = true;
        this._tickLimitId = value;
      }
    }

    public int TickFuncId
    {
      get
      {
        return _tickFuncId;
      }
      set
      {
        __isset.tickFuncId = true;
        this._tickFuncId = value;
      }
    }

    public int LeaveAuraFuncId
    {
      get
      {
        return _leaveAuraFuncId;
      }
      set
      {
        __isset.leaveAuraFuncId = true;
        this._leaveAuraFuncId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool effectResource;
      public bool tickTime;
      public bool continueTick;
      public bool tickTargetId;
      public bool tickLimitId;
      public bool tickFuncId;
      public bool leaveAuraFuncId;
    }

    public AuraSkillConfig() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 10:
            if (field.Type == TType.I32) {
              Id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.String) {
              EffectResource = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.I32) {
              TickTime = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 40:
            if (field.Type == TType.Bool) {
              ContinueTick = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 50:
            if (field.Type == TType.I32) {
              TickTargetId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 60:
            if (field.Type == TType.I32) {
              TickLimitId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 70:
            if (field.Type == TType.I32) {
              TickFuncId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 80:
            if (field.Type == TType.I32) {
              LeaveAuraFuncId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("AuraSkillConfig");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.id) {
        field.Name = "id";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Id);
        oprot.WriteFieldEnd();
      }
      if (EffectResource != null && __isset.effectResource) {
        field.Name = "effectResource";
        field.Type = TType.String;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(EffectResource);
        oprot.WriteFieldEnd();
      }
      if (__isset.tickTime) {
        field.Name = "tickTime";
        field.Type = TType.I32;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TickTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.continueTick) {
        field.Name = "continueTick";
        field.Type = TType.Bool;
        field.ID = 40;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(ContinueTick);
        oprot.WriteFieldEnd();
      }
      if (__isset.tickTargetId) {
        field.Name = "tickTargetId";
        field.Type = TType.I32;
        field.ID = 50;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TickTargetId);
        oprot.WriteFieldEnd();
      }
      if (__isset.tickLimitId) {
        field.Name = "tickLimitId";
        field.Type = TType.I32;
        field.ID = 60;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TickLimitId);
        oprot.WriteFieldEnd();
      }
      if (__isset.tickFuncId) {
        field.Name = "tickFuncId";
        field.Type = TType.I32;
        field.ID = 70;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TickFuncId);
        oprot.WriteFieldEnd();
      }
      if (__isset.leaveAuraFuncId) {
        field.Name = "leaveAuraFuncId";
        field.Type = TType.I32;
        field.ID = 80;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(LeaveAuraFuncId);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("AuraSkillConfig(");
      sb.Append("Id: ");
      sb.Append(Id);
      sb.Append(",EffectResource: ");
      sb.Append(EffectResource);
      sb.Append(",TickTime: ");
      sb.Append(TickTime);
      sb.Append(",ContinueTick: ");
      sb.Append(ContinueTick);
      sb.Append(",TickTargetId: ");
      sb.Append(TickTargetId);
      sb.Append(",TickLimitId: ");
      sb.Append(TickLimitId);
      sb.Append(",TickFuncId: ");
      sb.Append(TickFuncId);
      sb.Append(",LeaveAuraFuncId: ");
      sb.Append(LeaveAuraFuncId);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
