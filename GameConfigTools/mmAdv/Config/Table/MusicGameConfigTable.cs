/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Config.Table
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class MusicGameConfigTable : TBase
  {
    private List<Config.MusicGameRangeConfig> _musicRangeConfigMap;
    private List<Config.MusicGameSpeedConfig> _musicSpeedConfigMap;
    private List<Config.MusicGameErrorConfig> _musicErrorConfigMap;

    public List<Config.MusicGameRangeConfig> MusicRangeConfigMap
    {
      get
      {
        return _musicRangeConfigMap;
      }
      set
      {
        __isset.musicRangeConfigMap = true;
        this._musicRangeConfigMap = value;
      }
    }

    public List<Config.MusicGameSpeedConfig> MusicSpeedConfigMap
    {
      get
      {
        return _musicSpeedConfigMap;
      }
      set
      {
        __isset.musicSpeedConfigMap = true;
        this._musicSpeedConfigMap = value;
      }
    }

    public List<Config.MusicGameErrorConfig> MusicErrorConfigMap
    {
      get
      {
        return _musicErrorConfigMap;
      }
      set
      {
        __isset.musicErrorConfigMap = true;
        this._musicErrorConfigMap = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool musicRangeConfigMap;
      public bool musicSpeedConfigMap;
      public bool musicErrorConfigMap;
    }

    public MusicGameConfigTable() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 10:
            if (field.Type == TType.List) {
              {
                MusicRangeConfigMap = new List<Config.MusicGameRangeConfig>();
                TList _list100 = iprot.ReadListBegin();
                for( int _i101 = 0; _i101 < _list100.Count; ++_i101)
                {
                  Config.MusicGameRangeConfig _elem102 = new Config.MusicGameRangeConfig();
                  _elem102 = new Config.MusicGameRangeConfig();
                  _elem102.Read(iprot);
                  MusicRangeConfigMap.Add(_elem102);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.List) {
              {
                MusicSpeedConfigMap = new List<Config.MusicGameSpeedConfig>();
                TList _list103 = iprot.ReadListBegin();
                for( int _i104 = 0; _i104 < _list103.Count; ++_i104)
                {
                  Config.MusicGameSpeedConfig _elem105 = new Config.MusicGameSpeedConfig();
                  _elem105 = new Config.MusicGameSpeedConfig();
                  _elem105.Read(iprot);
                  MusicSpeedConfigMap.Add(_elem105);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.List) {
              {
                MusicErrorConfigMap = new List<Config.MusicGameErrorConfig>();
                TList _list106 = iprot.ReadListBegin();
                for( int _i107 = 0; _i107 < _list106.Count; ++_i107)
                {
                  Config.MusicGameErrorConfig _elem108 = new Config.MusicGameErrorConfig();
                  _elem108 = new Config.MusicGameErrorConfig();
                  _elem108.Read(iprot);
                  MusicErrorConfigMap.Add(_elem108);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("MusicGameConfigTable");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (MusicRangeConfigMap != null && __isset.musicRangeConfigMap) {
        field.Name = "musicRangeConfigMap";
        field.Type = TType.List;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, MusicRangeConfigMap.Count));
          foreach (Config.MusicGameRangeConfig _iter109 in MusicRangeConfigMap)
          {
            _iter109.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (MusicSpeedConfigMap != null && __isset.musicSpeedConfigMap) {
        field.Name = "musicSpeedConfigMap";
        field.Type = TType.List;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, MusicSpeedConfigMap.Count));
          foreach (Config.MusicGameSpeedConfig _iter110 in MusicSpeedConfigMap)
          {
            _iter110.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (MusicErrorConfigMap != null && __isset.musicErrorConfigMap) {
        field.Name = "musicErrorConfigMap";
        field.Type = TType.List;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, MusicErrorConfigMap.Count));
          foreach (Config.MusicGameErrorConfig _iter111 in MusicErrorConfigMap)
          {
            _iter111.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("MusicGameConfigTable(");
      sb.Append("MusicRangeConfigMap: ");
      sb.Append(MusicRangeConfigMap);
      sb.Append(",MusicSpeedConfigMap: ");
      sb.Append(MusicSpeedConfigMap);
      sb.Append(",MusicErrorConfigMap: ");
      sb.Append(MusicErrorConfigMap);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
